{
  "https://www.postgresql.org/docs/15/spi-spi-cursor-move.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-file-locations.html": [],
  "https://www.postgresql.org/docs/15/docguide-toolsets.html": [],
  "https://www.postgresql.org/docs/15/appendixes.html": [],
  "https://www.postgresql.org/docs/15/pgtestfsync.html": [],
  "https://www.postgresql.org/docs/15/reference-client.html": [],
  "https://www.postgresql.org/docs/15/hash-implementation.html": [],
  "https://www.postgresql.org/docs/15/oldsnapshot.html": [],
  "https://www.postgresql.org/docs/15/uuid-ossp.html": [
    "SELECT uuid_generate_v3(uuid_ns_url(), 'http://www.postgresql.org');"
  ],
  "https://www.postgresql.org/docs/15/functions-geometry.html": [],
  "https://www.postgresql.org/docs/15/infoschema-check-constraint-routine-usage.html": [],
  "https://www.postgresql.org/docs/15/textsearch-dictionaries.html": [
    "ALTER TEXT SEARCH CONFIGURATION astro_en\n    ADD MAPPING FOR asciiword WITH astrosyn, english_ispell, english_stem;",
    "CREATE TEXT SEARCH DICTIONARY public.simple_dict (\n    TEMPLATE = pg_catalog.simple,\n    STOPWORDS = english\n);",
    "CREATE TEXT SEARCH DICTIONARY thesaurus_simple (\n    TEMPLATE = thesaurus,\n    DictFile = mythesaurus,\n    Dictionary = pg_catalog.english_stem\n);",
    "ALTER TEXT SEARCH CONFIGURATION russian\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart\n    WITH thesaurus_simple;",
    "CREATE TEXT SEARCH DICTIONARY thesaurus_astro (\n    TEMPLATE = thesaurus,\n    DictFile = thesaurus_astro,\n    Dictionary = english_stem\n);",
    "ALTER TEXT SEARCH CONFIGURATION russian\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart\n    WITH thesaurus_astro, english_stem;",
    "CREATE TEXT SEARCH DICTIONARY english_hunspell (\n    TEMPLATE = ispell,\n    DictFile = en_us,\n    AffFile = en_us,\n    Stopwords = english);",
    "SELECT ts_lexize('norwegian_ispell', 'overbuljongterningpakkmesterassistent');",
    "SELECT ts_lexize('norwegian_ispell', 'sjokoladefabrikk')",
    "PFX A Y 1\nPFX A   0     re         .\nSFX T N 4\nSFX T   0     st         e\nSFX T   y     iest       [^aeiou]y\nSFX T   0     est        [aeiou]y\nSFX T   0     est        [^ey]",
    "CREATE TEXT SEARCH DICTIONARY english_stem (\n    TEMPLATE = snowball,\n    Language = english,\n    StopWords = english\n);"
  ],
  "https://www.postgresql.org/docs/15/ecpg-sql-describe.html": [
    "EXEC SQL ALLOCATE DESCRIPTOR mydesc;",
    "EXEC SQL PREPARE stmt1 FROM :sql_stmt;",
    "EXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR mydesc;",
    "EXEC SQL GET DESCRIPTOR mydesc VALUE 1 :charvar = NAME;",
    "EXEC SQL DEALLOCATE DESCRIPTOR mydesc;"
  ],
  "https://www.postgresql.org/docs/15/intro-whatis.html": [],
  "https://www.postgresql.org/docs/15/infoschema-routines.html": [],
  "https://www.postgresql.org/docs/15/file-fdw.html": [
    "CREATE EXTENSION file_fdw;",
    "CREATE SERVER pglog FOREIGN DATA WRAPPER file_fdw;",
    "CREATE FOREIGN TABLE pglog (\n  log_time timestamp(3) with time zone,\n  user_name text,\n  database_name text,\n  process_id integer,\n  connection_from text,\n  session_id text,\n  session_line_num bigint,\n  command_tag text,\n  session_start_time timestamp with time zone,\n  virtual_transaction_id text,\n  transaction_id bigint,\n  error_severity text,\n  sql_state_code text,\n  message text,\n  detail text,\n  hint text,\n  internal_query text,\n  internal_query_pos integer,\n  context text,\n  query text,\n  query_pos integer,\n  location text,\n  application_name text,\n  backend_type text,\n  leader_pid integer,\n  query_id bigint\n) SERVER pglog\nOPTIONS ( filename 'log/pglog.csv', format 'csv' );"
  ],
  "https://www.postgresql.org/docs/15/tutorial-concepts.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execute-extended.html": [],
  "https://www.postgresql.org/docs/15/ecpg-concept.html": [
    "EXEC SQL ...;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-parameters.html": [],
  "https://www.postgresql.org/docs/15/pltcl-data.html": [],
  "https://www.postgresql.org/docs/15/ddl-basics.html": [
    "CREATE TABLE my_first_table (\n    first_column text,\n    second_column integer\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);",
    "DROP TABLE my_first_table;",
    "DROP TABLE products;"
  ],
  "https://www.postgresql.org/docs/15/functions-srf.html": [
    "SELECT * FROM generate_series(2,4);",
    "SELECT * FROM generate_series(5,1,-2)",
    "SELECT * FROM generate_series(4,3)",
    "SELECT generate_series(1.1, 4, 1.3)",
    "SELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a)",
    "SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours')",
    "SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;",
    "SELECT * FROM arrays",
    "SELECT a AS array, s AS subscript, a[s] AS value\nFROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo",
    "CREATE OR REPLACE FUNCTION unnest2(anyarray)\nRETURNS SETOF anyelement AS $$\nselect $1[i][j]\n   from generate_subscripts($1,1) g1(i),\n        generate_subscripts($1,2) g2(j)",
    "CREATE FUNCTION\nSELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);",
    "SELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);"
  ],
  "https://www.postgresql.org/docs/15/indexam.html": [],
  "https://www.postgresql.org/docs/15/functions-textsearch.html": [],
  "https://www.postgresql.org/docs/15/install-binaries.html": [],
  "https://www.postgresql.org/docs/15/index.html": [],
  "https://www.postgresql.org/docs/15/plpython-subtransaction.html": [
    "CREATE FUNCTION transfer_funds() RETURNS void AS $$\ntry:\n    plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n    plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\nexcept plpy.SPIError as e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION transfer_funds2() RETURNS void AS $$\ntry:\n    with plpy.subtransaction():\n        plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n        plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\nexcept plpy.SPIError as e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpython3u;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-foreign-data-wrapper-options.html": [],
  "https://www.postgresql.org/docs/15/datatype-oid.html": [
    "SELECT * FROM pg_attribute WHERE attrelid = 'mytable'::regclass;",
    "SELECT * FROM pg_attribute\n  WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'mytable');",
    "SELECT table_schema, table_name,\n       pg_relation_size((quote_ident(table_schema) || '.' ||\n                         quote_ident(table_name))::regclass)\nFROM information_schema.tables\nWHERE ...",
    "SELECT pg_relation_size(table_name)\nFROM information_schema.tables\nWHERE ..."
  ],
  "https://www.postgresql.org/docs/15/ddl-others.html": [],
  "https://www.postgresql.org/docs/15/sql-createtsparser.html": [],
  "https://www.postgresql.org/docs/15/sql-delete.html": [
    "DELETE FROM films USING producers\n  WHERE producer_id = producers.id AND producers.name = 'foo';",
    "DELETE FROM films\n  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');",
    "DELETE FROM films WHERE kind <> 'Musical';",
    "DELETE FROM films;",
    "DELETE FROM tasks WHERE status = 'DONE' RETURNING *;",
    "DELETE FROM tasks WHERE CURRENT OF c_tasks;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-column-domain-usage.html": [],
  "https://www.postgresql.org/docs/15/query-path.html": [],
  "https://www.postgresql.org/docs/15/geqo-pg-intro.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-default-acl.html": [],
  "https://www.postgresql.org/docs/15/textsearch-features.html": [
    "CREATE FUNCTION messages_trigger() RETURNS trigger AS $$\nbegin\n  new.tsv :=\n     setweight(to_tsvector('pg_catalog.english', coalesce(new.title,'')), 'A') ||\n     setweight(to_tsvector('pg_catalog.english', coalesce(new.body,'')), 'D');\n  return new;\nend\n$$ LANGUAGE plpgsql;",
    "CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE\n    ON messages FOR EACH ROW EXECUTE FUNCTION messages_trigger();",
    "SELECT * FROM ts_stat('SELECT vector FROM apod')\nORDER BY nentry DESC, ndoc DESC, word\nLIMIT 10;",
    "SELECT * FROM ts_stat('SELECT vector FROM apod', 'ab')\nORDER BY nentry DESC, ndoc DESC, word\nLIMIT 10;"
  ],
  "https://www.postgresql.org/docs/15/appendix-obsolete.html": [],
  "https://www.postgresql.org/docs/15/gin-implementation.html": [],
  "https://www.postgresql.org/docs/15/plpython-data.html": [
    "CREATE FUNCTION pymax (a integer, b integer)\n  RETURNS integer\nAS $$\n  if (a is None) or (b is None):\n    return None\n  if a > b:\n    return a\n  return b\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION return_arr()\n  RETURNS int[]\nAS $$\nreturn [1, 2, 3, 4, 5]\n$$ LANGUAGE plpython3u;",
    "SELECT return_arr();",
    "CREATE FUNCTION test_type_conversion_array_int4(x int4[]) RETURNS int4[] AS $$\nplpy.info(x, type(x))\nreturn x\n$$ LANGUAGE plpython3u;",
    "SELECT * FROM test_type_conversion_array_int4(ARRAY[[1,2,3],[4,5,6]]);",
    "CREATE FUNCTION return_str_arr()\n  RETURNS varchar[]\nAS $$\nreturn \"hello\"\n$$ LANGUAGE plpython3u;",
    "SELECT return_str_arr();",
    "CREATE TABLE employee (\n  name text,\n  salary integer,\n  age integer\n);",
    "CREATE FUNCTION overpaid (e employee)\n  RETURNS boolean\nAS $$\n  if e[\"salary\"] > 200000:\n    return True\n  if (e[\"age\"] < 30) and (e[\"salary\"] > 100000):\n    return True\n  return False\n$$ LANGUAGE plpython3u;",
    "CREATE TYPE named_value AS (\n  name   text,\n  value  integer\n);",
    "CREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  return ( name, value )\n  # or alternatively, as list: return [ name, value ]\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  return { \"name\": name, \"value\": value }\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  class named_value:\n    def __init__ (self, n, v):\n      self.name = n\n      self.value = v\n  return named_value(name, value)\n\n  # or simply\n  class nv: pass\n  nv.name = name\n  nv.value = value\n  return nv\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION multiout_simple(OUT i integer, OUT j integer) AS $$\nreturn (1, 2)\n$$ LANGUAGE plpython3u;",
    "SELECT * FROM multiout_simple();",
    "CREATE PROCEDURE python_triple(INOUT a integer, INOUT b integer) AS $$\nreturn (a * 3, b * 3)\n$$ LANGUAGE plpython3u;",
    "CALL python_triple(5, 10);",
    "CREATE TYPE greeting AS (\n  how text,\n  who text\n);",
    "CREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  # return tuple containing lists as composite types\n  # all other combinations work also\n  return ( [ how, \"World\" ], [ how, \"PostgreSQL\" ], [ how, \"PL/Python\" ] )\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  class producer:\n    def __init__ (self, how, who):\n      self.how = how\n      self.who = who\n      self.ndx = -1\n\n    def __iter__ (self):\n      return self\n\n    def next (self):\n      self.ndx += 1\n      if self.ndx == len(self.who):\n        raise StopIteration\n      return ( self.how, self.who[self.ndx] )\n\n  return producer(how, [ \"World\", \"PostgreSQL\", \"PL/Python\" ])\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  for who in [ \"World\", \"PostgreSQL\", \"PL/Python\" ]:\n    yield ( how, who )\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION multiout_simple_setof(n integer, OUT integer, OUT integer) RETURNS SETOF record AS $$\nreturn [(1, 2)] * n\n$$ LANGUAGE plpython3u;",
    "SELECT * FROM multiout_simple_setof(3);"
  ],
  "https://www.postgresql.org/docs/15/infoschema-table-privileges.html": [],
  "https://www.postgresql.org/docs/15/logical-replication-config.html": [],
  "https://www.postgresql.org/docs/15/geqo-intro.html": [],
  "https://www.postgresql.org/docs/15/docguide-authoring.html": [],
  "https://www.postgresql.org/docs/15/sql-createcollation.html": [
    "CREATE COLLATION french (locale = 'fr_FR.utf8');",
    "CREATE COLLATION german_phonebook (provider = icu, locale = 'de-u-co-phonebk');",
    "CREATE COLLATION german FROM \"de_DE\";"
  ],
  "https://www.postgresql.org/docs/15/index-scanning.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-getnspname.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-statistic.html": [],
  "https://www.postgresql.org/docs/15/sql-declare.html": [
    "DECLARE liahona CURSOR FOR SELECT * FROM films;"
  ],
  "https://www.postgresql.org/docs/15/sql-creatematerializedview.html": [],
  "https://www.postgresql.org/docs/15/citext.html": [
    "SELECT * FROM tab WHERE lower(col) = LOWER(?);",
    "CREATE TABLE users (\n    nick CITEXT PRIMARY KEY,\n    pass TEXT   NOT NULL\n);",
    "INSERT INTO users VALUES ( 'larry',  sha256(random()::text::bytea) );",
    "INSERT INTO users VALUES ( 'Tom',    sha256(random()::text::bytea) );",
    "INSERT INTO users VALUES ( 'Damian', sha256(random()::text::bytea) );",
    "INSERT INTO users VALUES ( 'NEAL',   sha256(random()::text::bytea) );",
    "INSERT INTO users VALUES ( 'Bj\u00f8rn',  sha256(random()::text::bytea) );",
    "SELECT * FROM users WHERE nick = 'Larry';"
  ],
  "https://www.postgresql.org/docs/15/logical-replication.html": [],
  "https://www.postgresql.org/docs/15/regress-run.html": [],
  "https://www.postgresql.org/docs/15/sql-listen.html": [
    "LISTEN virtual;",
    "NOTIFY virtual;"
  ],
  "https://www.postgresql.org/docs/15/internals.html": [],
  "https://www.postgresql.org/docs/15/sql-revoke.html": [
    "REVOKE INSERT ON films FROM PUBLIC;",
    "REVOKE ALL PRIVILEGES ON kinds FROM manuel;",
    "REVOKE admins FROM joe;"
  ],
  "https://www.postgresql.org/docs/15/sql-dropusermapping.html": [
    "DROP USER MAPPING IF EXISTS FOR bob SERVER foo;"
  ],
  "https://www.postgresql.org/docs/15/functions-uuid.html": [],
  "https://www.postgresql.org/docs/15/sql-dropgroup.html": [],
  "https://www.postgresql.org/docs/15/pgarchivecleanup.html": [],
  "https://www.postgresql.org/docs/15/manage-ag-dropdb.html": [],
  "https://www.postgresql.org/docs/15/sql-alterforeigndatawrapper.html": [
    "ALTER FOREIGN DATA WRAPPER dbi OPTIONS (ADD foo '1', DROP 'bar');",
    "ALTER FOREIGN DATA WRAPPER dbi VALIDATOR bob.myvalidator;"
  ],
  "https://www.postgresql.org/docs/15/sql-load.html": [],
  "https://www.postgresql.org/docs/15/overview.html": [],
  "https://www.postgresql.org/docs/15/infoschema-column-column-usage.html": [],
  "https://www.postgresql.org/docs/15/sql-notify.html": [
    "LISTEN virtual;",
    "NOTIFY virtual;",
    "NOTIFY virtual, 'This is the payload'",
    "LISTEN foo",
    "SELECT pg_notify('fo' || 'o', 'pay' || 'load');"
  ],
  "https://www.postgresql.org/docs/15/wal-internals.html": [],
  "https://www.postgresql.org/docs/15/pltcl-subtransactions.html": [
    "CREATE FUNCTION transfer_funds() RETURNS void AS $$\n    if [catch {\n        spi_exec \"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\"\n        spi_exec \"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\"\n    } errormsg] {\n        set result [format \"error transferring funds: %s\" $errormsg]\n    } else {\n        set result \"funds transferred successfully\"\n    }\n    spi_exec \"INSERT INTO operations (result) VALUES ('[quote $result]')\"\n$$ LANGUAGE pltcl;",
    "CREATE FUNCTION transfer_funds2() RETURNS void AS $$\n    if [catch {\n        subtransaction {\n            spi_exec \"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\"\n            spi_exec \"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\"\n        }\n    } errormsg] {\n        set result [format \"error transferring funds: %s\" $errormsg]\n    } else {\n        set result \"funds transferred successfully\"\n    }\n    spi_exec \"INSERT INTO operations (result) VALUES ('[quote $result]')\"\n$$ LANGUAGE pltcl;"
  ],
  "https://www.postgresql.org/docs/15/release.html": [],
  "https://www.postgresql.org/docs/15/datatype-datetime.html": [
    "TIMESTAMP '2004-10-19 10:23:54'",
    "TIMESTAMP '2004-10-19 10:23:54+02'",
    "TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'",
    "SELECT EXTRACT(hours from '80 minutes'::interval);",
    "SELECT EXTRACT(days from '80 hours'::interval)"
  ],
  "https://www.postgresql.org/docs/15/protocol-overview.html": [],
  "https://www.postgresql.org/docs/15/tutorial-views.html": [
    "CREATE VIEW myview AS\n    SELECT name, temp_lo, temp_hi, prcp, date, location\n        FROM weather, cities\n        WHERE city = name;",
    "SELECT * FROM myview;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-foreign-table.html": [],
  "https://www.postgresql.org/docs/15/typeconv.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-custom.html": [],
  "https://www.postgresql.org/docs/15/xfunc-overload.html": [
    "CREATE FUNCTION test(int, real) RETURNS ...\nCREATE FUNCTION test(smallint, double precision) RETURNS ...",
    "CREATE FUNCTION test(int) RETURNS int\n    AS 'filename', 'test_1arg'\n    LANGUAGE C;",
    "CREATE FUNCTION test(int, int) RETURNS int\n    AS 'filename', 'test_2arg'\n    LANGUAGE C;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-view-table-usage.html": [],
  "https://www.postgresql.org/docs/15/auth-methods.html": [],
  "https://www.postgresql.org/docs/15/pgfreespacemap.html": [],
  "https://www.postgresql.org/docs/15/infoschema-referential-constraints.html": [],
  "https://www.postgresql.org/docs/15/datatype-boolean.html": [
    "CREATE TABLE test1 (a boolean, b text);",
    "INSERT INTO test1 VALUES (TRUE, 'sic est');",
    "INSERT INTO test1 VALUES (FALSE, 'non est');",
    "SELECT * FROM test1;",
    "SELECT * FROM test1 WHERE a"
  ],
  "https://www.postgresql.org/docs/15/storage-file-layout.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-open.html": [
    "EXEC SQL OPEN a;",
    "EXEC SQL OPEN d USING 1, 'test';",
    "EXEC SQL OPEN c1 USING SQL DESCRIPTOR mydesc;",
    "EXEC SQL OPEN :curname1;"
  ],
  "https://www.postgresql.org/docs/15/xml2.html": [
    "SELECT * FROM\nxpath_table('article_id',\n            'article_xml',\n            'articles',\n            '/article/author|/article/pages|/article/title',\n            'date_entered > ''2003-01-01'' ')\nAS t(article_id integer, author text, page_count integer, title text);",
    "SELECT t.title, p.fullname, p.email\nFROM xpath_table('article_id', 'article_xml', 'articles',\n                 '/article/title|/article/author/@id',\n                 'xpath_string(article_xml,''/article/@date'') > ''2003-03-20'' ')\n       AS t(article_id integer, title text, author_id integer),\n     tblPeopleInfo AS p\nWHERE t.author_id = p.person_id;",
    "CREATE TABLE test (\n    id int PRIMARY KEY,\n    xml text\n);",
    "INSERT INTO test VALUES (1, '<doc num=\"C1\">\n<line num=\"L1\"><a>1</a><b>2</b><c>3</c></line>\n<line num=\"L2\"><a>11</a><b>22</b><c>33</c></line>\n</doc>');",
    "INSERT INTO test VALUES (2, '<doc num=\"C2\">\n<line num=\"L1\"><a>111</a><b>222</b><c>333</c></line>\n<line num=\"L2\"><a>111</a><b>222</b><c>333</c></line>\n</doc>');",
    "SELECT * FROM\n  xpath_table('id','xml','test',\n              '/doc/@num|/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',\n              'true')\n  AS t(id int, doc_num varchar(10), line_num varchar(10), val1 int, val2 int, val3 int)\nWHERE id = 1 ORDER BY doc_num, line_num\n\n id | doc_num | line_num | val1 | val2 | val3\n\n1 | C1      | L1       |    1 |    2 |    3\n  1 |         | L2       |   11 |   22 |   33",
    "SELECT t.*,i.doc_num FROM\n  xpath_table('id', 'xml', 'test',\n              '/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',\n              'true')\n    AS t(id int, line_num varchar(10), val1 int, val2 int, val3 int),\n  xpath_table('id', 'xml', 'test', '/doc/@num', 'true')\n    AS i(id int, doc_num varchar(10))\nWHERE i.id=t.id AND i.id=1\nORDER BY doc_num, line_num;"
  ],
  "https://www.postgresql.org/docs/15/features-sql-standard.html": [],
  "https://www.postgresql.org/docs/15/tutorial-update.html": [
    "UPDATE weather\n    SET temp_hi = temp_hi - 2,  temp_lo = temp_lo - 2\n    WHERE date > '1994-11-28';",
    "SELECT * FROM weather;"
  ],
  "https://www.postgresql.org/docs/15/libpq-build.html": [
    "CPPFLAGS += -I/usr/local/pgsql/include"
  ],
  "https://www.postgresql.org/docs/15/contrib-dblink-build-sql-update.html": [],
  "https://www.postgresql.org/docs/15/sql-createtable.html": [
    "CREATE TABLE films (\n    code        char(5) CONSTRAINT firstkey PRIMARY KEY,\n    title       varchar(40) NOT NULL,\n    did         integer NOT NULL,\n    date_prod   date,\n    kind        varchar(10),\n    len         interval hour to minute\n);",
    "CREATE TABLE distributors (\n     did    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n     name   varchar(40) NOT NULL CHECK (name <> '')\n);",
    "CREATE TABLE array_int (\n    vector  int[][]\n);",
    "CREATE TABLE films (\n    code        char(5),\n    title       varchar(40),\n    did         integer,\n    date_prod   date,\n    kind        varchar(10),\n    len         interval hour to minute,\n    CONSTRAINT production UNIQUE(date_prod)\n);",
    "CREATE TABLE distributors (\n    did     integer CHECK (did > 100),\n    name    varchar(40)\n);",
    "CREATE TABLE distributors (\n    did     integer,\n    name    varchar(40),\n    CONSTRAINT con1 CHECK (did > 100 AND name <> '')\n);",
    "CREATE TABLE films (\n    code        char(5),\n    title       varchar(40),\n    did         integer,\n    date_prod   date,\n    kind        varchar(10),\n    len         interval hour to minute,\n    CONSTRAINT code_title PRIMARY KEY(code,title)\n);",
    "CREATE TABLE distributors (\n    did     integer,\n    name    varchar(40),\n    PRIMARY KEY(did)\n);",
    "CREATE TABLE distributors (\n    did     integer PRIMARY KEY,\n    name    varchar(40)\n);",
    "CREATE TABLE distributors (\n    name      varchar(40) DEFAULT 'Luso Films',\n    did       integer DEFAULT nextval('distributors_serial'),\n    modtime   timestamp DEFAULT current_timestamp\n);",
    "CREATE TABLE distributors (\n    did     integer CONSTRAINT no_null NOT NULL,\n    name    varchar(40) NOT NULL\n);",
    "CREATE TABLE distributors (\n    did     integer,\n    name    varchar(40) UNIQUE\n);",
    "CREATE TABLE distributors (\n    did     integer,\n    name    varchar(40),\n    UNIQUE(name)\n);",
    "CREATE TABLE distributors (\n    did     integer,\n    name    varchar(40),\n    UNIQUE(name) WITH (fillfactor=70)\n)\nWITH (fillfactor=70);",
    "CREATE TABLE circles (\n    c circle,\n    EXCLUDE USING gist (c WITH &&)\n);",
    "CREATE TABLE cinemas (\n        id serial,\n        name text,\n        location text\n) TABLESPACE diskvol1;",
    "CREATE TYPE employee_type AS (name text, salary numeric);",
    "CREATE TABLE employees OF employee_type (\n    PRIMARY KEY (name),\n    salary WITH OPTIONS DEFAULT 1000\n);",
    "CREATE TABLE measurement (\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n) PARTITION BY RANGE (logdate);",
    "CREATE TABLE measurement_year_month (\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n) PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate));",
    "CREATE TABLE cities (\n    city_id      bigserial not null,\n    name         text not null,\n    population   bigint\n) PARTITION BY LIST (left(lower(name), 1));",
    "CREATE TABLE orders (\n    order_id     bigint not null,\n    cust_id      bigint not null,\n    status       text\n) PARTITION BY HASH (order_id);",
    "CREATE TABLE measurement_y2016m07\n    PARTITION OF measurement (\n    unitsales DEFAULT 0\n) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');",
    "CREATE TABLE measurement_ym_older\n    PARTITION OF measurement_year_month\n    FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11);",
    "CREATE TABLE measurement_ym_y2016m11\n    PARTITION OF measurement_year_month\n    FOR VALUES FROM (2016, 11) TO (2016, 12);",
    "CREATE TABLE measurement_ym_y2016m12\n    PARTITION OF measurement_year_month\n    FOR VALUES FROM (2016, 12) TO (2017, 01);",
    "CREATE TABLE measurement_ym_y2017m01\n    PARTITION OF measurement_year_month\n    FOR VALUES FROM (2017, 01) TO (2017, 02);",
    "CREATE TABLE cities_ab\n    PARTITION OF cities (\n    CONSTRAINT city_id_nonzero CHECK (city_id != 0)\n) FOR VALUES IN ('a', 'b');",
    "CREATE TABLE cities_ab\n    PARTITION OF cities (\n    CONSTRAINT city_id_nonzero CHECK (city_id != 0)\n) FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population);",
    "CREATE TABLE cities_ab_10000_to_100000\n    PARTITION OF cities_ab FOR VALUES FROM (10000) TO (100000);",
    "CREATE TABLE orders_p1 PARTITION OF orders\n    FOR VALUES WITH (MODULUS 4, REMAINDER 0);",
    "CREATE TABLE orders_p2 PARTITION OF orders\n    FOR VALUES WITH (MODULUS 4, REMAINDER 1);",
    "CREATE TABLE orders_p3 PARTITION OF orders\n    FOR VALUES WITH (MODULUS 4, REMAINDER 2);",
    "CREATE TABLE orders_p4 PARTITION OF orders\n    FOR VALUES WITH (MODULUS 4, REMAINDER 3);",
    "CREATE TABLE cities_partdef\n    PARTITION OF cities DEFAULT;"
  ],
  "https://www.postgresql.org/docs/15/wal-async-commit.html": [],
  "https://www.postgresql.org/docs/15/queries-values.html": [
    "VALUES (1, 'one'), (2, 'two'), (3, 'three');",
    "SELECT 1 AS column1, 'one' AS column2\nUNION ALL\nSELECT 2, 'two'\nUNION ALL\nSELECT 3, 'three';",
    "SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (3, 'three')) AS t (num,letter);"
  ],
  "https://www.postgresql.org/docs/15/infoschema-check-constraints.html": [],
  "https://www.postgresql.org/docs/15/ecpg-pgtypes.html": [
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL SELECT started, duration INTO :ts1, :iv1 FROM datetbl WHERE d=:date1;"
  ],
  "https://www.postgresql.org/docs/15/sql-createconversion.html": [
    "CREATE CONVERSION myconv FOR 'UTF8' TO 'LATIN1' FROM myfunc;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-tables.html": [],
  "https://www.postgresql.org/docs/15/xplang.html": [],
  "https://www.postgresql.org/docs/15/ddl-default.html": [
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric DEFAULT 9.99\n);",
    "CREATE TABLE products (\n    product_no integer DEFAULT nextval('products_product_no_seq'),\n    ...\n);",
    "CREATE TABLE products (\n    product_no SERIAL,\n    ...\n);"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-modifytuple.html": [],
  "https://www.postgresql.org/docs/15/hot-standby.html": [],
  "https://www.postgresql.org/docs/15/sql-createtsdictionary.html": [
    "CREATE TEXT SEARCH DICTIONARY my_russian (\n    template = snowball,\n    language = russian,\n    stopwords = myrussian\n);"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-type.html": [],
  "https://www.postgresql.org/docs/15/basebackup-to-shell.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-subscription-rel.html": [],
  "https://www.postgresql.org/docs/15/system-catalog-initial-data.html": [],
  "https://www.postgresql.org/docs/15/archive-modules.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-statements.html": [
    "CREATE TABLE mytable (id int primary key, data text);",
    "INSERT INTO mytable VALUES (1,'one'), (2,'two');",
    "PERFORM create_mv('cs_session_page_requests_mv', my_query);",
    "SELECT * INTO myrec FROM emp WHERE empname = myname;",
    "IF NOT FOUND THEN\n    RAISE EXCEPTION 'employee % not found', myname",
    "END IF;",
    "BEGIN\n    SELECT * INTO STRICT myrec FROM emp WHERE empname = myname;",
    "EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            RAISE EXCEPTION 'employee % not found', myname",
    "WHEN TOO_MANY_ROWS THEN\n            RAISE EXCEPTION 'employee % not unique', myname",
    "END;",
    "CREATE FUNCTION get_userid(username text) RETURNS int\nAS $$\n#print_strict_params on\nDECLARE\nuserid int;\nBEGIN\n    SELECT users.userid INTO STRICT userid\n        FROM users WHERE users.username = get_userid.username;\n    RETURN userid;\nEND;\n$$ LANGUAGE plpgsql;",
    "EXECUTE 'SELECT count(*) FROM mytable WHERE inserted_by = $1 AND inserted <= $2'\n   INTO c\n   USING checked_user, checked_date",
    "EXECUTE 'SELECT count(*) FROM '\n    || quote_ident(tabname)\n    || ' WHERE inserted_by = $1 AND inserted <= $2'\n   INTO c\n   USING checked_user, checked_date",
    "EXECUTE format('SELECT count(*) FROM %I '\n   'WHERE inserted_by = $1 AND inserted <= $2', tabname)\n   INTO c\n   USING checked_user, checked_date",
    "EXECUTE format('UPDATE tbl SET %I = $1 '\n   'WHERE key = $2', colname) USING newvalue, keyvalue",
    "EXECUTE 'UPDATE tbl SET '\n        || quote_ident(colname)\n        || ' = '\n        || quote_literal(newvalue)\n        || ' WHERE key = '\n        || quote_literal(keyvalue)",
    "EXECUTE 'UPDATE tbl SET '\n        || quote_ident(colname)\n        || ' = '\n        || quote_nullable(newvalue)\n        || ' WHERE key = '\n        || quote_nullable(keyvalue)",
    "EXECUTE 'UPDATE tbl SET '\n        || quote_ident(colname)\n        || ' = $$'\n        || newvalue\n        || '$$ WHERE key = '\n        || quote_literal(keyvalue)",
    "EXECUTE format('UPDATE tbl SET %I = %L '\n   'WHERE key = %L', colname, newvalue, keyvalue)",
    "EXECUTE format('UPDATE tbl SET %I = $1 WHERE key = $2', colname)\n   USING newvalue, keyvalue",
    "GET DIAGNOSTICS integer_var = ROW_COUNT;",
    "BEGIN\n    y := x / 0;",
    "EXCEPTION\n    WHEN division_by_zero THEN\n        NULL",
    "END;",
    "BEGIN\n    y := x / 0;",
    "EXCEPTION\n    WHEN division_by_zero THEN\nEND"
  ],
  "https://www.postgresql.org/docs/15/bookindex.html": [],
  "https://www.postgresql.org/docs/15/app-pgreceivexlog.html": [],
  "https://www.postgresql.org/docs/15/tablesample-support-functions.html": [],
  "https://www.postgresql.org/docs/15/ddl-inherit.html": [
    "CREATE TABLE cities (\n    name            text,\n    population      float,\n    elevation       int\n);",
    "CREATE TABLE capitals (\n    state           char(2)\n) INHERITS (cities);",
    "SELECT name, elevation\n    FROM cities\n    WHERE elevation > 500;",
    "SELECT name, elevation\n    FROM ONLY cities\n    WHERE elevation > 500;",
    "SELECT name, elevation\n    FROM cities*\n    WHERE elevation > 500;",
    "SELECT c.tableoid, c.name, c.elevation\nFROM cities c\nWHERE c.elevation > 500;",
    "SELECT p.relname, c.name, c.elevation\nFROM cities c, pg_class p\nWHERE c.elevation > 500 AND c.tableoid = p.oid;",
    "SELECT c.tableoid::regclass, c.name, c.elevation\nFROM cities c\nWHERE c.elevation > 500;",
    "INSERT INTO cities (name, population, elevation, state)\nVALUES ('Albany', NULL, NULL, 'NY');"
  ],
  "https://www.postgresql.org/docs/15/xindex.html": [
    "CREATE FUNCTION complex_abs_lt(complex, complex) RETURNS bool\n    AS 'filename', 'complex_abs_lt'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE OPERATOR < (\n   leftarg = complex, rightarg = complex, procedure = complex_abs_lt,\n   commutator = > , negator = >= ,\n   restrict = scalarltsel, join = scalarltjoinsel\n);",
    "CREATE FUNCTION complex_abs_cmp(complex, complex)\n    RETURNS integer\n    AS 'filename'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE OPERATOR CLASS complex_abs_ops\n    DEFAULT FOR TYPE complex USING btree AS\n        OPERATOR        1       < ,\n        OPERATOR        2       <= ,\n        OPERATOR        3       = ,\n        OPERATOR        4       >= ,\n        OPERATOR        5       > ,\n        FUNCTION        1       complex_abs_cmp(complex, complex);",
    "OPERATOR        1       < (complex, complex) ,",
    "CREATE OPERATOR FAMILY integer_ops USING btree;",
    "CREATE OPERATOR CLASS int8_ops\nDEFAULT FOR TYPE int8 USING btree FAMILY integer_ops AS\n\nOPERATOR 1 < ,\n  OPERATOR 2 <= ,\n  OPERATOR 3 = ,\n  OPERATOR 4 >= ,\n  OPERATOR 5 > ,\n  FUNCTION 1 btint8cmp(int8, int8) ,\n  FUNCTION 2 btint8sortsupport(internal) ,\n  FUNCTION 3 in_range(int8, int8, int8, boolean, boolean) ,\n  FUNCTION 4 btequalimage(oid) ;",
    "CREATE OPERATOR CLASS int4_ops\nDEFAULT FOR TYPE int4 USING btree FAMILY integer_ops AS\n\nOPERATOR 1 < ,\n  OPERATOR 2 <= ,\n  OPERATOR 3 = ,\n  OPERATOR 4 >= ,\n  OPERATOR 5 > ,\n  FUNCTION 1 btint4cmp(int4, int4) ,\n  FUNCTION 2 btint4sortsupport(internal) ,\n  FUNCTION 3 in_range(int4, int4, int4, boolean, boolean) ,\n  FUNCTION 4 btequalimage(oid) ;",
    "CREATE OPERATOR CLASS int2_ops\nDEFAULT FOR TYPE int2 USING btree FAMILY integer_ops AS\n\nOPERATOR 1 < ,\n  OPERATOR 2 <= ,\n  OPERATOR 3 = ,\n  OPERATOR 4 >= ,\n  OPERATOR 5 > ,\n  FUNCTION 1 btint2cmp(int2, int2) ,\n  FUNCTION 2 btint2sortsupport(internal) ,\n  FUNCTION 3 in_range(int2, int2, int2, boolean, boolean) ,\n  FUNCTION 4 btequalimage(oid) ;",
    "ALTER OPERATOR FAMILY integer_ops USING btree ADD\n\nOPERATOR 1 < (int8, int2) ,\n  OPERATOR 2 <= (int8, int2) ,\n  OPERATOR 3 = (int8, int2) ,\n  OPERATOR 4 >= (int8, int2) ,\n  OPERATOR 5 > (int8, int2) ,\n  FUNCTION 1 btint82cmp(int8, int2) ,\n\n\nOPERATOR 1 < (int8, int4) ,\n  OPERATOR 2 <= (int8, int4) ,\n  OPERATOR 3 = (int8, int4) ,\n  OPERATOR 4 >= (int8, int4) ,\n  OPERATOR 5 > (int8, int4) ,\n  FUNCTION 1 btint84cmp(int8, int4) ,\n\n\nOPERATOR 1 < (int4, int2) ,\n  OPERATOR 2 <= (int4, int2) ,\n  OPERATOR 3 = (int4, int2) ,\n  OPERATOR 4 >= (int4, int2) ,\n  OPERATOR 5 > (int4, int2) ,\n  FUNCTION 1 btint42cmp(int4, int2) ,\n\n\nOPERATOR 1 < (int4, int8) ,\n  OPERATOR 2 <= (int4, int8) ,\n  OPERATOR 3 = (int4, int8) ,\n  OPERATOR 4 >= (int4, int8) ,\n  OPERATOR 5 > (int4, int8) ,\n  FUNCTION 1 btint48cmp(int4, int8) ,\n\n\nOPERATOR 1 < (int2, int8) ,\n  OPERATOR 2 <= (int2, int8) ,\n  OPERATOR 3 = (int2, int8) ,\n  OPERATOR 4 >= (int2, int8) ,\n  OPERATOR 5 > (int2, int8) ,\n  FUNCTION 1 btint28cmp(int2, int8) ,\n\n\nOPERATOR 1 < (int2, int4) ,\n  OPERATOR 2 <= (int2, int4) ,\n  OPERATOR 3 = (int2, int4) ,\n  OPERATOR 4 >= (int2, int4) ,\n  OPERATOR 5 > (int2, int4) ,\n  FUNCTION 1 btint24cmp(int2, int4) ,\n\n\nFUNCTION 3 in_range(int4, int4, int8, boolean, boolean) ,\n  FUNCTION 3 in_range(int4, int4, int2, boolean, boolean) ,\n  FUNCTION 3 in_range(int2, int2, int8, boolean, boolean) ,\n  FUNCTION 3 in_range(int2, int2, int4, boolean, boolean) ;",
    "SELECT * FROM mytable ORDER BY somecol USING ~<~;",
    "SELECT sum(x) OVER (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING)\n  FROM mytable;",
    "SELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;",
    "OPERATOR 15    <-> (point, point) FOR ORDER BY float_ops",
    "SELECT * FROM table WHERE integer_column < 4;",
    "CREATE OPERATOR CLASS polygon_ops\n    DEFAULT FOR TYPE polygon USING gist AS\n        ...\n        STORAGE box;"
  ],
  "https://www.postgresql.org/docs/15/manage-ag-createdb.html": [
    "CREATE DATABASE dbname OWNER rolename;"
  ],
  "https://www.postgresql.org/docs/15/sql-alterdatabase.html": [
    "ALTER DATABASE test SET enable_indexscan TO off;"
  ],
  "https://www.postgresql.org/docs/15/sql-dropprocedure.html": [
    "DROP PROCEDURE do_db_maintenance;",
    "CREATE PROCEDURE do_db_maintenance(IN target_schema text, OUT results text) ...",
    "DROP PROCEDURE do_db_maintenance(IN target_schema text, OUT results text);",
    "DROP PROCEDURE do_db_maintenance(IN text, OUT text);",
    "DROP PROCEDURE do_db_maintenance(IN text);",
    "DROP PROCEDURE do_db_maintenance(text);",
    "DROP PROCEDURE do_db_maintenance(text, text);",
    "CREATE PROCEDURE do_db_maintenance(IN target_schema text, IN options text) ..."
  ],
  "https://www.postgresql.org/docs/15/trigger-definition.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-exec.html": [],
  "https://www.postgresql.org/docs/15/plperl-funcs.html": [
    "CREATE FUNCTION funcname (argument-types)\nRETURNS return-type\nAS $$\n    # PL/Perl function body goes here\n$$ LANGUAGE plperl;",
    "DO $$\n    # PL/Perl code\n$$ LANGUAGE plperl",
    "CREATE FUNCTION perl_max (integer, integer) RETURNS integer AS $$\n    if ($_[0] > $_[1]) { return $_[0]; }\n    return $_[1];\n$$ LANGUAGE plperl;",
    "CREATE FUNCTION perl_max (integer, integer) RETURNS integer AS $$\n    my ($x, $y) = @_;\n    if (not defined $x) {\n        return undef if not defined $y;\n        return $y;\n    }\n    return $x if not defined $y;\n    return $x if $x > $y;\n    return $y;\n$$ LANGUAGE plperl;",
    "CREATE EXTENSION bool_plperl;",
    "CREATE FUNCTION perl_and(bool, bool) RETURNS bool\nTRANSFORM FOR TYPE bool\nAS $$\n  my ($a, $b) = @_;\n  return $a && $b;\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE function returns_array()\nRETURNS text[][] AS $$\n    return [['a\"b','c,d'],['e\\\\f','g']];\n$$ LANGUAGE plperl;",
    "select returns_array();",
    "CREATE OR REPLACE FUNCTION concat_array_elements(text[]) RETURNS TEXT AS $$\n    my $arg = shift;\n    my $result = \"\";\n    return undef if (!defined $arg);\n\n    # as an array reference\n    for (@$arg) {\n        $result .= $_;\n    }\n\n    # also works as a string\n    $result .= $arg;\n\n    return $result;\n$$ LANGUAGE plperl;",
    "SELECT concat_array_elements(ARRAY['PL','/','Perl']);",
    "CREATE TABLE employee (\n    name text,\n    basesalary integer,\n    bonus integer\n);",
    "CREATE FUNCTION empcomp(employee) RETURNS integer AS $$\n    my ($emp) = @_;\n    return $emp->{basesalary} + $emp->{bonus};\n$$ LANGUAGE plperl;",
    "SELECT name, empcomp(employee.*) FROM employee;",
    "CREATE TYPE testrowperl AS (f1 integer, f2 text, f3 text);",
    "CREATE OR REPLACE FUNCTION perl_row() RETURNS testrowperl AS $$\n    return {f2 => 'hello', f1 => 1, f3 => 'world'};\n$$ LANGUAGE plperl;",
    "SELECT * FROM perl_row();",
    "CREATE PROCEDURE perl_triple(INOUT a integer, INOUT b integer) AS $$\n    my ($a, $b) = @_;\n    return {a => $a * 3, b => $b * 3};\n$$ LANGUAGE plperl;",
    "CALL perl_triple(5, 10);",
    "CREATE OR REPLACE FUNCTION perl_set_int(int)\nRETURNS SETOF INTEGER AS $$\n    foreach (0..$_[0]) {\n        return_next($_);\n    }\n    return undef;\n$$ LANGUAGE plperl;",
    "SELECT * FROM perl_set_int(5);",
    "CREATE OR REPLACE FUNCTION perl_set()\nRETURNS SETOF testrowperl AS $$\n    return_next({ f1 => 1, f2 => 'Hello', f3 => 'World' });\n    return_next({ f1 => 2, f2 => 'Hello', f3 => 'PostgreSQL' });\n    return_next({ f1 => 3, f2 => 'Hello', f3 => 'PL/Perl' });\n    return undef;\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE FUNCTION perl_set_int(int) RETURNS SETOF INTEGER AS $$\n    return [0..$_[0]];\n$$ LANGUAGE plperl;",
    "SELECT * FROM perl_set_int(5);",
    "CREATE OR REPLACE FUNCTION perl_set() RETURNS SETOF testrowperl AS $$\n    return [\n        { f1 => 1, f2 => 'Hello', f3 => 'World' },\n        { f1 => 2, f2 => 'Hello', f3 => 'PostgreSQL' },\n        { f1 => 3, f2 => 'Hello', f3 => 'PL/Perl' }\n    ];\n$$ LANGUAGE plperl;",
    "SELECT * FROM perl_set();"
  ],
  "https://www.postgresql.org/docs/15/sql-droppublication.html": [
    "DROP PUBLICATION mypublication;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-extension.html": [],
  "https://www.postgresql.org/docs/15/functions-aggregate.html": [
    "SELECT b1 = ANY((SELECT b2 FROM t2 ...)) FROM t1 ...;",
    "SELECT count(*) FROM sometable;"
  ],
  "https://www.postgresql.org/docs/15/sql-altertsdictionary.html": [
    "ALTER TEXT SEARCH DICTIONARY my_dict ( StopWords = newrussian );",
    "ALTER TEXT SEARCH DICTIONARY my_dict ( language = dutch, StopWords );",
    "ALTER TEXT SEARCH DICTIONARY my_dict ( dummy );"
  ],
  "https://www.postgresql.org/docs/15/view-pg-backend-memory-contexts.html": [],
  "https://www.postgresql.org/docs/15/sql-expressions.html": [
    "CREATE FUNCTION dept(text) RETURNS dept\n    AS $$ SELECT * FROM dept WHERE name = $1 $$\n    LANGUAGE SQL;",
    "SELECT array_agg(a ORDER BY b DESC) FROM table;",
    "SELECT string_agg(a, ',' ORDER BY a) FROM table;",
    "SELECT string_agg(a ORDER BY a, ',') FROM table;",
    "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY income) FROM households;",
    "SELECT\n    count(*) AS unfiltered,\n    count(*) FILTER (WHERE i < 5) AS filtered\nFROM generate_series(1,10) AS s(i);",
    "SELECT a, b, c FROM tbl WHERE ... ORDER BY a COLLATE \"C\";",
    "SELECT * FROM tbl WHERE a > 'foo' COLLATE \"C\";",
    "SELECT * FROM tbl WHERE a COLLATE \"C\" > 'foo';",
    "SELECT * FROM tbl WHERE (a > 'foo') COLLATE \"C\";",
    "SELECT name, (SELECT max(pop) FROM cities WHERE cities.state = states.name)\n    FROM states;",
    "SELECT ARRAY[1,2,3+4];",
    "SELECT ARRAY[1,2,22.7]::integer[];",
    "SELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];",
    "SELECT ARRAY[[1,2],[3,4]]",
    "CREATE TABLE arr(f1 int[], f2 int[]);",
    "INSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], ARRAY[[5,6],[7,8]]);",
    "SELECT ARRAY[f1, f2, '{{9,10},{11,12}}'::int[]] FROM arr;",
    "SELECT ARRAY[]::integer[];",
    "SELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');",
    "SELECT ARRAY(SELECT ARRAY[i, i*2] FROM generate_series(1,5) AS a(i))",
    "SELECT ROW(1,2.5,'this is a test');",
    "SELECT ROW(t.*, 42) FROM t;",
    "SELECT ROW(t.f1, t.f2, 42) FROM t;",
    "CREATE TABLE mytable(f1 int, f2 float, f3 text);",
    "CREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;",
    "SELECT getf1(ROW(1,2.5,'this is a test'));",
    "CREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric)",
    "CREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;",
    "SELECT getf1(ROW(1,2.5,'this is a test'));",
    "SELECT getf1(ROW(1,2.5,'this is a test')::mytable)",
    "SELECT getf1(CAST(ROW(11,'this is a test',2.5) AS myrowtype))",
    "SELECT ROW(1,2.5,'this is a test') = ROW(1, 3, 'not the same');",
    "SELECT ROW(table.*) IS NULL FROM table;",
    "SELECT true OR somefunc();",
    "SELECT somefunc() OR true;",
    "SELECT ... WHERE x > 0 AND y/x > 1.5;",
    "SELECT ... WHERE CASE WHEN x > 0 THEN y/x > 1.5 ELSE false END;",
    "SELECT CASE WHEN x > 0 THEN x ELSE 1/0 END FROM tab;",
    "SELECT CASE WHEN min(employees) > 0\n            THEN avg(expenses / employees)\n       END\n    FROM departments;"
  ],
  "https://www.postgresql.org/docs/15/catalogs-overview.html": [],
  "https://www.postgresql.org/docs/15/functions-array.html": [],
  "https://www.postgresql.org/docs/15/tutorial-table.html": [
    "CREATE TABLE weather (\n    city            varchar(80),\n    temp_lo         int,\ntemp_hi         int,\nprcp            real,\ndate            date\n);",
    "CREATE TABLE cities (\n    name            varchar(80),\n    location        point\n);"
  ],
  "https://www.postgresql.org/docs/15/perm-functions.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-developer.html": [],
  "https://www.postgresql.org/docs/15/auth-delay.html": [],
  "https://www.postgresql.org/docs/15/sql-alteropfamily.html": [
    "ALTER OPERATOR FAMILY integer_ops USING btree ADD\n\n\nOPERATOR 1 < (int4, int2) ,\n  OPERATOR 2 <= (int4, int2) ,\n  OPERATOR 3 = (int4, int2) ,\n  OPERATOR 4 >= (int4, int2) ,\n  OPERATOR 5 > (int4, int2) ,\n  FUNCTION 1 btint42cmp(int4, int2) ,\n\n\nOPERATOR 1 < (int2, int4) ,\n  OPERATOR 2 <= (int2, int4) ,\n  OPERATOR 3 = (int2, int4) ,\n  OPERATOR 4 >= (int2, int4) ,\n  OPERATOR 5 > (int2, int4) ,\n  FUNCTION 1 btint24cmp(int2, int4) ;",
    "ALTER OPERATOR FAMILY integer_ops USING btree DROP\n\n\nOPERATOR 1 (int4, int2) ,\n  OPERATOR 2 (int4, int2) ,\n  OPERATOR 3 (int4, int2) ,\n  OPERATOR 4 (int4, int2) ,\n  OPERATOR 5 (int4, int2) ,\n  FUNCTION 1 (int4, int2) ,\n\n\nOPERATOR 1 (int2, int4) ,\n  OPERATOR 2 (int2, int4) ,\n  OPERATOR 3 (int2, int4) ,\n  OPERATOR 4 (int2, int4) ,\n  OPERATOR 5 (int2, int4) ,\n  FUNCTION 1 (int2, int4) ;"
  ],
  "https://www.postgresql.org/docs/15/backup-manifest-wal-ranges.html": [],
  "https://www.postgresql.org/docs/15/runtime-config.html": [],
  "https://www.postgresql.org/docs/15/sql-createtype.html": [
    "CREATE TYPE compfoo AS (f1 int, f2 text);",
    "CREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$\n    SELECT fooid, fooname FROM foo\n$$ LANGUAGE SQL;",
    "CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed');",
    "CREATE TABLE bug (\n    id serial,\n    description text,\n    status bug_status\n);",
    "CREATE TYPE float8_range AS RANGE (subtype = float8, subtype_diff = float8mi);",
    "CREATE TYPE box;",
    "CREATE FUNCTION my_box_in_function(cstring) RETURNS box AS ... ;",
    "CREATE FUNCTION my_box_out_function(box) RETURNS cstring AS ... ;",
    "CREATE TYPE box (\n    INTERNALLENGTH = 16,\n    INPUT = my_box_in_function,\n    OUTPUT = my_box_out_function\n);",
    "CREATE TABLE myboxes (\n    id integer,\n    description box\n);",
    "CREATE TYPE box (\n    INTERNALLENGTH = 16,\n    INPUT = my_box_in_function,\n    OUTPUT = my_box_out_function,\n    ELEMENT = float4\n);",
    "CREATE TYPE bigobj (\n    INPUT = lo_filein, OUTPUT = lo_fileout,\n    INTERNALLENGTH = VARIABLE\n);",
    "CREATE TABLE big_objs (\n    id integer,\n    obj bigobj\n);"
  ],
  "https://www.postgresql.org/docs/15/sql-dropfunction.html": [
    "DROP FUNCTION sqrt(integer);",
    "DROP FUNCTION sqrt(integer), sqrt(bigint);",
    "DROP FUNCTION update_employee_salaries;",
    "DROP FUNCTION update_employee_salaries();"
  ],
  "https://www.postgresql.org/docs/15/pgupgrade.html": [
    "NET STOP postgresql-9.6\nNET STOP postgresql-15",
    "RUNAS /USER:postgres \"CMD.EXE\"\nSET PATH=%PATH%"
  ],
  "https://www.postgresql.org/docs/15/docguide.html": [],
  "https://www.postgresql.org/docs/15/infoschema-column-options.html": [],
  "https://www.postgresql.org/docs/15/libpq-fastpath.html": [],
  "https://www.postgresql.org/docs/15/index-functions.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-overview.html": [],
  "https://www.postgresql.org/docs/15/sql-altereventtrigger.html": [],
  "https://www.postgresql.org/docs/15/tutorial-arch.html": [],
  "https://www.postgresql.org/docs/15/rules-status.html": [],
  "https://www.postgresql.org/docs/15/plpython-trigger.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-compatible.html": [],
  "https://www.postgresql.org/docs/15/sql-createeventtrigger.html": [
    "CREATE OR REPLACE FUNCTION abort_any_command()\n  RETURNS event_trigger\n LANGUAGE plpgsql\n  AS $$\nBEGIN\n  RAISE EXCEPTION 'command % is disabled', tg_tag;\nEND;\n$$;",
    "CREATE EVENT TRIGGER abort_ddl ON ddl_command_start\n   EXECUTE FUNCTION abort_any_command();"
  ],
  "https://www.postgresql.org/docs/15/role-membership.html": [
    "CREATE ROLE joe LOGIN INHERIT;",
    "CREATE ROLE admin NOINHERIT;",
    "CREATE ROLE wheel NOINHERIT;",
    "GRANT admin TO joe;",
    "GRANT wheel TO admin;",
    "SET ROLE admin;",
    "SET ROLE wheel;",
    "SET ROLE joe;",
    "SET ROLE NONE;",
    "RESET ROLE;"
  ],
  "https://www.postgresql.org/docs/15/locale.html": [],
  "https://www.postgresql.org/docs/15/backup-dump.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-shdepend.html": [],
  "https://www.postgresql.org/docs/15/dblink.html": [],
  "https://www.postgresql.org/docs/15/test-decoding.html": [
    "SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'include-xids', '0');"
  ],
  "https://www.postgresql.org/docs/15/plpgsql-errors-and-messages.html": [
    "RAISE NOTICE 'Calling cs_create_job(%)', v_job_id;",
    "RAISE EXCEPTION 'Nonexistent ID --> %', user_id\n      USING HINT = 'Please check your user ID'",
    "RAISE 'Duplicate user ID: %', user_id USING ERRCODE = 'unique_violation';",
    "RAISE 'Duplicate user ID: %', user_id USING ERRCODE = '23505';",
    "RAISE division_by_zero;",
    "RAISE SQLSTATE '22012';",
    "RAISE unique_violation USING MESSAGE = 'Duplicate user ID: ' || user_id;"
  ],
  "https://www.postgresql.org/docs/15/explicit-joins.html": [
    "SELECT * FROM a, b, c WHERE a.id = b.id AND b.ref = c.id;",
    "SELECT * FROM a LEFT JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);",
    "SELECT * FROM a LEFT JOIN b ON (a.bid = b.id) LEFT JOIN c ON (a.cid = c.id);",
    "SELECT * FROM a, b, c WHERE a.id = b.id AND b.ref = c.id;",
    "SELECT * FROM a CROSS JOIN b CROSS JOIN c WHERE a.id = b.id AND b.ref = c.id;",
    "SELECT * FROM a JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);",
    "SELECT * FROM a CROSS JOIN b, c, d, e WHERE ...;",
    "SELECT *\nFROM x, y,\n    (SELECT * FROM a, b, c WHERE something) AS ss\nWHERE somethingelse;",
    "SELECT * FROM x, y, a, b, c WHERE something AND somethingelse;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-database.html": [],
  "https://www.postgresql.org/docs/15/bgworker.html": [],
  "https://www.postgresql.org/docs/15/indexes-index-only-scans.html": [
    "SELECT x, y FROM tab WHERE x = 'key';",
    "SELECT x FROM tab WHERE x = 'key' AND y < 42;",
    "SELECT x, z FROM tab WHERE x = 'key';",
    "SELECT x FROM tab WHERE x = 'key' AND z < 42;",
    "SELECT y FROM tab WHERE x = 'key';",
    "CREATE INDEX tab_x_y ON tab(x) INCLUDE (y);",
    "CREATE UNIQUE INDEX tab_x_y ON tab(x) INCLUDE (y);",
    "CREATE INDEX tab_x_y ON tab(x, y);",
    "SELECT f(x) FROM tab WHERE f(x) < 1;",
    "CREATE INDEX tab_f_x ON tab (f(x)) INCLUDE (x);",
    "CREATE UNIQUE INDEX tests_success_constraint ON tests (subject, target)\n    WHERE success;",
    "SELECT target FROM tests WHERE subject = 'some-subject' AND success;"
  ],
  "https://www.postgresql.org/docs/15/sql-savepoint.html": [
    "BEGIN;",
    "INSERT INTO table1 VALUES (1);",
    "SAVEPOINT my_savepoint;",
    "INSERT INTO table1 VALUES (2);",
    "ROLLBACK TO SAVEPOINT my_savepoint;",
    "INSERT INTO table1 VALUES (3);",
    "COMMIT;",
    "BEGIN;",
    "INSERT INTO table1 VALUES (3);",
    "SAVEPOINT my_savepoint;",
    "INSERT INTO table1 VALUES (4);",
    "RELEASE SAVEPOINT my_savepoint;",
    "COMMIT;",
    "BEGIN;",
    "INSERT INTO table1 VALUES (1);",
    "SAVEPOINT my_savepoint;",
    "INSERT INTO table1 VALUES (2);",
    "SAVEPOINT my_savepoint;",
    "INSERT INTO table1 VALUES (3);",
    "ROLLBACK TO SAVEPOINT my_savepoint;",
    "SELECT * FROM table1;",
    "RELEASE SAVEPOINT my_savepoint;",
    "ROLLBACK TO SAVEPOINT my_savepoint;",
    "SELECT * FROM table1;",
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/plpgsql-control-structures.html": [
    "RETURN 1 + 2;",
    "RETURN scalar_var;",
    "RETURN composite_type_var;",
    "RETURN (1, 2, 'three'::text);",
    "CREATE TABLE foo (fooid INT, foosubid INT, fooname TEXT);",
    "INSERT INTO foo VALUES (1, 2, 'three');",
    "INSERT INTO foo VALUES (4, 5, 'six');",
    "CREATE OR REPLACE FUNCTION get_all_foo() RETURNS SETOF foo AS\n$BODY$\nDECLARE\n    r foo%rowtype;\nBEGIN\n    FOR r IN\n        SELECT * FROM foo WHERE fooid > 0\n    LOOP\n        -- can do some processing here\n        RETURN NEXT r; -- return current row of SELECT\n    END LOOP;\n    RETURN;\nEND;\n$BODY$\nLANGUAGE plpgsql;",
    "SELECT * FROM get_all_foo();",
    "CREATE FUNCTION get_available_flightid(date) RETURNS SETOF integer AS\n$BODY$\nBEGIN\n    RETURN QUERY SELECT flightid\n                   FROM flight\n                  WHERE flightdate >= $1\n                    AND flightdate < ($1 + 1);\n\n    -- Since execution is not finished, we can check whether rows were returned\n    -- and raise exception if not.\n    IF NOT FOUND THEN\n        RAISE EXCEPTION 'No flight at %.', $1;\n    END IF;\n\n    RETURN;\n END;\n$BODY$\nLANGUAGE plpgsql;",
    "SELECT * FROM get_available_flightid(CURRENT_DATE);",
    "CREATE PROCEDURE triple(INOUT x int)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    x := x * 3;\nEND;\n$$;",
    "DO $$\nDECLARE myvar int := 5",
    "BEGIN\n  CALL triple(myvar)",
    "RAISE NOTICE 'myvar = %', myvar",
    "END",
    "IF v_user_id <> 0 THEN\n    UPDATE users SET email = v_email WHERE user_id = v_user_id",
    "END IF;",
    "IF parentid IS NULL OR parentid = ''\nTHEN\n    RETURN fullname",
    "ELSE\n    RETURN hp_true_filename(parentid) || '/' || fullname;",
    "END IF;",
    "IF v_count > 0 THEN\n    INSERT INTO users_count (count) VALUES (v_count)",
    "RETURN 't';",
    "ELSE\n    RETURN 'f';",
    "END IF;",
    "IF number = 0 THEN\n    result := 'zero'",
    "ELSIF number > 0 THEN\n    result := 'positive'",
    "ELSIF number < 0 THEN\n    result := 'negative'",
    "ELSE",
    "END IF;",
    "IF demo_row.sex = 'm' THEN\n    pretty_sex := 'man'",
    "ELSE\n    IF demo_row.sex = 'f' THEN\n        pretty_sex := 'woman'",
    "END IF;",
    "END IF;",
    "CASE x\n    WHEN 1, 2 THEN\n        msg := 'one or two'",
    "ELSE\n        msg := 'other value than one or two';",
    "END CASE;",
    "CASE\n    WHEN x BETWEEN 0 AND 10 THEN\n        msg := 'value is between zero and ten'",
    "WHEN x BETWEEN 11 AND 20 THEN\n        msg := 'value is between eleven and twenty'",
    "END CASE;",
    "LOOP",
    "EXIT",
    "END IF;",
    "END LOOP;",
    "LOOP",
    "END LOOP;",
    "BEGIN",
    "EXIT ablock",
    "END IF;",
    "END;",
    "LOOP",
    "CONTINUE WHEN count < 50;",
    "END LOOP;",
    "WHILE amount_owed > 0 AND gift_certificate_balance > 0 LOOP",
    "WHILE NOT done LOOP",
    "FOR i IN 1..10 LOOP",
    "FOR i IN REVERSE 10..1 LOOP",
    "FOR i IN REVERSE 10..1 BY 2 LOOP",
    "CREATE FUNCTION refresh_mviews() RETURNS integer AS $$\nDECLARE\n    mviews RECORD;\nBEGIN\n    RAISE NOTICE 'Refreshing all materialized views...';\n\n    FOR mviews IN\n       SELECT n.nspname AS mv_schema,\n              c.relname AS mv_name,\n              pg_catalog.pg_get_userbyid(c.relowner) AS owner\n         FROM pg_catalog.pg_class c\n    LEFT JOIN pg_catalog.pg_namespace n ON (n.oid = c.relnamespace)\n        WHERE c.relkind = 'm'\n     ORDER BY 1\n    LOOP\n\n        -- Now \"mviews\" has one record with information about the materialized view\n\n        RAISE NOTICE 'Refreshing materialized view %.% (owner: %)...',\n                     quote_ident(mviews.mv_schema),\n                     quote_ident(mviews.mv_name),\n                     quote_ident(mviews.owner);\n        EXECUTE format('REFRESH MATERIALIZED VIEW %I.%I', mviews.mv_schema, mviews.mv_name);\n    END LOOP;\n\n    RAISE NOTICE 'Done refreshing materialized views.';\n    RETURN 1;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION sum(int[]) RETURNS int8 AS $$\nDECLARE\n  s int8 := 0;\n  x int;\nBEGIN\n  FOREACH x IN ARRAY $1\n  LOOP\n    s := s + x;\n  END LOOP;\n  RETURN s;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION scan_rows(int[]) RETURNS void AS $$\nDECLARE\n  x int[];\nBEGIN\n  FOREACH x SLICE 1 IN ARRAY $1\n  LOOP\n    RAISE NOTICE 'row = %', x;\n  END LOOP;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT scan_rows(ARRAY[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]);",
    "WHEN division_by_zero THEN ...\nWHEN SQLSTATE '22012' THEN ...",
    "INSERT INTO mytab(firstname, lastname) VALUES('Tom', 'Jones');",
    "BEGIN\n    UPDATE mytab SET firstname = 'Joe' WHERE lastname = 'Jones';",
    "EXCEPTION\n    WHEN division_by_zero THEN\n        RAISE NOTICE 'caught division_by_zero'",
    "RETURN x;",
    "END;",
    "CREATE TABLE db (a INT PRIMARY KEY, b TEXT);",
    "CREATE FUNCTION merge_db(key INT, data TEXT) RETURNS VOID AS\n$$\nBEGIN\n    LOOP\n        -- first try to update the key\n        UPDATE db SET b = data WHERE a = key;\n        IF found THEN\n            RETURN;\n        END IF;\n        -- not there, so try to insert the key\n        -- if someone else inserts the same key concurrently,\n        -- we could get a unique-key failure\n        BEGIN\n            INSERT INTO db(a,b) VALUES (key, data);\n            RETURN;\n        EXCEPTION WHEN unique_violation THEN\n            -- Do nothing, and loop to try the UPDATE again.\n        END;\n    END LOOP;\nEND;\n$$\nLANGUAGE plpgsql;",
    "SELECT merge_db(1, 'david');",
    "SELECT merge_db(1, 'dennis');",
    "DECLARE\n  text_var1 text;",
    "BEGIN",
    "EXCEPTION WHEN OTHERS THEN\n  GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,\n                          text_var2 = PG_EXCEPTION_DETAIL,\n                          text_var3 = PG_EXCEPTION_HINT",
    "END;",
    "CREATE OR REPLACE FUNCTION outer_func() RETURNS integer AS $$\nBEGIN\n  RETURN inner_func();\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE OR REPLACE FUNCTION inner_func() RETURNS integer AS $$\nDECLARE\n  stack text;\nBEGIN\n  GET DIAGNOSTICS stack = PG_CONTEXT;\n  RAISE NOTICE E'--- Call Stack ---\\n%', stack;\n  RETURN 1;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT outer_func();"
  ],
  "https://www.postgresql.org/docs/15/ecpg-lo.html": [
    "EXEC SQL WHENEVER SQLERROR STOP",
    "EXEC SQL CONNECT TO testdb AS con1;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;"
  ],
  "https://www.postgresql.org/docs/15/libpq-pgservice.html": [],
  "https://www.postgresql.org/docs/15/querytree.html": [],
  "https://www.postgresql.org/docs/15/sql-alterextension.html": [
    "ALTER EXTENSION hstore UPDATE TO '2.0';",
    "ALTER EXTENSION hstore SET SCHEMA utils;",
    "ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore);"
  ],
  "https://www.postgresql.org/docs/15/infoschema-information-schema-catalog-name.html": [],
  "https://www.postgresql.org/docs/15/managing-databases.html": [],
  "https://www.postgresql.org/docs/15/resources.html": [],
  "https://www.postgresql.org/docs/15/pgtesttiming.html": [],
  "https://www.postgresql.org/docs/15/performance-tips.html": [],
  "https://www.postgresql.org/docs/15/libpq-ldap.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-publication-namespace.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-ts-parser.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-commit.html": [],
  "https://www.postgresql.org/docs/15/glossary.html": [],
  "https://www.postgresql.org/docs/15/sql-altertsconfig.html": [
    "ALTER TEXT SEARCH CONFIGURATION my_config\n  ALTER MAPPING REPLACE english WITH swedish;"
  ],
  "https://www.postgresql.org/docs/15/installation.html": [],
  "https://www.postgresql.org/docs/15/wal-configuration.html": [],
  "https://www.postgresql.org/docs/15/information-schema.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-find.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-returntuple.html": [],
  "https://www.postgresql.org/docs/15/sql-alterserver.html": [
    "ALTER SERVER foo OPTIONS (host 'foo', dbname 'foodb');",
    "ALTER SERVER foo VERSION '8.4' OPTIONS (SET host 'baz');"
  ],
  "https://www.postgresql.org/docs/15/sql-createpublication.html": [
    "CREATE PUBLICATION mypublication FOR TABLE users, departments;",
    "CREATE PUBLICATION active_departments FOR TABLE departments WHERE (active IS TRUE);",
    "CREATE PUBLICATION alltables FOR ALL TABLES;",
    "CREATE PUBLICATION insert_only FOR TABLE mydata\n    WITH (publish = 'insert');",
    "CREATE PUBLICATION production_publication FOR TABLE users, departments, TABLES IN SCHEMA production;",
    "CREATE PUBLICATION sales_publication FOR TABLES IN SCHEMA marketing, sales;",
    "CREATE PUBLICATION users_filtered FOR TABLE users (user_id, firstname);"
  ],
  "https://www.postgresql.org/docs/15/sql-droptablespace.html": [
    "DROP TABLESPACE mystuff;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-foreign-server.html": [],
  "https://www.postgresql.org/docs/15/user-manag.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-ts-config.html": [],
  "https://www.postgresql.org/docs/15/queries-with.html": [
    "WITH regional_sales AS (\n    SELECT region, SUM(amount) AS total_sales\n    FROM orders\n    GROUP BY region\n), top_regions AS (\n    SELECT region\n    FROM regional_sales\n    WHERE total_sales > (SELECT SUM(total_sales)/10 FROM regional_sales)\n)\nSELECT region,\n       product,\n       SUM(quantity) AS product_units,\n       SUM(amount) AS product_sales\nFROM orders\nWHERE region IN (SELECT region FROM top_regions)\nGROUP BY region, product;",
    "WITH RECURSIVE t(n) AS (\n    VALUES (1)\n  UNION ALL\n    SELECT n+1 FROM t WHERE n < 100\n)\nSELECT sum(n) FROM t",
    "WITH RECURSIVE included_parts(sub_part, part, quantity) AS (\n    SELECT sub_part, part, quantity FROM parts WHERE part = 'our_product'\n  UNION ALL\n    SELECT p.sub_part, p.part, p.quantity * pr.quantity\n    FROM included_parts pr, parts p\n    WHERE p.part = pr.sub_part\n)\nSELECT sub_part, SUM(quantity) as total_quantity\nFROM included_parts\nGROUP BY sub_part",
    "WITH RECURSIVE search_tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree",
    "WITH RECURSIVE search_tree(id, link, data, path) AS (\n    SELECT t.id, t.link, t.data, ARRAY[t.id]\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data, path || t.id\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree ORDER BY path",
    "WITH RECURSIVE search_tree(id, link, data, path) AS (\n    SELECT t.id, t.link, t.data, ARRAY[ROW(t.f1, t.f2)]\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data, path || ROW(t.f1, t.f2)\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree ORDER BY path",
    "WITH RECURSIVE search_tree(id, link, data, depth) AS (\n    SELECT t.id, t.link, t.data, 0\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data, depth + 1\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree ORDER BY depth",
    "WITH RECURSIVE search_tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n) SEARCH DEPTH FIRST BY id SET ordercol\nSELECT * FROM search_tree ORDER BY ordercol",
    "WITH RECURSIVE search_tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n) SEARCH BREADTH FIRST BY id SET ordercol\nSELECT * FROM search_tree ORDER BY ordercol",
    "WITH RECURSIVE search_graph(id, link, data, depth) AS (\n    SELECT g.id, g.link, g.data, 0\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link\n)\nSELECT * FROM search_graph",
    "WITH RECURSIVE search_graph(id, link, data, depth, is_cycle, path) AS (\n    SELECT g.id, g.link, g.data, 0,\n      false,\n      ARRAY[g.id]\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1,\n      g.id = ANY(path),\n      path || g.id\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link AND NOT is_cycle\n)\nSELECT * FROM search_graph",
    "WITH RECURSIVE search_graph(id, link, data, depth, is_cycle, path) AS (\n    SELECT g.id, g.link, g.data, 0,\n      false,\n      ARRAY[ROW(g.f1, g.f2)]\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1,\n      ROW(g.f1, g.f2) = ANY(path),\n      path || ROW(g.f1, g.f2)\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link AND NOT is_cycle\n)\nSELECT * FROM search_graph",
    "WITH RECURSIVE search_graph(id, link, data, depth) AS (\n    SELECT g.id, g.link, g.data, 1\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link\n) CYCLE id SET is_cycle USING path\nSELECT * FROM search_graph",
    "WITH RECURSIVE t(n) AS (\n    SELECT 1\n  UNION ALL\n    SELECT n+1 FROM t\n)\nSELECT n FROM t LIMIT 100",
    "WITH w AS (\n    SELECT * FROM big_table\n)\nSELECT * FROM w WHERE key = 123;",
    "SELECT * FROM big_table WHERE key = 123;",
    "WITH w AS (\n    SELECT * FROM big_table\n)\nSELECT * FROM w AS w1 JOIN w AS w2 ON w1.key = w2.ref\nWHERE w2.key = 123;",
    "WITH w AS NOT MATERIALIZED (\n    SELECT * FROM big_table\n)\nSELECT * FROM w AS w1 JOIN w AS w2 ON w1.key = w2.ref\nWHERE w2.key = 123",
    "WITH w AS (\n    SELECT key, very_expensive_function(val) as f FROM some_table\n)\nSELECT * FROM w AS w1 JOIN w AS w2 ON w1.f = w2.f;",
    "WITH moved_rows AS (\n    DELETE FROM products\n    WHERE\n        \"date\" >= '2010-10-01' AND\n        \"date\" < '2010-11-01'\n    RETURNING *\n)\nINSERT INTO products_log\nSELECT * FROM moved_rows;",
    "WITH t AS (\n    DELETE FROM foo\n)\nDELETE FROM bar;",
    "WITH RECURSIVE included_parts(sub_part, part) AS (\n    SELECT sub_part, part FROM parts WHERE part = 'our_product'\n  UNION ALL\n    SELECT p.sub_part, p.part\n    FROM included_parts pr, parts p\n    WHERE p.part = pr.sub_part\n)\nDELETE FROM parts\n  WHERE part IN (SELECT part FROM included_parts)",
    "WITH t AS (\n    UPDATE products SET price = price * 1.05\n    RETURNING *\n)\nSELECT * FROM products;",
    "WITH t AS (\n    UPDATE products SET price = price * 1.05\n    RETURNING *\n)\nSELECT * FROM t;"
  ],
  "https://www.postgresql.org/docs/15/xfunc-pl.html": [],
  "https://www.postgresql.org/docs/15/plpython-database.html": [
    "CREATE FUNCTION usesavedplan() RETURNS trigger AS $$\n    if \"plan\" in SD:\n        plan = SD[\"plan\"]\n    else:\n        plan = plpy.prepare(\"SELECT 1\")\n        SD[\"plan\"] = plan\n    # rest of function\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION count_odd_iterator() RETURNS integer AS $$\nodd = 0\nfor row in plpy.cursor(\"select num from largetable\"):\n    if row['num'] % 2:\n         odd += 1\nreturn odd\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION count_odd_fetch(batch_size integer) RETURNS integer AS $$\nodd = 0\ncursor = plpy.cursor(\"select num from largetable\")\nwhile True:\n    rows = cursor.fetch(batch_size)\n    if not rows:\n        break\n    for row in rows:\n        if row['num'] % 2:\n            odd += 1\nreturn odd\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION count_odd_prepared() RETURNS integer AS $$\nodd = 0\nplan = plpy.prepare(\"select num from largetable where num % $1 <> 0\", [\"integer\"])\nrows = list(plpy.cursor(plan, [2]))  # or: = list(plan.cursor([2]))\n\nreturn len(rows)\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION try_adding_joe() RETURNS text AS $$\n    try:\n        plpy.execute(\"INSERT INTO users(username) VALUES ('joe')\")\n    except plpy.SPIError:\n        return \"something went wrong\"\n    else:\n        return \"Joe added\"\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION insert_fraction(numerator int, denominator int) RETURNS text AS $$\nfrom plpy import spiexceptions\ntry:\n    plan = plpy.prepare(\"INSERT INTO fractions (frac) VALUES ($1 / $2)\", [\"int\", \"int\"])\n    plpy.execute(plan, [numerator, denominator])\nexcept spiexceptions.DivisionByZero:\n    return \"denominator cannot equal zero\"\nexcept spiexceptions.UniqueViolation:\n    return \"already have that fraction\"\nexcept plpy.SPIError as e:\n    return \"other error, SQLSTATE %s\" % e.sqlstate\nelse:\n    return \"fraction inserted\"\n$$ LANGUAGE plpython3u;"
  ],
  "https://www.postgresql.org/docs/15/spi-memory.html": [],
  "https://www.postgresql.org/docs/15/btree-behavior.html": [],
  "https://www.postgresql.org/docs/15/sepgsql.html": [],
  "https://www.postgresql.org/docs/15/infoschema-domains.html": [],
  "https://www.postgresql.org/docs/15/ecpg-connect.html": [
    "EXEC SQL CONNECT TO target [AS connection-name] [USER user-name];",
    "EXEC SQL CONNECT TO mydb@sql.mydomain.com;",
    "EXEC SQL CONNECT TO tcp:postgresql://sql.mydomain.com/mydb AS myconnection USER john;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO :target USER :user USING :passwd",
    "EXEC SQL AT connection-name SELECT ...;",
    "EXEC SQL SET CONNECTION connection-name;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb1 AS con1 USER testuser",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL CONNECT TO testdb2 AS con2 USER testuser;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL CONNECT TO testdb3 AS con3 USER testuser;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT current_database() INTO :dbname;",
    "EXEC SQL AT con2 SELECT current_database() INTO :dbname;",
    "EXEC SQL SET CONNECTION con1;",
    "EXEC SQL SELECT current_database() INTO :dbname;",
    "EXEC SQL DISCONNECT ALL;",
    "EXEC SQL AT connection-name DECLARE statement-name STATEMENT;",
    "EXEC SQL PREPARE statement-name FROM :dyn-string;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO postgres AS con1",
    "EXEC SQL CONNECT TO testdb AS con2;",
    "EXEC SQL AT con1 DECLARE stmt STATEMENT;",
    "EXEC SQL PREPARE stmt FROM :dyn_sql;",
    "EXEC SQL EXECUTE stmt INTO :dbname;",
    "EXEC SQL DISCONNECT ALL;",
    "EXEC SQL DISCONNECT [connection];"
  ],
  "https://www.postgresql.org/docs/15/view-pg-timezone-names.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-close.html": [],
  "https://www.postgresql.org/docs/15/sql-cluster.html": [
    "CLUSTER employees USING employees_ind;",
    "CLUSTER employees;",
    "CLUSTER;"
  ],
  "https://www.postgresql.org/docs/15/sql-altersystem.html": [
    "ALTER SYSTEM SET wal_level = replica;",
    "ALTER SYSTEM RESET wal_level;"
  ],
  "https://www.postgresql.org/docs/15/indexes-ordering.html": [
    "CREATE INDEX test2_info_nulls_low ON test2 (info NULLS FIRST);",
    "CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);"
  ],
  "https://www.postgresql.org/docs/15/runtime-config-replication.html": [],
  "https://www.postgresql.org/docs/15/sql-alterdefaultprivileges.html": [
    "ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT ON TABLES TO PUBLIC;",
    "ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT INSERT ON TABLES TO webuser;",
    "ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE SELECT ON TABLES FROM PUBLIC;",
    "ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE INSERT ON TABLES FROM webuser;",
    "ALTER DEFAULT PRIVILEGES FOR ROLE admin REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;",
    "ALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-prepare-extended.html": [],
  "https://www.postgresql.org/docs/15/error-style-guide.html": [],
  "https://www.postgresql.org/docs/15/ecpg-oracle-compat.html": [],
  "https://www.postgresql.org/docs/15/dml-update.html": [
    "UPDATE products SET price = 10 WHERE price = 5;",
    "UPDATE products SET price = price * 1.10;",
    "UPDATE mytable SET a = 5, b = 3, c = 1 WHERE a > 0;"
  ],
  "https://www.postgresql.org/docs/15/extend.html": [],
  "https://www.postgresql.org/docs/15/sql-createrole.html": [
    "CREATE ROLE jonathan LOGIN;",
    "CREATE USER davide WITH PASSWORD 'jw8s0F4';",
    "CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';",
    "CREATE ROLE admin WITH CREATEDB CREATEROLE;"
  ],
  "https://www.postgresql.org/docs/15/pgprewarm.html": [],
  "https://www.postgresql.org/docs/15/sql-droptsconfig.html": [
    "DROP TEXT SEARCH CONFIGURATION my_english;"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-scroll-cursor-fetch.html": [],
  "https://www.postgresql.org/docs/15/sql-droproutine.html": [
    "DROP ROUTINE foo(integer);"
  ],
  "https://www.postgresql.org/docs/15/sql-reindex.html": [
    "REINDEX INDEX my_index;",
    "REINDEX TABLE my_table;",
    "REINDEX DATABASE broken_db",
    "REINDEX TABLE CONCURRENTLY my_broken_table;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-user-mappings.html": [],
  "https://www.postgresql.org/docs/15/fdw-functions.html": [],
  "https://www.postgresql.org/docs/15/sql-alterroutine.html": [
    "ALTER ROUTINE foo(integer) RENAME TO foobar;"
  ],
  "https://www.postgresql.org/docs/15/sql-reset.html": [],
  "https://www.postgresql.org/docs/15/infoschema-enabled-roles.html": [],
  "https://www.postgresql.org/docs/15/custom-scan-execution.html": [],
  "https://www.postgresql.org/docs/15/logicaldecoding-streaming.html": [],
  "https://www.postgresql.org/docs/15/sql-droplanguage.html": [
    "DROP LANGUAGE plsample;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-triggers.html": [],
  "https://www.postgresql.org/docs/15/plpython-python23.html": [],
  "https://www.postgresql.org/docs/15/ecpg-process.html": [
    "ECPG = ecpg"
  ],
  "https://www.postgresql.org/docs/15/sql-alterpolicy.html": [],
  "https://www.postgresql.org/docs/15/app-pgverifybackup.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-disconnect.html": [
    "EXEC SQL CONNECT TO testdb AS DEFAULT USER testuser",
    "EXEC SQL CONNECT TO testdb AS con1 USER testuser;",
    "EXEC SQL CONNECT TO testdb AS con2 USER testuser;",
    "EXEC SQL CONNECT TO testdb AS con3 USER testuser;",
    "EXEC SQL DISCONNECT CURRENT;",
    "EXEC SQL DISCONNECT DEFAULT;",
    "EXEC SQL DISCONNECT ALL;"
  ],
  "https://www.postgresql.org/docs/15/pgbench.html": [
    "UPDATE pgbench_accounts\n  SET abalance = abalance + :delta\n  WHERE aid = :aid\n  RETURNING abalance \\gset\n\nSELECT 1 \\;",
    "SELECT 2 AS two, 3 AS three \\gset p_\nSELECT 4 AS four \\;",
    "SELECT 5 AS five \\aset",
    "BEGIN",
    "UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid",
    "SELECT abalance FROM pgbench_accounts WHERE aid = :aid",
    "UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid",
    "UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid",
    "INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP)",
    "END"
  ],
  "https://www.postgresql.org/docs/15/rule-system.html": [],
  "https://www.postgresql.org/docs/15/when-can-parallel-query-be-used.html": [],
  "https://www.postgresql.org/docs/15/sql-altercollation.html": [
    "SELECT pg_describe_object(refclassid, refobjid, refobjsubid) AS \"Collation\",\n       pg_describe_object(classid, objid, objsubid) AS \"Object\"\n  FROM pg_depend d JOIN pg_collation c\n       ON refclassid = 'pg_collation'::regclass AND refobjid = c.oid\n  WHERE c.collversion <> pg_collation_actual_version(c.oid)\n  ORDER BY 1, 2;",
    "ALTER COLLATION \"de_DE\" RENAME TO german;",
    "ALTER COLLATION \"en_US\" OWNER TO joe;"
  ],
  "https://www.postgresql.org/docs/15/sql-alterusermapping.html": [
    "ALTER USER MAPPING FOR bob SERVER foo OPTIONS (SET password 'public');"
  ],
  "https://www.postgresql.org/docs/15/sql-droptransform.html": [
    "DROP TRANSFORM FOR hstore LANGUAGE plpython3u;"
  ],
  "https://www.postgresql.org/docs/15/sql-createschema.html": [
    "CREATE SCHEMA myschema;",
    "CREATE SCHEMA AUTHORIZATION joe;",
    "CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;",
    "CREATE SCHEMA hollywood\n    CREATE TABLE films (title text, release date, awards text[])\n    CREATE VIEW winners AS\n        SELECT title, release FROM films WHERE awards IS NOT NULL;",
    "CREATE SCHEMA hollywood;",
    "CREATE TABLE hollywood.films (title text, release date, awards text[]);",
    "CREATE VIEW hollywood.winners AS\n    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-namespace.html": [],
  "https://www.postgresql.org/docs/15/ddl-generated-columns.html": [
    "CREATE TABLE people (\n    ...,\n    height_cm numeric,\n    height_in numeric GENERATED ALWAYS AS (height_cm / 2.54) STORED\n);"
  ],
  "https://www.postgresql.org/docs/15/gist-extensibility.html": [
    "CREATE OR REPLACE FUNCTION my_consistent(internal, data_type, smallint, oid, internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0)",
    "CREATE OR REPLACE FUNCTION my_union(internal, internal)\nRETURNS storage_type\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *ent = entryvec->vector;",
    "CREATE OR REPLACE FUNCTION my_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0)",
    "GISTENTRY  *retval;",
    "CREATE OR REPLACE FUNCTION my_decompress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "CREATE OR REPLACE FUNCTION my_penalty(internal, internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *origentry = (GISTENTRY *) PG_GETARG_POINTER(0)",
    "GISTENTRY  *newentry = (GISTENTRY *) PG_GETARG_POINTER(1);",
    "CREATE OR REPLACE FUNCTION my_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *ent = entryvec->vector;",
    "GISTENTRY **raw_entryvec;",
    "CREATE OR REPLACE FUNCTION my_same(storage_type, storage_type, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "CREATE OR REPLACE FUNCTION my_distance(internal, data_type, smallint, oid, internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0)",
    "CREATE OR REPLACE FUNCTION my_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0)",
    "GISTENTRY  *retval;",
    "CREATE OR REPLACE FUNCTION my_options(internal)\nRETURNS void\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;",
    "CREATE OR REPLACE FUNCTION my_sortsupport(internal)\nRETURNS void\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;"
  ],
  "https://www.postgresql.org/docs/15/spgist-examples.html": [],
  "https://www.postgresql.org/docs/15/gin-extensibility.html": [],
  "https://www.postgresql.org/docs/15/sql-creategroup.html": [],
  "https://www.postgresql.org/docs/15/pgtrgm.html": [
    "CREATE TABLE test_trgm (t text);",
    "CREATE INDEX trgm_idx ON test_trgm USING GIST (t gist_trgm_ops);",
    "CREATE INDEX trgm_idx ON test_trgm USING GIN (t gin_trgm_ops);",
    "CREATE INDEX trgm_idx ON test_trgm USING GIST (t gist_trgm_ops(siglen=32));",
    "SELECT t, similarity(t, 'word') AS sml\n  FROM test_trgm\n  WHERE t % 'word'\n  ORDER BY sml DESC, t;",
    "SELECT t, t <-> 'word' AS dist\n  FROM test_trgm\n  ORDER BY dist LIMIT 10;",
    "SELECT t, word_similarity('word', t) AS sml\n  FROM test_trgm\n  WHERE 'word' <% t\n  ORDER BY sml DESC, t;",
    "SELECT t, strict_word_similarity('word', t) AS sml\n  FROM test_trgm\n  WHERE 'word' <<% t\n  ORDER BY sml DESC, t;",
    "SELECT t, 'word' <<-> t AS dist\n  FROM test_trgm\n  ORDER BY dist LIMIT 10;",
    "SELECT t, 'word' <<<-> t AS dist\n  FROM test_trgm\n  ORDER BY dist LIMIT 10;",
    "SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';",
    "SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';",
    "CREATE TABLE words AS SELECT word FROM\n        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');",
    "CREATE INDEX words_idx ON words USING GIN (word gin_trgm_ops);"
  ],
  "https://www.postgresql.org/docs/15/trigger-datachanges.html": [],
  "https://www.postgresql.org/docs/15/kernel-resources.html": [],
  "https://www.postgresql.org/docs/15/sql-syntax-calling-funcs.html": [
    "CREATE FUNCTION concat_lower_or_upper(a text, b text, uppercase boolean DEFAULT false)\nRETURNS text\nAS\n$$\n SELECT CASE\n        WHEN $3 THEN UPPER($1 || ' ' || $2)\n        ELSE LOWER($1 || ' ' || $2)\n        END;\n$$\nLANGUAGE SQL IMMUTABLE STRICT;"
  ],
  "https://www.postgresql.org/docs/15/source.html": [],
  "https://www.postgresql.org/docs/15/archive-module-callbacks.html": [],
  "https://www.postgresql.org/docs/15/rules-privileges.html": [
    "CREATE TABLE phone_data (person text, phone text, private boolean);",
    "CREATE VIEW phone_number AS\n    SELECT person, CASE WHEN NOT private THEN phone END AS phone\n    FROM phone_data;",
    "GRANT SELECT ON phone_number TO assistant;",
    "CREATE VIEW phone_number AS\n    SELECT person, phone FROM phone_data WHERE phone NOT LIKE '412%';",
    "CREATE FUNCTION tricky(text, text) RETURNS bool AS $$\nBEGIN\n    RAISE NOTICE '% => %', $1, $2;\n    RETURN true;\nEND;\n$$ LANGUAGE plpgsql COST 0.0000000000000000000001;",
    "SELECT * FROM phone_number WHERE tricky(person, phone);",
    "CREATE VIEW phone_number WITH (security_barrier) AS\n    SELECT person, phone FROM phone_data WHERE phone NOT LIKE '412%';"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-fetch.html": [],
  "https://www.postgresql.org/docs/15/sql-dropdatabase.html": [],
  "https://www.postgresql.org/docs/15/plhandler.html": [],
  "https://www.postgresql.org/docs/15/fuzzystrmatch.html": [
    "SELECT soundex('hello world!');",
    "SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');",
    "SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');",
    "SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');",
    "CREATE TABLE s (nm text);",
    "INSERT INTO s VALUES ('john');",
    "INSERT INTO s VALUES ('joan');",
    "INSERT INTO s VALUES ('wobbly');",
    "INSERT INTO s VALUES ('jack');",
    "SELECT * FROM s WHERE soundex(nm) = soundex('john');",
    "SELECT * FROM s WHERE difference(s.nm, 'john') > 2;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-foreign-servers.html": [],
  "https://www.postgresql.org/docs/15/dynamic-trace.html": [],
  "https://www.postgresql.org/docs/15/rowtypes.html": [
    "CREATE TYPE complex AS (\n    r       double precision,\n    i       double precision\n);",
    "CREATE TYPE inventory_item AS (\n    name            text,\n    supplier_id     integer,\n    price           numeric\n);",
    "CREATE TABLE on_hand (\n    item      inventory_item,\n    count     integer\n);",
    "INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);",
    "CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric\nAS 'SELECT $1.price * $2' LANGUAGE SQL;",
    "SELECT price_extension(item, 10) FROM on_hand;",
    "CREATE TABLE inventory_item (\n    name            text,\n    supplier_id     integer REFERENCES suppliers,\n    price           numeric CHECK (price > 0)\n);",
    "SELECT item.name FROM on_hand WHERE item.price > 9.99;",
    "SELECT (item).name FROM on_hand WHERE (item).price > 9.99;",
    "SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price > 9.99;",
    "SELECT (my_func(...)).field FROM ...",
    "INSERT INTO mytab (complex_col) VALUES((1.1,2.2));",
    "UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;",
    "UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;",
    "INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);",
    "SELECT c FROM inventory_item c;",
    "SELECT c.* FROM inventory_item c;",
    "SELECT c.name, c.supplier_id, c.price FROM inventory_item c;",
    "SELECT (myfunc(x)).* FROM some_table;",
    "SELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;",
    "SELECT m.* FROM some_table, LATERAL myfunc(x) AS m;",
    "SELECT somefunc(c.*) FROM inventory_item c;",
    "SELECT somefunc(c) FROM inventory_item c;",
    "SELECT * FROM inventory_item c ORDER BY c;",
    "SELECT * FROM inventory_item c ORDER BY c.*;",
    "SELECT * FROM inventory_item c ORDER BY ROW(c.*);",
    "SELECT * FROM inventory_item c ORDER BY ROW(c.name, c.supplier_id, c.price);",
    "SELECT * FROM inventory_item c ORDER BY (c.name, c.supplier_id, c.price);",
    "SELECT c.name FROM inventory_item c WHERE c.price > 1000;",
    "SELECT name(c) FROM inventory_item c WHERE price(c) > 1000;",
    "SELECT somefunc(c) FROM inventory_item c;",
    "SELECT somefunc(c.*) FROM inventory_item c;",
    "SELECT c.somefunc FROM inventory_item c;",
    "INSERT ... VALUES ('(\"\\\"\\\\\")');"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-prepare.html": [],
  "https://www.postgresql.org/docs/15/pgstattuple.html": [
    "SELECT * FROM pgstattuple('pg_catalog.pg_proc');",
    "SELECT * FROM pgstatindex('pg_cast_oid_index');",
    "SELECT * FROM pgstatginindex('test_gin_index');",
    "select * from pgstathashindex('con_hash_index');",
    "SELECT * FROM pgstattuple_approx('pg_catalog.pg_proc'::regclass);"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-proc.html": [],
  "https://www.postgresql.org/docs/15/sql.html": [],
  "https://www.postgresql.org/docs/15/maintenance.html": [],
  "https://www.postgresql.org/docs/15/ecpg-cpp.html": [
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb1",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT current_database() INTO :dbname",
    "EXEC SQL DISCONNECT ALL",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL SELECT current_database() INTO :tmp;",
    "EXEC SQL CONNECT TO testdb1",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL SELECT current_database() INTO :dbname;",
    "EXEC SQL DISCONNECT ALL"
  ],
  "https://www.postgresql.org/docs/15/sql-dropview.html": [
    "DROP VIEW kinds;"
  ],
  "https://www.postgresql.org/docs/15/indexes-expressional.html": [
    "SELECT * FROM test1 WHERE lower(col1) = 'value';",
    "CREATE INDEX test1_lower_col1_idx ON test1 (lower(col1));",
    "SELECT * FROM people WHERE (first_name || ' ' || last_name) = 'John Smith';",
    "CREATE INDEX people_names ON people ((first_name || ' ' || last_name));"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-fname.html": [],
  "https://www.postgresql.org/docs/15/ddl-foreign-data.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-attrdef.html": [],
  "https://www.postgresql.org/docs/15/domains.html": [
    "CREATE DOMAIN posint AS integer CHECK (VALUE > 0);",
    "CREATE TABLE mytable (id posint);",
    "INSERT INTO mytable VALUES(1);",
    "INSERT INTO mytable VALUES(-1);"
  ],
  "https://www.postgresql.org/docs/15/applevel-consistency.html": [],
  "https://www.postgresql.org/docs/15/arrays.html": [
    "CREATE TABLE sal_emp (\n    name            text,\n    pay_by_quarter  integer[],\n    schedule        text[][]\n);",
    "CREATE TABLE tictactoe (\n    squares   integer[3][3]\n);",
    "INSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"training\", \"presentation\"}}');",
    "INSERT INTO sal_emp\n    VALUES ('Carol',\n    '{20000, 25000, 25000, 25000}',\n    '{{\"breakfast\", \"consulting\"}, {\"meeting\", \"lunch\"}}');",
    "SELECT * FROM sal_emp;",
    "INSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"meeting\"}}');",
    "INSERT INTO sal_emp\n    VALUES ('Bill',\n    ARRAY[10000, 10000, 10000, 10000],\n    ARRAY[['meeting', 'lunch'], ['training', 'presentation']]);",
    "INSERT INTO sal_emp\n    VALUES ('Carol',\n    ARRAY[20000, 25000, 25000, 25000],\n    ARRAY[['breakfast', 'consulting'], ['meeting', 'lunch']]);",
    "SELECT name FROM sal_emp WHERE pay_by_quarter[1] <> pay_by_quarter[2];",
    "SELECT pay_by_quarter[3] FROM sal_emp;",
    "SELECT schedule[1:2][1:1] FROM sal_emp WHERE name = 'Bill';",
    "SELECT schedule[1:2][2] FROM sal_emp WHERE name = 'Bill';",
    "SELECT schedule[:2][2:] FROM sal_emp WHERE name = 'Bill';",
    "SELECT schedule[:][1:1] FROM sal_emp WHERE name = 'Bill'",
    "SELECT array_dims(schedule) FROM sal_emp WHERE name = 'Carol';",
    "SELECT array_upper(schedule, 1) FROM sal_emp WHERE name = 'Carol';",
    "SELECT array_length(schedule, 1) FROM sal_emp WHERE name = 'Carol';",
    "SELECT cardinality(schedule) FROM sal_emp WHERE name = 'Carol';",
    "UPDATE sal_emp SET pay_by_quarter = '{25000,25000,27000,27000}'\n    WHERE name = 'Carol';",
    "UPDATE sal_emp SET pay_by_quarter = ARRAY[25000,25000,27000,27000]\n    WHERE name = 'Carol';",
    "UPDATE sal_emp SET pay_by_quarter[4] = 15000\n    WHERE name = 'Bill';",
    "UPDATE sal_emp SET pay_by_quarter[1:2] = '{27000,27000}'\n    WHERE name = 'Carol';",
    "SELECT ARRAY[1,2] || ARRAY[3,4];",
    "SELECT ARRAY[5,6] || ARRAY[[1,2],[3,4]]",
    "SELECT array_dims(1 || '[0:1]={2,3}'::int[]);",
    "SELECT array_dims(ARRAY[1,2] || 3)",
    "SELECT array_dims(ARRAY[1,2] || ARRAY[3,4,5]);",
    "SELECT array_dims(ARRAY[[1,2],[3,4]] || ARRAY[[5,6],[7,8],[9,0]])",
    "SELECT array_dims(ARRAY[1,2] || ARRAY[[3,4],[5,6]]);",
    "SELECT array_prepend(1, ARRAY[2,3]);",
    "SELECT array_append(ARRAY[1,2], 3)",
    "SELECT array_cat(ARRAY[1,2], ARRAY[3,4])",
    "SELECT array_cat(ARRAY[[1,2],[3,4]], ARRAY[5,6])",
    "SELECT array_cat(ARRAY[5,6], ARRAY[[1,2],[3,4]])",
    "SELECT ARRAY[1, 2] || '{3, 4}';",
    "SELECT ARRAY[1, 2] || '7'",
    "SELECT ARRAY[1, 2] || NULL",
    "SELECT array_append(ARRAY[1, 2], NULL)",
    "SELECT * FROM sal_emp WHERE pay_by_quarter[1] = 10000 OR\n                            pay_by_quarter[2] = 10000 OR\n                            pay_by_quarter[3] = 10000 OR\n                            pay_by_quarter[4] = 10000;",
    "SELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);",
    "SELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);",
    "SELECT * FROM\n   (SELECT pay_by_quarter,\n           generate_subscripts(pay_by_quarter, 1) AS s\n      FROM sal_emp) AS foo\n WHERE pay_by_quarter[s] = 10000;",
    "SELECT * FROM sal_emp WHERE pay_by_quarter && ARRAY[10000];",
    "SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');",
    "SELECT array_positions(ARRAY[1, 4, 3, 1, 3, 4, 2, 1], 1)",
    "SELECT f1[1][-2][3] AS e1, f1[1][-1][5] AS e2\n FROM (SELECT '[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'::int[] AS f1) AS ss;"
  ],
  "https://www.postgresql.org/docs/15/monitoring-stats.html": [
    "SELECT pid, wait_event_type, wait_event FROM pg_stat_activity WHERE wait_event is NOT NULL;",
    "SELECT pg_stat_get_backend_pid(s.backendid) AS pid,\n       pg_stat_get_backend_activity(s.backendid) AS query\n    FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;"
  ],
  "https://www.postgresql.org/docs/15/sql-dropcollation.html": [
    "DROP COLLATION german;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-depend.html": [],
  "https://www.postgresql.org/docs/15/logicaldecoding-output-plugin.html": [
    "ALTER TABLE user_catalog_table SET (user_catalog_table = true);",
    "CREATE TABLE another_catalog_table(data text) WITH (user_catalog_table = true);"
  ],
  "https://www.postgresql.org/docs/15/ecpg-sql-connect.html": [
    "EXEC SQL CONNECT TO \"connectdb\" AS main;",
    "EXEC SQL CONNECT TO \"connectdb\" AS second;",
    "EXEC SQL CONNECT TO \"unix:postgresql://200.46.204.71/connectdb\" AS main USER connectuser;",
    "EXEC SQL CONNECT TO \"unix:postgresql://localhost/connectdb\" AS main USER connectuser;",
    "EXEC SQL CONNECT TO 'connectdb' AS main;",
    "EXEC SQL CONNECT TO 'unix:postgresql://localhost/connectdb' AS main USER :user;",
    "EXEC SQL CONNECT TO :db AS :id;",
    "EXEC SQL CONNECT TO :db USER connectuser USING :pw;",
    "EXEC SQL CONNECT TO @localhost AS main USER connectdb;",
    "EXEC SQL CONNECT TO REGRESSDB1 as main;",
    "EXEC SQL CONNECT TO AS main USER connectdb;",
    "EXEC SQL CONNECT TO connectdb AS :id;",
    "EXEC SQL CONNECT TO connectdb AS main USER connectuser/connectdb;",
    "EXEC SQL CONNECT TO connectdb AS main;",
    "EXEC SQL CONNECT TO connectdb@localhost AS main;",
    "EXEC SQL CONNECT TO tcp:postgresql://localhost/ USER connectdb;",
    "EXEC SQL CONNECT TO tcp:postgresql://localhost/connectdb USER connectuser IDENTIFIED BY connectpw;",
    "EXEC SQL CONNECT TO tcp:postgresql://localhost:20/connectdb USER connectuser IDENTIFIED BY connectpw;",
    "EXEC SQL CONNECT TO unix:postgresql://localhost/ AS main USER connectdb;",
    "EXEC SQL CONNECT TO unix:postgresql://localhost/connectdb AS main USER connectuser;",
    "EXEC SQL CONNECT TO unix:postgresql://localhost/connectdb USER connectuser IDENTIFIED BY \"connectpw\";",
    "EXEC SQL CONNECT TO unix:postgresql://localhost/connectdb USER connectuser USING \"connectpw\";",
    "EXEC SQL CONNECT TO unix:postgresql://localhost/connectdb?connect_timeout=14 USER connectuser;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO :dbname USER :user;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT version() INTO :ver;",
    "EXEC SQL DISCONNECT;",
    "EXEC SQL CONNECT TO :connection USER :user;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT version() INTO :ver;",
    "EXEC SQL DISCONNECT;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-library.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-getvalue.html": [],
  "https://www.postgresql.org/docs/15/functions-subquery.html": [],
  "https://www.postgresql.org/docs/15/release-prior.html": [],
  "https://www.postgresql.org/docs/15/textsearch-psql.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-set-connection.html": [
    "EXEC SQL SET CONNECTION TO con2;",
    "EXEC SQL SET CONNECTION = con1;"
  ],
  "https://www.postgresql.org/docs/15/app-pgreceivewal.html": [],
  "https://www.postgresql.org/docs/15/sql-truncate.html": [
    "TRUNCATE bigtable, fattable;",
    "TRUNCATE bigtable, fattable RESTART IDENTITY;",
    "TRUNCATE othertable CASCADE;"
  ],
  "https://www.postgresql.org/docs/15/bki-commands.html": [],
  "https://www.postgresql.org/docs/15/auth-username-maps.html": [],
  "https://www.postgresql.org/docs/15/datetime-config-files.html": [],
  "https://www.postgresql.org/docs/15/extend-pgxs.html": [
    "MODULES = isbn_issn\nEXTENSION = isbn_issn\nDATA = isbn_issn\nDOCS = README.isbn_issn\nHEADERS_isbn_issn = isbn_issn.h",
    "PGXS := $(shell $(PG_CONFIG)\ninclude $(PGXS)"
  ],
  "https://www.postgresql.org/docs/15/logicaldecoding-catalogs.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-fetch.html": [],
  "https://www.postgresql.org/docs/15/plpython-sharing.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-connect.html": [],
  "https://www.postgresql.org/docs/15/app-pgrewind.html": [
    "CREATE USER rewind_user LOGIN;",
    "GRANT EXECUTE ON function pg_catalog.pg_ls_dir(text, boolean, boolean) TO rewind_user;",
    "GRANT EXECUTE ON function pg_catalog.pg_stat_file(text, boolean) TO rewind_user;",
    "GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text) TO rewind_user;",
    "GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean) TO rewind_user;"
  ],
  "https://www.postgresql.org/docs/15/spi-transaction.html": [],
  "https://www.postgresql.org/docs/15/sql-createtransform.html": [
    "CREATE TYPE hstore ...;",
    "CREATE EXTENSION plpython3u;",
    "CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal\nLANGUAGE C STRICT IMMUTABLE\nAS ...;",
    "CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore\nLANGUAGE C STRICT IMMUTABLE\nAS ...;",
    "CREATE TRANSFORM FOR hstore LANGUAGE plpython3u (\n    FROM SQL WITH FUNCTION hstore_to_plpython(internal),\n    TO SQL WITH FUNCTION plpython_to_hstore(internal)\n);"
  ],
  "https://www.postgresql.org/docs/15/libpq-pgpass.html": [],
  "https://www.postgresql.org/docs/15/infoschema-table-constraints.html": [],
  "https://www.postgresql.org/docs/15/sql-dropdomain.html": [
    "DROP DOMAIN box;"
  ],
  "https://www.postgresql.org/docs/15/plpgsql-trigger.html": [
    "CREATE TABLE emp (\n    empname text,\n    salary integer,\n    last_date timestamp,\n    last_user text\n);",
    "CREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$\n    BEGIN\n        -- Check that empname and salary are given\n        IF NEW.empname IS NULL THEN\n            RAISE EXCEPTION 'empname cannot be null';\n        END IF;\n        IF NEW.salary IS NULL THEN\n            RAISE EXCEPTION '% cannot have null salary', NEW.empname;\n        END IF;\n\n        -- Who works for us when they must pay for it?\n        IF NEW.salary < 0 THEN\n            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname;\n        END IF;\n\n        -- Remember who changed the payroll when\n        NEW.last_date := current_timestamp;\n        NEW.last_user := current_user;\n        RETURN NEW;\n    END;\n$emp_stamp$ LANGUAGE plpgsql;",
    "CREATE TRIGGER emp_stamp BEFORE INSERT OR UPDATE ON emp\n    FOR EACH ROW EXECUTE FUNCTION emp_stamp();",
    "CREATE TABLE emp (\n    empname           text NOT NULL,\n    salary            integer\n);",
    "CREATE TABLE emp_audit(\n    operation         char(1)   NOT NULL,\n    stamp             timestamp NOT NULL,\n    userid            text      NOT NULL,\n    empname           text      NOT NULL,\n    salary integer\n);",
    "CREATE OR REPLACE FUNCTION process_emp_audit() RETURNS TRIGGER AS $emp_audit$\n    BEGIN\n        --\n        -- Create a row in emp_audit to reflect the operation performed on emp,\n        -- making use of the special variable TG_OP to work out the operation.\n        --\n        IF (TG_OP = 'DELETE') THEN\n            INSERT INTO emp_audit SELECT 'D', now(), user, OLD.*;\n        ELSIF (TG_OP = 'UPDATE') THEN\n            INSERT INTO emp_audit SELECT 'U', now(), user, NEW.*;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO emp_audit SELECT 'I', now(), user, NEW.*;\n        END IF;\n        RETURN NULL; -- result is ignored since this is an AFTER trigger\n    END;\n$emp_audit$ LANGUAGE plpgsql;",
    "CREATE TRIGGER emp_audit\nAFTER INSERT OR UPDATE OR DELETE ON emp\n    FOR EACH ROW EXECUTE FUNCTION process_emp_audit();",
    "CREATE TABLE emp (\n    empname           text PRIMARY KEY,\n    salary            integer\n);",
    "CREATE TABLE emp_audit(\n    operation         char(1)   NOT NULL,\n    userid            text      NOT NULL,\n    empname           text      NOT NULL,\n    salary            integer,\n    stamp             timestamp NOT NULL\n);",
    "CREATE VIEW emp_view AS\n    SELECT e.empname,\n           e.salary,\n           max(ea.stamp) AS last_updated\n      FROM emp e\n      LEFT JOIN emp_audit ea ON ea.empname = e.empname\n     GROUP BY 1, 2;",
    "CREATE OR REPLACE FUNCTION update_emp_view() RETURNS TRIGGER AS $$\n    BEGIN\n        --\n        -- Perform the required operation on emp, and create a row in emp_audit\n        -- to reflect the change made to emp.\n        --\n        IF (TG_OP = 'DELETE') THEN\n            DELETE FROM emp WHERE empname = OLD.empname;\n            IF NOT FOUND THEN RETURN NULL; END IF;\n\n            OLD.last_updated = now();\n            INSERT INTO emp_audit VALUES('D', user, OLD.*);\n            RETURN OLD;\n        ELSIF (TG_OP = 'UPDATE') THEN\n            UPDATE emp SET salary = NEW.salary WHERE empname = OLD.empname;\n            IF NOT FOUND THEN RETURN NULL; END IF;\n\n            NEW.last_updated = now();\n            INSERT INTO emp_audit VALUES('U', user, NEW.*);\n            RETURN NEW;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO emp VALUES(NEW.empname, NEW.salary);\n\n            NEW.last_updated = now();\n            INSERT INTO emp_audit VALUES('I', user, NEW.*);\n            RETURN NEW;\n        END IF;\n    END;\n$$ LANGUAGE plpgsql;",
    "CREATE TRIGGER emp_audit\nINSTEAD OF INSERT OR UPDATE OR DELETE ON emp_view\n    FOR EACH ROW EXECUTE FUNCTION update_emp_view();",
    "CREATE TABLE time_dimension (\n    time_key                    integer NOT NULL,\n    day_of_week                 integer NOT NULL,\n    day_of_month                integer NOT NULL,\n    month                       integer NOT NULL,\n    quarter                     integer NOT NULL,\n    year                        integer NOT NULL\n);",
    "CREATE UNIQUE INDEX time_dimension_key ON time_dimension(time_key);",
    "CREATE TABLE sales_fact (\n    time_key                    integer NOT NULL,\n    product_key                 integer NOT NULL,\n    store_key                   integer NOT NULL,\n    amount_sold                 numeric(12,2) NOT NULL,\n    units_sold                  integer NOT NULL,\n    amount_cost                 numeric(12,2) NOT NULL\n);",
    "CREATE INDEX sales_fact_time ON sales_fact(time_key);",
    "CREATE TABLE sales_summary_bytime (\n    time_key                    integer NOT NULL,\n    amount_sold                 numeric(15,2) NOT NULL,\n    units_sold                  numeric(12) NOT NULL,\n    amount_cost                 numeric(15,2) NOT NULL\n);",
    "CREATE UNIQUE INDEX sales_summary_bytime_key ON sales_summary_bytime(time_key);",
    "CREATE OR REPLACE FUNCTION maint_sales_summary_bytime() RETURNS TRIGGER\nAS $maint_sales_summary_bytime$\n    DECLARE\n        delta_time_key          integer;\n        delta_amount_sold       numeric(15,2);\n        delta_units_sold        numeric(12);\n        delta_amount_cost       numeric(15,2);\n    BEGIN\n\n        -- Work out the increment/decrement amount(s).\n        IF (TG_OP = 'DELETE') THEN\n\n            delta_time_key = OLD.time_key;\n            delta_amount_sold = -1 * OLD.amount_sold;\n            delta_units_sold = -1 * OLD.units_sold;\n            delta_amount_cost = -1 * OLD.amount_cost;\n\n        ELSIF (TG_OP = 'UPDATE') THEN\n\n            -- forbid updates that change the time_key -\n            -- (probably not too onerous, as DELETE + INSERT is how most\n            -- changes will be made).\n            IF ( OLD.time_key != NEW.time_key) THEN\n                RAISE EXCEPTION 'Update of time_key : % -> % not allowed',\n                                                      OLD.time_key, NEW.time_key;\n            END IF;\n\n            delta_time_key = OLD.time_key;\n            delta_amount_sold = NEW.amount_sold - OLD.amount_sold;\n            delta_units_sold = NEW.units_sold - OLD.units_sold;\n            delta_amount_cost = NEW.amount_cost - OLD.amount_cost;\n\n        ELSIF (TG_OP = 'INSERT') THEN\n\n            delta_time_key = NEW.time_key;\n            delta_amount_sold = NEW.amount_sold;\n            delta_units_sold = NEW.units_sold;\n            delta_amount_cost = NEW.amount_cost;\n\n        END IF;\n\n\n        -- Insert or update the summary row with the new values.\n        <<insert_update>>\n        LOOP\n            UPDATE sales_summary_bytime\n                SET amount_sold = amount_sold + delta_amount_sold,\n                    units_sold = units_sold + delta_units_sold,\n                    amount_cost = amount_cost + delta_amount_cost\n                WHERE time_key = delta_time_key;\n\n            EXIT insert_update WHEN found;\n\n            BEGIN\n                INSERT INTO sales_summary_bytime (\n                            time_key,\n                            amount_sold,\n                            units_sold,\n                            amount_cost)\n                    VALUES (\n                            delta_time_key,\n                            delta_amount_sold,\n                            delta_units_sold,\n                            delta_amount_cost\n                           );\n\n                EXIT insert_update;\n\n            EXCEPTION\n                WHEN UNIQUE_VIOLATION THEN\n                    -- do nothing\n            END;\n        END LOOP insert_update;\n\n        RETURN NULL;\n\n    END;\n$maint_sales_summary_bytime$ LANGUAGE plpgsql;",
    "CREATE TRIGGER maint_sales_summary_bytime\nAFTER INSERT OR UPDATE OR DELETE ON sales_fact\n    FOR EACH ROW EXECUTE FUNCTION maint_sales_summary_bytime();",
    "INSERT INTO sales_fact VALUES(1,1,1,10,3,15);",
    "INSERT INTO sales_fact VALUES(1,2,1,20,5,35);",
    "INSERT INTO sales_fact VALUES(2,2,1,40,15,135);",
    "INSERT INTO sales_fact VALUES(2,3,1,10,1,13);",
    "SELECT * FROM sales_summary_bytime;",
    "DELETE FROM sales_fact WHERE product_key = 1;",
    "SELECT * FROM sales_summary_bytime;",
    "UPDATE sales_fact SET units_sold = units_sold * 2;",
    "SELECT * FROM sales_summary_bytime;",
    "CREATE TABLE emp (\n    empname           text NOT NULL,\n    salary            integer\n);",
    "CREATE TABLE emp_audit(\n    operation         char(1)   NOT NULL,\n    stamp             timestamp NOT NULL,\n    userid            text      NOT NULL,\n    empname           text      NOT NULL,\n    salary integer\n);",
    "CREATE OR REPLACE FUNCTION process_emp_audit() RETURNS TRIGGER AS $emp_audit$\n    BEGIN\n        --\n        -- Create rows in emp_audit to reflect the operations performed on emp,\n        -- making use of the special variable TG_OP to work out the operation.\n        --\n        IF (TG_OP = 'DELETE') THEN\n            INSERT INTO emp_audit\n                SELECT 'D', now(), user, o.* FROM old_table o;\n        ELSIF (TG_OP = 'UPDATE') THEN\n            INSERT INTO emp_audit\n                SELECT 'U', now(), user, n.* FROM new_table n;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO emp_audit\n                SELECT 'I', now(), user, n.* FROM new_table n;\n        END IF;\n        RETURN NULL; -- result is ignored since this is an AFTER trigger\n    END;\n$emp_audit$ LANGUAGE plpgsql;",
    "CREATE TRIGGER emp_audit_ins\n    AFTER INSERT ON emp\n    REFERENCING NEW TABLE AS new_table\n    FOR EACH STATEMENT EXECUTE FUNCTION process_emp_audit();",
    "CREATE TRIGGER emp_audit_upd\n    AFTER UPDATE ON emp\n    REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table\n    FOR EACH STATEMENT EXECUTE FUNCTION process_emp_audit();",
    "CREATE TRIGGER emp_audit_del\n    AFTER DELETE ON emp\n    REFERENCING OLD TABLE AS old_table\n    FOR EACH STATEMENT EXECUTE FUNCTION process_emp_audit();",
    "CREATE OR REPLACE FUNCTION snitch() RETURNS event_trigger AS $$\nBEGIN\n    RAISE NOTICE 'snitch: % %', tg_event, tg_tag;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE EVENT TRIGGER snitch ON ddl_command_start EXECUTE FUNCTION snitch();"
  ],
  "https://www.postgresql.org/docs/15/infoschema-element-types.html": [
    "SELECT c.column_name, c.data_type, e.data_type AS element_type\nFROM information_schema.columns c LEFT JOIN information_schema.element_types e\n     ON ((c.table_catalog, c.table_schema, c.table_name, 'TABLE', c.dtd_identifier)\n       = (e.object_catalog, e.object_schema, e.object_name, e.object_type, e.collection_type_identifier))\nWHERE c.table_schema = '...' AND c.table_name = '...'\nORDER BY c.ordinal_position;"
  ],
  "https://www.postgresql.org/docs/15/lo-interfaces.html": [],
  "https://www.postgresql.org/docs/15/app-reindexdb.html": [],
  "https://www.postgresql.org/docs/15/pgwaldump.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-class.html": [],
  "https://www.postgresql.org/docs/15/ddl-system-columns.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-collation.html": [],
  "https://www.postgresql.org/docs/15/docguide-style.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-prepare-params.html": [],
  "https://www.postgresql.org/docs/15/sql-altertable.html": [
    "ALTER TABLE distributors ADD COLUMN address varchar(30);",
    "ALTER TABLE measurements\n  ADD COLUMN mtime timestamp with time zone DEFAULT now();",
    "ALTER TABLE transactions\n  ADD COLUMN status varchar(30) DEFAULT 'old',\n  ALTER COLUMN status SET default 'current';",
    "ALTER TABLE distributors DROP COLUMN address RESTRICT;",
    "ALTER TABLE distributors\n    ALTER COLUMN address TYPE varchar(80),\n    ALTER COLUMN name TYPE varchar(100);",
    "ALTER TABLE foo\n    ALTER COLUMN foo_timestamp SET DATA TYPE timestamp with time zone\n    USING\n        timestamp with time zone 'epoch' + foo_timestamp * interval '1 second';",
    "ALTER TABLE foo\n    ALTER COLUMN foo_timestamp DROP DEFAULT,\n    ALTER COLUMN foo_timestamp TYPE timestamp with time zone\n    USING\n        timestamp with time zone 'epoch' + foo_timestamp * interval '1 second',\n    ALTER COLUMN foo_timestamp SET DEFAULT now();",
    "ALTER TABLE distributors RENAME COLUMN address TO city;",
    "ALTER TABLE distributors RENAME TO suppliers;",
    "ALTER TABLE distributors RENAME CONSTRAINT zipchk TO zip_check;",
    "ALTER TABLE distributors ALTER COLUMN street SET NOT NULL;",
    "ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL;",
    "ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5);",
    "ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5) NO INHERIT;",
    "ALTER TABLE distributors DROP CONSTRAINT zipchk;",
    "ALTER TABLE ONLY distributors DROP CONSTRAINT zipchk;",
    "ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address);",
    "ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) NOT VALID;",
    "ALTER TABLE distributors VALIDATE CONSTRAINT distfk;",
    "ALTER TABLE distributors ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode);",
    "ALTER TABLE distributors ADD PRIMARY KEY (dist_id);",
    "ALTER TABLE distributors SET TABLESPACE fasttablespace;",
    "ALTER TABLE myschema.distributors SET SCHEMA yourschema;",
    "CREATE UNIQUE INDEX CONCURRENTLY dist_id_temp_idx ON distributors (dist_id);",
    "ALTER TABLE distributors DROP CONSTRAINT distributors_pkey,\n    ADD CONSTRAINT distributors_pkey PRIMARY KEY USING INDEX dist_id_temp_idx;",
    "ALTER TABLE measurement\n    ATTACH PARTITION measurement_y2016m07 FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');",
    "ALTER TABLE cities\n    ATTACH PARTITION cities_ab FOR VALUES IN ('a', 'b');",
    "ALTER TABLE orders\n    ATTACH PARTITION orders_p4 FOR VALUES WITH (MODULUS 4, REMAINDER 3);",
    "ALTER TABLE cities\n    ATTACH PARTITION cities_partdef DEFAULT;",
    "ALTER TABLE measurement\n    DETACH PARTITION measurement_y2015m12;"
  ],
  "https://www.postgresql.org/docs/15/logical-replication-conflicts.html": [],
  "https://www.postgresql.org/docs/15/queries-union.html": [],
  "https://www.postgresql.org/docs/15/view-pg-shadow.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-gettypeid.html": [],
  "https://www.postgresql.org/docs/15/install-getsource.html": [],
  "https://www.postgresql.org/docs/15/plperl-data.html": [],
  "https://www.postgresql.org/docs/15/auth-bsd.html": [],
  "https://www.postgresql.org/docs/15/infoschema-transforms.html": [],
  "https://www.postgresql.org/docs/15/app-pgrestore.html": [
    "CREATE DATABASE foo WITH TEMPLATE template0;",
    "TOC Entries: 81\n"
  ],
  "https://www.postgresql.org/docs/15/connect-estab.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-error-message.html": [
    "SELECT dblink_error_message('dtest1');"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-unregister-relation.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execute-plan-with-paramlist.html": [],
  "https://www.postgresql.org/docs/15/regress-variant.html": [],
  "https://www.postgresql.org/docs/15/infoschema-columns.html": [],
  "https://www.postgresql.org/docs/15/infoschema-data-type-privileges.html": [],
  "https://www.postgresql.org/docs/15/sql-createoperator.html": [
    "COMMUTATOR = OPERATOR(myschema.===) ,",
    "CREATE OPERATOR === (\n    LEFTARG = box,\n    RIGHTARG = box,\n    FUNCTION = area_equal_function,\n    COMMUTATOR = ===,\n    NEGATOR = !==,\n    RESTRICT = area_restriction_function,\n    JOIN = area_join_function,\n    HASHES, MERGES\n);"
  ],
  "https://www.postgresql.org/docs/15/pgsurgery.html": [
    "select * from t1 where ctid = '(0, 1)';"
  ],
  "https://www.postgresql.org/docs/15/ddl-depend.html": [
    "CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow',\n                             'green', 'blue', 'purple');",
    "CREATE TABLE my_colors (color rainbow, note text);",
    "CREATE FUNCTION get_color_note (rainbow) RETURNS text AS\n  'SELECT note FROM my_colors WHERE color = $1'\n  LANGUAGE SQL;"
  ],
  "https://www.postgresql.org/docs/15/tablefunc.html": [
    "SELECT * FROM crosstab('...') AS ct(row_name text, category_1 text, category_2 text);",
    "CREATE TABLE ct(id SERIAL, rowid TEXT, attribute TEXT, value TEXT);",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test1','att1','val1');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test1','att2','val2');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test1','att3','val3');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test1','att4','val4');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test2','att1','val5');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test2','att2','val6');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test2','att3','val7');",
    "INSERT INTO ct(rowid, attribute, value) VALUES('test2','att4','val8');",
    "SELECT *\nFROM crosstab(\n  'select rowid, attribute, value\n   from ct\n   where attribute = ''att2'' or attribute = ''att3''\n   order by 1,2')\nAS ct(row_name text, category_1 text, category_2 text, category_3 text);",
    "CREATE TYPE tablefunc_crosstab_N AS (\n    row_name TEXT,\n    category_1 TEXT,\n    category_2 TEXT,\n        .\n        .\n        .\n    category_N TEXT\n);",
    "SELECT *\nFROM crosstab3(\n  'select rowid, attribute, value\n   from ct\n   where attribute = ''att2'' or attribute = ''att3''\n   order by 1,2');",
    "CREATE TYPE my_crosstab_float8_5_cols AS (\n    my_row_name text,\n    my_category_1 float8,\n    my_category_2 float8,\n    my_category_3 float8,\n    my_category_4 float8,\n    my_category_5 float8\n);",
    "CREATE OR REPLACE FUNCTION crosstab_float8_5_cols(text)\n    RETURNS setof my_crosstab_float8_5_cols\n    AS '$libdir/tablefunc','crosstab' LANGUAGE C STABLE STRICT;",
    "CREATE OR REPLACE FUNCTION crosstab_float8_5_cols(\n    IN text,\n    OUT my_row_name text,\n    OUT my_category_1 float8,\n    OUT my_category_2 float8,\n    OUT my_category_3 float8,\n    OUT my_category_4 float8,\n    OUT my_category_5 float8)\n  RETURNS setof record\n  AS '$libdir/tablefunc','crosstab' LANGUAGE C STABLE STRICT;",
    "SELECT row_name, extra_col, cat, value FROM foo ORDER BY 1;",
    "SELECT DISTINCT cat FROM foo ORDER BY 1;",
    "SELECT * FROM crosstab('...', '...')\n    AS ct(row_name text, extra text, cat1 text, cat2 text, cat3 text, cat4 text);",
    "create table sales(year int, month int, qty int);",
    "insert into sales values(2007, 1, 1000);",
    "insert into sales values(2007, 2, 1500);",
    "insert into sales values(2007, 7, 500);",
    "insert into sales values(2007, 11, 1500);",
    "insert into sales values(2007, 12, 2000);",
    "insert into sales values(2008, 1, 1000);",
    "select * from crosstab(\n  'select year, month, qty from sales order by 1',\n  'select m from generate_series(1,12) m'\n) as (\n  year int,\n  \"Jan\" int,\n  \"Feb\" int,\n  \"Mar\" int,\n  \"Apr\" int,\n  \"May\" int,\n  \"Jun\" int,\n  \"Jul\" int,\n  \"Aug\" int,\n  \"Sep\" int,\n  \"Oct\" int,\n  \"Nov\" int,\n  \"Dec\" int\n);",
    "CREATE TABLE cth(rowid text, rowdt timestamp, attribute text, val text);",
    "INSERT INTO cth VALUES('test1','01 March 2003','temperature','42');",
    "INSERT INTO cth VALUES('test1','01 March 2003','test_result','PASS');",
    "INSERT INTO cth VALUES('test1','01 March 2003','volts','2.6987');",
    "INSERT INTO cth VALUES('test2','02 March 2003','temperature','53');",
    "INSERT INTO cth VALUES('test2','02 March 2003','test_result','FAIL');",
    "INSERT INTO cth VALUES('test2','02 March 2003','test_startdate','01 March 2003');",
    "INSERT INTO cth VALUES('test2','02 March 2003','volts','3.1234');",
    "SELECT * FROM crosstab\n(\n  'SELECT rowid, rowdt, attribute, val FROM cth ORDER BY 1',\n  'SELECT DISTINCT attribute FROM cth ORDER BY 1'\n)\nAS\n(\n       rowid text,\n       rowdt timestamp,\n       temperature int4,\n       test_result text,\n       test_startdate timestamp,\n       volts float8\n);",
    "SELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'pos', 'row2', 0, '~')\n    AS t(keyid text, parent_keyid text, level int, branch text, pos int);",
    "CREATE TABLE connectby_tree(keyid text, parent_keyid text, pos int);",
    "INSERT INTO connectby_tree VALUES('row1',NULL, 0);",
    "INSERT INTO connectby_tree VALUES('row2','row1', 0);",
    "INSERT INTO connectby_tree VALUES('row3','row1', 0);",
    "INSERT INTO connectby_tree VALUES('row4','row2', 1);",
    "INSERT INTO connectby_tree VALUES('row5','row2', 0);",
    "INSERT INTO connectby_tree VALUES('row6','row4', 0);",
    "INSERT INTO connectby_tree VALUES('row7','row3', 0);",
    "INSERT INTO connectby_tree VALUES('row8','row6', 0);",
    "INSERT INTO connectby_tree VALUES('row9','row5', 0);",
    "SELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'row2', 0, '~')\n AS t(keyid text, parent_keyid text, level int, branch text);",
    "SELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'row2', 0)\n AS t(keyid text, parent_keyid text, level int)",
    "SELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'pos', 'row2', 0, '~')\n AS t(keyid text, parent_keyid text, level int, branch text, pos int)",
    "SELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'pos', 'row2', 0)\n AS t(keyid text, parent_keyid text, level int, pos int)"
  ],
  "https://www.postgresql.org/docs/15/index-unique-checks.html": [],
  "https://www.postgresql.org/docs/15/passwordcheck.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-range.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-result-code-string.html": [],
  "https://www.postgresql.org/docs/15/collation.html": [
    "CREATE TABLE test1 (\n    a text COLLATE \"de_DE\",\n    b text COLLATE \"es_ES\",\n    ...\n);",
    "SELECT a < 'foo' FROM test1;",
    "SELECT a < ('foo' COLLATE \"fr_FR\") FROM test1;",
    "SELECT a < b FROM test1;",
    "SELECT a < b COLLATE \"de_DE\" FROM test1;",
    "SELECT a COLLATE \"de_DE\" < b FROM test1;",
    "SELECT a || b FROM test1;",
    "SELECT * FROM test1 ORDER BY a || 'foo';",
    "SELECT * FROM test1 ORDER BY a || b;",
    "SELECT * FROM test1 ORDER BY a || b COLLATE \"fr_FR\";",
    "SELECT a COLLATE \"C\" < b COLLATE \"POSIX\" FROM test1;",
    "CREATE COLLATION german (provider = libc, locale = 'de_DE');",
    "CREATE COLLATION german FROM \"de_DE\";",
    "CREATE COLLATION french FROM \"fr-x-icu\";",
    "CREATE COLLATION ndcoll (provider = icu, locale = 'und', deterministic = false);",
    "CREATE COLLATION case_insensitive (provider = icu, locale = 'und-u-ks-level2', deterministic = false);",
    "CREATE COLLATION ignore_accents (provider = icu, locale = 'und-u-ks-level1-kc-true', deterministic = false);"
  ],
  "https://www.postgresql.org/docs/15/monitoring-locks.html": [],
  "https://www.postgresql.org/docs/15/transaction-iso.html": [],
  "https://www.postgresql.org/docs/15/mvcc-intro.html": [],
  "https://www.postgresql.org/docs/15/client-authentication.html": [],
  "https://www.postgresql.org/docs/15/functions-string.html": [
    "NULL\n zz"
  ],
  "https://www.postgresql.org/docs/15/logicaldecoding-writer.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-transactions.html": [
    "CREATE PROCEDURE transaction_test1()\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    FOR i IN 0..9 LOOP\n        INSERT INTO test1 (a) VALUES (i);\n        IF i % 2 = 0 THEN\n            COMMIT;\n        ELSE\n            ROLLBACK;\n        END IF;\n    END LOOP;\nEND;\n$$;",
    "CALL transaction_test1();",
    "CREATE PROCEDURE transaction_test2()\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    r RECORD;\nBEGIN\n    FOR r IN SELECT * FROM test2 ORDER BY x LOOP\n        INSERT INTO test1 (a) VALUES (r.x);\n        COMMIT;\n    END LOOP;\nEND;\n$$;",
    "CALL transaction_test2();"
  ],
  "https://www.postgresql.org/docs/15/server-programming.html": [],
  "https://www.postgresql.org/docs/15/backup-manifest-format.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-ts-dict.html": [],
  "https://www.postgresql.org/docs/15/brin-builtin-opclasses.html": [],
  "https://www.postgresql.org/docs/15/progress-reporting.html": [],
  "https://www.postgresql.org/docs/15/upgrading.html": [],
  "https://www.postgresql.org/docs/15/sql-alterindex.html": [
    "ALTER INDEX distributors RENAME TO suppliers;",
    "ALTER INDEX distributors SET TABLESPACE fasttablespace;",
    "ALTER INDEX distributors SET (fillfactor = 75);",
    "REINDEX INDEX distributors;",
    "CREATE INDEX coord_idx ON measured (x, y, (z + t));",
    "ALTER INDEX coord_idx ALTER COLUMN 3 SET STATISTICS 1000;"
  ],
  "https://www.postgresql.org/docs/15/pgbuffercache.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-cancel-query.html": [
    "SELECT dblink_cancel_query('dtest1');"
  ],
  "https://www.postgresql.org/docs/15/auth-cert.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-allocate-descriptor.html": [
    "EXEC SQL ALLOCATE DESCRIPTOR mydesc;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-prepared-statements.html": [],
  "https://www.postgresql.org/docs/15/ecpg-preproc.html": [
    "EXEC SQL INCLUDE filename;",
    "EXEC SQL INCLUDE <filename>;",
    "EXEC SQL INCLUDE \"filename\";",
    "EXEC SQL DEFINE name;",
    "EXEC SQL DEFINE name value;",
    "EXEC SQL DEFINE HAVE_FEATURE;",
    "EXEC SQL DEFINE MYNUMBER 12;",
    "EXEC SQL DEFINE MYSTRING 'abc';",
    "EXEC SQL UNDEF MYNUMBER;",
    "EXEC SQL DEFINE MYNUMBER 12;",
    "EXEC SQL UPDATE Tbl SET col = MYNUMBER",
    "EXEC SQL ifdef TZVAR;",
    "EXEC SQL SET TIMEZONE TO TZVAR;",
    "EXEC SQL elif TZNAME;",
    "EXEC SQL SET TIMEZONE TO TZNAME;",
    "EXEC SQL else;",
    "EXEC SQL SET TIMEZONE TO 'GMT';",
    "EXEC SQL endif;"
  ],
  "https://www.postgresql.org/docs/15/queries-table-expressions.html": [
    "SELECT * FROM some_very_long_table_name s JOIN another_fairly_long_name a ON s.id = a.num;",
    "SELECT * FROM my_table AS m WHERE my_table.a > 5;",
    "SELECT * FROM people AS mother JOIN people AS child ON mother.id = child.mother_id;",
    "SELECT * FROM my_table AS a CROSS JOIN my_table AS b ...\nSELECT * FROM (my_table AS a CROSS JOIN my_table) AS b ...",
    "SELECT a.* FROM my_table AS a JOIN your_table AS b ON ...",
    "SELECT a.* FROM (my_table AS a JOIN your_table AS b ON ...) AS c",
    "FROM (SELECT * FROM table1) AS alias_name",
    "FROM (VALUES ('anne', 'smith'), ('bob', 'jones'), ('joe', 'blow'))\n     AS names(first, last)",
    "CREATE TABLE foo (fooid int, foosubid int, fooname text);",
    "CREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$\n    SELECT * FROM foo WHERE fooid = $1;\n$$ LANGUAGE SQL;",
    "SELECT * FROM getfoo(1) AS t1;",
    "SELECT * FROM foo\n    WHERE foosubid IN (\n                        SELECT foosubid\n                        FROM getfoo(foo.fooid) z\n                        WHERE z.fooid = foo.fooid\n                      );",
    "CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);",
    "SELECT * FROM vw_getfoo;",
    "SELECT *\n    FROM dblink('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc')\n      AS t1(proname name, prosrc text)\n    WHERE proname LIKE 'bytea%';",
    "SELECT *\nFROM ROWS FROM\n    (\n        json_to_recordset('[{\"a\":40,\"b\":\"foo\"},{\"a\":\"100\",\"b\":\"bar\"}]')\n            AS (a INTEGER, b TEXT),\n        generate_series(1, 3)\n    ) AS x (p, q, s)\nORDER BY p;",
    "SELECT * FROM foo, LATERAL (SELECT * FROM bar WHERE bar.id = foo.bar_id) ss;",
    "SELECT * FROM foo, bar WHERE bar.id = foo.bar_id;",
    "SELECT p1.id, p2.id, v1, v2\nFROM polygons p1, polygons p2,\n     LATERAL vertices(p1.poly) v1,\n     LATERAL vertices(p2.poly) v2\nWHERE (v1 <-> v2) < 10 AND p1.id != p2.id;",
    "SELECT p1.id, p2.id, v1, v2\nFROM polygons p1 CROSS JOIN LATERAL vertices(p1.poly) v1,\n     polygons p2 CROSS JOIN LATERAL vertices(p2.poly) v2\nWHERE (v1 <-> v2) < 10 AND p1.id != p2.id;",
    "SELECT m.name\nFROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true\nWHERE pname IS NULL;",
    "FROM a, b WHERE a.id = b.id AND b.val > 5",
    "FROM a INNER JOIN b ON (a.id = b.id) WHERE b.val > 5",
    "FROM a NATURAL JOIN b WHERE b.val > 5",
    "SELECT ... FROM fdt WHERE c1 > 5",
    "SELECT ... FROM fdt WHERE c1 IN (SELECT c1 FROM t2)",
    "SELECT ... FROM fdt WHERE c1 BETWEEN (SELECT c3 FROM t2 WHERE c2 = fdt.c1 + 10) AND 100",
    "SELECT product_id, p.name, (sum(s.units) * p.price) AS sales\n    FROM products p LEFT JOIN sales s USING (product_id)\n    GROUP BY product_id, p.name, p.price;",
    "SELECT product_id, p.name, (sum(s.units) * (p.price - p.cost)) AS profit\n    FROM products p LEFT JOIN sales s USING (product_id)\n    WHERE s.date > CURRENT_DATE - INTERVAL '4 weeks'\n    GROUP BY product_id, p.name, p.price, p.cost\n    HAVING sum(p.price * s.units) > 5000;",
    "ROLLUP ( e1, e2, e3, ... )",
    "GROUPING SETS (\n    ( e1, e2, e3, ... ),\n    ...\n    ( e1, e2 ),\n    ( e1 ),\n    ( )\n)",
    "CUBE ( e1, e2, ... )",
    "CUBE ( a, b, c )",
    "GROUPING SETS (\n    ( a, b, c ),\n    ( a, b    ),\n    ( a,    c ),\n    ( a       ),\n    (    b, c ),\n    (    b    ),\n    (       c ),\n    (         )\n)",
    "CUBE ( (a, b), (c, d) )",
    "GROUPING SETS (\n    ( a, b, c, d ),\n    ( a, b       ),\n    (       c, d ),\n    (            )\n)",
    "ROLLUP ( a, (b, c), d )",
    "GROUPING SETS (\n    ( a, b, c, d ),\n    ( a, b, c    ),\n    ( a          ),\n    (            )\n)",
    "GROUP BY a, CUBE (b, c), GROUPING SETS ((d), (e))",
    "GROUP BY GROUPING SETS (\n    (a, b, c, d), (a, b, c, e),\n    (a, b, d),    (a, b, e),\n    (a, c, d),    (a, c, e),\n    (a, d),       (a, e)\n)",
    "GROUP BY ROLLUP (a, b), ROLLUP (a, c)",
    "GROUP BY GROUPING SETS (\n    (a, b, c),\n    (a, b),\n    (a, b),\n    (a, c),\n    (a),\n    (a),\n    (a, c),\n    (a),\n    ()\n)",
    "GROUP BY DISTINCT ROLLUP (a, b), ROLLUP (a, c)",
    "GROUP BY GROUPING SETS (\n    (a, b, c),\n    (a, b),\n    (a, c),\n    (a),\n    ()\n)"
  ],
  "https://www.postgresql.org/docs/15/sql-createuser.html": [],
  "https://www.postgresql.org/docs/15/sql-dropextension.html": [
    "DROP EXTENSION hstore;"
  ],
  "https://www.postgresql.org/docs/15/functions-json.html": [],
  "https://www.postgresql.org/docs/15/datetime-keywords.html": [],
  "https://www.postgresql.org/docs/15/logical-replication-subscription.html": [
    "CREATE TABLE t1(a int, b text, PRIMARY KEY(a));",
    "CREATE TABLE\n CREATE TABLE t2(c int, d text, PRIMARY KEY(c));",
    "CREATE TABLE\n CREATE TABLE t3(e int, f text, PRIMARY KEY(e));",
    "CREATE TABLE",
    "CREATE TABLE t1(a int, b text, PRIMARY KEY(a));",
    "CREATE TABLE\n CREATE TABLE t2(c int, d text, PRIMARY KEY(c));",
    "CREATE TABLE\n CREATE TABLE t3(e int, f text, PRIMARY KEY(e));",
    "CREATE TABLE",
    "INSERT INTO t1 VALUES (1, 'one'), (2, 'two'), (3, 'three');",
    "INSERT 0 3\n INSERT INTO t2 VALUES (1, 'A'), (2, 'B'), (3, 'C');",
    "INSERT 0 3\n INSERT INTO t3 VALUES (1, 'i'), (2, 'ii'), (3, 'iii');",
    "INSERT 0 3",
    "CREATE PUBLICATION pub1 FOR TABLE t1;",
    "CREATE PUBLICATION\n CREATE PUBLICATION pub2 FOR TABLE t2 WITH (publish = 'truncate');",
    "CREATE PUBLICATION\n CREATE PUBLICATION pub3a FOR TABLE t3 WITH (publish = 'truncate');",
    "CREATE PUBLICATION\n CREATE PUBLICATION pub3b FOR TABLE t3 WHERE (e > 5);",
    "CREATE PUBLICATION",
    "CREATE SUBSCRIPTION sub1\ntest_sub-# CONNECTION 'host=localhost dbname=test_pub application_name=sub1'\ntest_sub-# PUBLICATION pub1;",
    "CREATE SUBSCRIPTION\n CREATE SUBSCRIPTION sub2\ntest_sub-# CONNECTION 'host=localhost dbname=test_pub application_name=sub2'\ntest_sub-# PUBLICATION pub2;",
    "CREATE SUBSCRIPTION\n CREATE SUBSCRIPTION sub3\ntest_sub-# CONNECTION 'host=localhost dbname=test_pub application_name=sub3'\ntest_sub-# PUBLICATION pub3a, pub3b;",
    "CREATE SUBSCRIPTION",
    "SELECT * FROM t1;",
    "SELECT * FROM t2",
    "SELECT * FROM t3;",
    "INSERT INTO t1 VALUES (4, 'four'), (5, 'five'), (6, 'six');",
    "INSERT 0 3\n INSERT INTO t2 VALUES (4, 'D'), (5, 'E'), (6, 'F');",
    "INSERT 0 3\n INSERT INTO t3 VALUES (4, 'iv'), (5, 'v'), (6, 'vi');",
    "INSERT 0 3",
    "SELECT * FROM t1;",
    "SELECT * FROM t2",
    "SELECT * FROM t3",
    "SELECT * FROM t1;",
    "SELECT * FROM t2",
    "SELECT * FROM t3"
  ],
  "https://www.postgresql.org/docs/15/hash-intro.html": [],
  "https://www.postgresql.org/docs/15/routine-reindex.html": [],
  "https://www.postgresql.org/docs/15/features.html": [],
  "https://www.postgresql.org/docs/15/functions-statistics.html": [
    "SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),\n                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts';"
  ],
  "https://www.postgresql.org/docs/15/textsearch-tables.html": [
    "SELECT title\nFROM pgweb\nWHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');",
    "SELECT title\nFROM pgweb\nWHERE to_tsvector(body) @@ to_tsquery('friend');",
    "SELECT title\nFROM pgweb\nWHERE to_tsvector(title || ' ' || body) @@ to_tsquery('create & table')\nORDER BY last_mod_date DESC\nLIMIT 10;",
    "CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', body));",
    "CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector(config_name, body));",
    "CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));",
    "ALTER TABLE pgweb\n    ADD COLUMN textsearchable_index_col tsvector\n               GENERATED ALWAYS AS (to_tsvector('english', coalesce(title, '') || ' ' || coalesce(body, ''))) STORED;",
    "CREATE INDEX textsearch_idx ON pgweb USING GIN (textsearchable_index_col);",
    "SELECT title\nFROM pgweb\nWHERE textsearchable_index_col @@ to_tsquery('create & table')\nORDER BY last_mod_date DESC\nLIMIT 10;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-informix-compat.html": [
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL FETCH MYCUR INTO :userid;",
    "EXEC SQL CLOSE DATABASE;",
    "EXEC SQL INCLUDE sqlda.h;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL PREPARE mystmt FROM :prep_stmt",
    "EXEC SQL DESCRIBE mystmt INTO sqlda;",
    "EXEC SQL DECLARE mycursor CURSOR FOR mystmt;",
    "EXEC SQL OPEN mycursor;",
    "EXEC SQL WHENEVER NOT FOUND GOTO out;",
    "EXEC SQL FETCH mycursor USING sqlda",
    "EXEC SQL CLOSE mycursor"
  ],
  "https://www.postgresql.org/docs/15/ddl-rowsecurity.html": [
    "CREATE TABLE accounts (manager text, company text, contact_email text);",
    "ALTER TABLE accounts ENABLE ROW LEVEL SECURITY;",
    "CREATE POLICY account_managers ON accounts TO managers\n    USING (manager = current_user);",
    "CREATE POLICY user_policy ON users\n    USING (user_name = current_user);",
    "CREATE POLICY user_sel_policy ON users\n    FOR SELECT\n    USING (true);",
    "CREATE POLICY user_mod_policy ON users\n    USING (user_name = current_user);",
    "CREATE TABLE passwd (\n  user_name             text UNIQUE NOT NULL,\n  pwhash                text,\n  uid                   int  PRIMARY KEY,\n  gid                   int  NOT NULL,\n  real_name             text NOT NULL,\n  home_phone            text,\n  extra_info            text,\n  home_dir              text NOT NULL,\n  shell                 text NOT NULL\n);",
    "CREATE ROLE admin;",
    "CREATE ROLE bob;",
    "CREATE ROLE alice;",
    "INSERT INTO passwd VALUES\n  ('admin','xxx',0,0,'Admin','111-222-3333',null,'/root','/bin/dash');",
    "INSERT INTO passwd VALUES\n  ('bob','xxx',1,1,'Bob','123-456-7890',null,'/home/bob','/bin/zsh');",
    "INSERT INTO passwd VALUES\n  ('alice','xxx',2,1,'Alice','098-765-4321',null,'/home/alice','/bin/zsh');",
    "ALTER TABLE passwd ENABLE ROW LEVEL SECURITY;",
    "CREATE POLICY admin_all ON passwd TO admin USING (true) WITH CHECK (true);",
    "CREATE POLICY all_view ON passwd FOR SELECT USING (true);",
    "CREATE POLICY user_mod ON passwd FOR UPDATE\n  USING (current_user = user_name)\n  WITH CHECK (\n    current_user = user_name AND\n    shell IN ('/bin/bash','/bin/sh','/bin/dash','/bin/zsh','/bin/tcsh')\n  );",
    "GRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin;",
    "GRANT SELECT\n  (user_name, uid, gid, real_name, home_phone, extra_info, home_dir, shell)\n  ON passwd TO public",
    "GRANT UPDATE\n  (pwhash, real_name, home_phone, extra_info, shell)\n  ON passwd TO public",
    "SET\n table passwd;",
    "SET\n table passwd;",
    "UPDATE 1\n update passwd set real_name = 'John Doe' where user_name = 'admin';",
    "UPDATE 0\n update passwd set shell = '/bin/xx';",
    "UPDATE 1",
    "CREATE POLICY admin_local_only ON passwd AS RESTRICTIVE TO admin\n    USING (pg_catalog.inet_client_addr() IS NULL);",
    "SELECT current_user;",
    "TABLE passwd",
    "UPDATE passwd set pwhash = NULL",
    "UPDATE 0",
    "CREATE TABLE groups (group_id int PRIMARY KEY,\n                     group_name text NOT NULL);",
    "INSERT INTO groups VALUES\n  (1, 'low'),\n  (2, 'medium'),\n  (5, 'high');",
    "GRANT ALL ON groups TO alice;",
    "GRANT SELECT ON groups TO public;",
    "CREATE TABLE users (user_name text PRIMARY KEY,\n                    group_id int NOT NULL REFERENCES groups);",
    "INSERT INTO users VALUES\n  ('alice', 5),\n  ('bob', 2),\n  ('mallory', 2);",
    "GRANT ALL ON users TO alice;",
    "GRANT SELECT ON users TO public;",
    "CREATE TABLE information (info text,\n                          group_id int NOT NULL REFERENCES groups);",
    "INSERT INTO information VALUES\n  ('barely secret', 1),\n  ('slightly secret', 2),\n  ('very secret', 5);",
    "ALTER TABLE information ENABLE ROW LEVEL SECURITY;",
    "CREATE POLICY fp_s ON information FOR SELECT\n  USING (group_id <= (SELECT group_id FROM users WHERE user_name = current_user));",
    "CREATE POLICY fp_u ON information FOR UPDATE\n  USING (group_id <= (SELECT group_id FROM users WHERE user_name = current_user));",
    "GRANT ALL ON information TO public;",
    "BEGIN;",
    "UPDATE users SET group_id = 1 WHERE user_name = 'mallory';",
    "UPDATE information SET info = 'secret from mallory' WHERE group_id = 2;",
    "COMMIT;",
    "SELECT * FROM information WHERE group_id = 2 FOR UPDATE;"
  ],
  "https://www.postgresql.org/docs/15/install-windows-full.html": [],
  "https://www.postgresql.org/docs/15/ecpg-dynamic.html": [
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL EXECUTE IMMEDIATE :stmt;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL PREPARE mystmt FROM :stmt;",
    "EXEC SQL EXECUTE mystmt USING 42, 'foobar'",
    "EXEC SQL DEALLOCATE PREPARE name;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "VARCHAR v3[50];",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL PREPARE mystmt FROM :stmt;",
    "EXEC SQL EXECUTE mystmt INTO :v1, :v2, :v3 USING 37",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb AS con1 USER testuser;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL PREPARE stmt1 FROM :stmt;",
    "EXEC SQL DECLARE cursor1 CURSOR FOR stmt1;",
    "EXEC SQL OPEN cursor1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH cursor1 INTO :dbaname,:datname",
    "EXEC SQL CLOSE cursor1",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;"
  ],
  "https://www.postgresql.org/docs/15/wal-intro.html": [],
  "https://www.postgresql.org/docs/15/functions-datetime.html": [
    "SELECT CURRENT_TIMESTAMP;",
    "SELECT now();",
    "SELECT TIMESTAMP 'now';",
    "SELECT pg_sleep(1.5);",
    "SELECT pg_sleep_for('5 minutes');",
    "SELECT pg_sleep_until('tomorrow 03:00');"
  ],
  "https://www.postgresql.org/docs/15/plpython-do.html": [
    "DO $$\n    # PL/Python code\n$$ LANGUAGE plpython3u"
  ],
  "https://www.postgresql.org/docs/15/brin.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execute-plan-extended.html": [],
  "https://www.postgresql.org/docs/15/contrib-prog.html": [],
  "https://www.postgresql.org/docs/15/triggers.html": [],
  "https://www.postgresql.org/docs/15/pltcl-transactions.html": [
    "CREATE PROCEDURE transaction_test1()\nLANGUAGE pltcl\nAS $$\nfor {set i 0} {$i < 10} {incr i} {\n    spi_exec \"INSERT INTO test1 (a) VALUES ($i)\"\n    if {$i % 2 == 0} {\n        commit\n    } else {\n        rollback\n    }\n}\n$$;",
    "CALL transaction_test1();"
  ],
  "https://www.postgresql.org/docs/15/sql-createindex.html": [
    "CREATE UNIQUE INDEX title_idx ON films (title);",
    "CREATE UNIQUE INDEX title_idx ON films (title) INCLUDE (director, rating);",
    "CREATE INDEX title_idx ON films (title) WITH (deduplicate_items = off);",
    "CREATE INDEX ON films ((lower(title)));",
    "CREATE INDEX title_idx_german ON films (title COLLATE \"de_DE\");",
    "CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);",
    "CREATE UNIQUE INDEX title_idx ON films (title) WITH (fillfactor = 70);",
    "CREATE INDEX gin_idx ON documents_table USING GIN (locations) WITH (fastupdate = off);",
    "CREATE INDEX code_idx ON films (code) TABLESPACE indexspace;",
    "CREATE INDEX pointloc\n    ON points USING gist (box(location,location));",
    "SELECT * FROM points\n    WHERE box(location,location) && '(0,0),(1,1)'::box;",
    "CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table (quantity);"
  ],
  "https://www.postgresql.org/docs/15/tutorial-advanced.html": [],
  "https://www.postgresql.org/docs/15/installation-platform-notes.html": [],
  "https://www.postgresql.org/docs/15/infoschema-user-mappings.html": [],
  "https://www.postgresql.org/docs/15/queries-limit.html": [],
  "https://www.postgresql.org/docs/15/infoschema-views.html": [],
  "https://www.postgresql.org/docs/15/app-vacuumdb.html": [],
  "https://www.postgresql.org/docs/15/sql-discard.html": [
    "CLOSE ALL;",
    "SET SESSION AUTHORIZATION DEFAULT;",
    "RESET ALL;",
    "DEALLOCATE ALL;",
    "UNLISTEN *;",
    "SELECT pg_advisory_unlock_all();",
    "DISCARD PLANS;",
    "DISCARD TEMP;",
    "DISCARD SEQUENCES;"
  ],
  "https://www.postgresql.org/docs/15/planner-optimizer.html": [],
  "https://www.postgresql.org/docs/15/view-pg-timezone-abbrevs.html": [],
  "https://www.postgresql.org/docs/15/sql-commands.html": [],
  "https://www.postgresql.org/docs/15/contrib-prog-server.html": [],
  "https://www.postgresql.org/docs/15/disk-full.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-amproc.html": [],
  "https://www.postgresql.org/docs/15/spgist-implementation.html": [],
  "https://www.postgresql.org/docs/15/install-windows.html": [],
  "https://www.postgresql.org/docs/15/auth-pg-hba-conf.html": [],
  "https://www.postgresql.org/docs/15/install-short.html": [],
  "https://www.postgresql.org/docs/15/pltcl-procnames.html": [],
  "https://www.postgresql.org/docs/15/sql-altermaterializedview.html": [
    "ALTER MATERIALIZED VIEW foo RENAME TO bar;"
  ],
  "https://www.postgresql.org/docs/15/datatype-xml.html": [
    "XMLPARSE (DOCUMENT '<?xml version=\"1.0\"?><book><title>Manual</title><chapter>...</chapter></book>')\nXMLPARSE (CONTENT 'abc<foo>bar</foo><bar>foo</bar>')"
  ],
  "https://www.postgresql.org/docs/15/sspi-auth.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-publication-rel.html": [],
  "https://www.postgresql.org/docs/15/view-pg-shmem-allocations.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execute-with-args.html": [],
  "https://www.postgresql.org/docs/15/postgres-user.html": [],
  "https://www.postgresql.org/docs/15/geqo-intro2.html": [],
  "https://www.postgresql.org/docs/15/sql-insert.html": [
    "INSERT INTO films VALUES\n    ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');",
    "INSERT INTO films (code, title, did, date_prod, kind)\n    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');",
    "INSERT INTO films VALUES\n    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes');",
    "INSERT INTO films (code, title, did, date_prod, kind)\n    VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama');",
    "INSERT INTO films DEFAULT VALUES;",
    "INSERT INTO films (code, title, did, date_prod, kind) VALUES\n    ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'),\n    ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy');",
    "INSERT INTO films SELECT * FROM tmp_films WHERE date_prod < '2004-05-07';",
    "INSERT INTO tictactoe (game, board[1:3][1:3])\n    VALUES (1, '{{\" \",\" \",\" \"},{\" \",\" \",\" \"},{\" \",\" \",\" \"}}');",
    "INSERT INTO tictactoe (game, board)\n    VALUES (2, '{{X,\" \",\" \"},{\" \",O,\" \"},{\" \",X,\" \"}}');",
    "INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets')\n   RETURNING did;",
    "WITH upd AS (\n  UPDATE employees SET sales_count = sales_count + 1 WHERE id =\n    (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')\n    RETURNING *\n)\nINSERT INTO employees_log SELECT *, current_timestamp FROM upd;",
    "INSERT INTO distributors (did, dname)\n    VALUES (5, 'Gizmo Transglobal'), (6, 'Associated Computing, Inc')\n    ON CONFLICT (did) DO UPDATE SET dname = EXCLUDED.dname;",
    "INSERT INTO distributors (did, dname) VALUES (7, 'Redline GmbH')\n    ON CONFLICT (did) DO NOTHING;",
    "INSERT INTO distributors AS d (did, dname) VALUES (8, 'Anvil Distribution')\n    ON CONFLICT (did) DO UPDATE\n    SET dname = EXCLUDED.dname || ' (formerly ' || d.dname || ')'\n    WHERE d.zipcode <> '21201';",
    "INSERT INTO distributors (did, dname) VALUES (9, 'Antwerp Design')\n    ON CONFLICT ON CONSTRAINT distributors_pkey DO NOTHING;",
    "INSERT INTO distributors (did, dname) VALUES (10, 'Conrad International')\n    ON CONFLICT (did) WHERE is_active DO NOTHING;"
  ],
  "https://www.postgresql.org/docs/15/recovery-config.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-tablespace.html": [],
  "https://www.postgresql.org/docs/15/sql-copy.html": [
    "COPY country TO STDOUT (DELIMITER '|');",
    "COPY country FROM '/usr1/proj/bray/sql/country_data';",
    "COPY (SELECT * FROM country WHERE country_name LIKE 'A%') TO '/usr1/proj/bray/sql/a_list_countries.copy';",
    "COPY country TO PROGRAM 'gzip > /usr1/proj/bray/sql/country_data.gz';",
    "AF      AFGHANISTAN\nAL      ALBANIA\nDZ      ALGERIA\nZM      ZAMBIA\nZW      ZIMBABWE"
  ],
  "https://www.postgresql.org/docs/15/indexes.html": [],
  "https://www.postgresql.org/docs/15/infoschema-schema.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-open-with-paramlist.html": [],
  "https://www.postgresql.org/docs/15/infoschema-collations.html": [],
  "https://www.postgresql.org/docs/15/btree-support-funcs.html": [],
  "https://www.postgresql.org/docs/15/functions-info.html": [
    "SELECT has_table_privilege('myschema.mytable', 'select');",
    "SELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');",
    "SELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');",
    "SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);",
    "SELECT pg_type_is_visible('myschema.widget'::regtype);",
    "SELECT currval(pg_get_serial_sequence('sometable', 'id'));",
    "SELECT pg_typeof(33);",
    "SELECT typlen FROM pg_type WHERE oid = pg_typeof(33)",
    "SELECT collation for (description) FROM pg_description LIMIT 1;",
    "SELECT collation for ('foo' COLLATE \"de_DE\")"
  ],
  "https://www.postgresql.org/docs/15/functions-comparisons.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-aggregate.html": [],
  "https://www.postgresql.org/docs/15/spi-realloc.html": [],
  "https://www.postgresql.org/docs/15/datetime-input-rules.html": [],
  "https://www.postgresql.org/docs/15/infoschema-key-column-usage.html": [],
  "https://www.postgresql.org/docs/15/diskusage.html": [],
  "https://www.postgresql.org/docs/15/sql-alterschema.html": [],
  "https://www.postgresql.org/docs/15/infoschema-character-sets.html": [],
  "https://www.postgresql.org/docs/15/plpgsql.html": [],
  "https://www.postgresql.org/docs/15/libpq-connect.html": [],
  "https://www.postgresql.org/docs/15/xoper.html": [
    "CREATE FUNCTION complex_add(complex, complex)\n    RETURNS complex\n    AS 'filename', 'complex_add'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE OPERATOR + (\n    leftarg = complex,\n    rightarg = complex,\n    function = complex_add,\n    commutator = +\n);"
  ],
  "https://www.postgresql.org/docs/15/sql-prepare.html": [
    "EXPLAIN EXECUTE name(parameter_values);",
    "PREPARE fooplan (int, text, bool, numeric) AS\n    INSERT INTO foo VALUES($1, $2, $3, $4)",
    "EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);",
    "PREPARE usrrptplan (int) AS\n    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid\n    AND l.date = $2",
    "EXECUTE usrrptplan(1, current_date);"
  ],
  "https://www.postgresql.org/docs/15/sql-commit.html": [
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-sql-sizing.html": [],
  "https://www.postgresql.org/docs/15/pltcl-config.html": [],
  "https://www.postgresql.org/docs/15/rules-update.html": [
    "CREATE [ OR REPLACE ] RULE name AS ON event\n    TO table [ WHERE condition ]\n    DO [ ALSO | INSTEAD ] { NOTHING | command | ( command ; command ... ) }",
    "CREATE TABLE shoelace_log (\n    sl_name    text,\nsl_avail   integer,\nlog_who    text,\nlog_when   timestamp\n);",
    "CREATE RULE log_shoelace AS ON UPDATE TO shoelace_data\n    WHERE NEW.sl_avail <> OLD.sl_avail\n    DO INSERT INTO shoelace_log VALUES (\n                                    NEW.sl_name,\n                                    NEW.sl_avail,\n                                    current_user,\n                                    current_timestamp\n                                );",
    "UPDATE shoelace_data SET sl_avail = 6 WHERE sl_name = 'sl7';",
    "SELECT * FROM shoelace_log;",
    "UPDATE shoelace_data SET sl_avail = 6\n  FROM shoelace_data shoelace_data\n WHERE shoelace_data.sl_name = 'sl7';",
    "INSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old;",
    "INSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data;",
    "INSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE new.sl_avail <> old.sl_avail;",
    "INSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE new.sl_avail <> old.sl_avail\n   AND shoelace_data.sl_name = 'sl7';",
    "INSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, 6,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE 6 <> old.sl_avail\n   AND shoelace_data.sl_name = 'sl7';",
    "INSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, 6,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE 6 <> shoelace_data.sl_avail\n   AND shoelace_data.sl_name = 'sl7';",
    "INSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, 6,\n       current_user, current_timestamp )\n  FROM shoelace_data\n WHERE 6 <> shoelace_data.sl_avail\n   AND shoelace_data.sl_name = 'sl7';",
    "UPDATE shoelace_data SET sl_avail = 6\n WHERE sl_name = 'sl7';",
    "UPDATE shoelace_data SET sl_color = 'green'\n WHERE sl_name = 'sl7';",
    "INSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, shoelace_data.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data\n WHERE shoelace_data.sl_avail <> shoelace_data.sl_avail\n   AND shoelace_data.sl_name = 'sl7';",
    "UPDATE shoelace_data SET sl_avail = 0\n WHERE sl_color = 'black';",
    "INSERT INTO shoelace_log\nSELECT shoelace_data.sl_name, 0,\n       current_user, current_timestamp\n  FROM shoelace_data\n WHERE 0 <> shoelace_data.sl_avail\n   AND shoelace_data.sl_color = 'black';",
    "CREATE RULE shoe_ins_protect AS ON INSERT TO shoe\n    DO INSTEAD NOTHING;",
    "CREATE RULE shoe_upd_protect AS ON UPDATE TO shoe\n    DO INSTEAD NOTHING;",
    "CREATE RULE shoe_del_protect AS ON DELETE TO shoe\n    DO INSTEAD NOTHING;",
    "CREATE RULE shoelace_ins AS ON INSERT TO shoelace\n    DO INSTEAD\n    INSERT INTO shoelace_data VALUES (\n           NEW.sl_name,\n           NEW.sl_avail,\n           NEW.sl_color,\n           NEW.sl_len,\n           NEW.sl_unit\n    );",
    "CREATE RULE shoelace_upd AS ON UPDATE TO shoelace\n    DO INSTEAD\n    UPDATE shoelace_data\n       SET sl_name = NEW.sl_name,\n           sl_avail = NEW.sl_avail,\n           sl_color = NEW.sl_color,\n           sl_len = NEW.sl_len,\n           sl_unit = NEW.sl_unit\n     WHERE sl_name = OLD.sl_name;",
    "CREATE RULE shoelace_del AS ON DELETE TO shoelace\n    DO INSTEAD\n    DELETE FROM shoelace_data\n     WHERE sl_name = OLD.sl_name;",
    "CREATE RULE shoelace_ins AS ON INSERT TO shoelace\n    DO INSTEAD\n    INSERT INTO shoelace_data VALUES (\n           NEW.sl_name,\n           NEW.sl_avail,\n           NEW.sl_color,\n           NEW.sl_len,\n           NEW.sl_unit\n    )\n    RETURNING\n           shoelace_data.*,\n           (SELECT shoelace_data.sl_len * u.un_fact\n            FROM unit u WHERE shoelace_data.sl_unit = u.un_name);",
    "CREATE TABLE shoelace_arrive (\n    arr_name    text,\n    arr_quant   integer\n);",
    "CREATE TABLE shoelace_ok (\n    ok_name     text,\n    ok_quant    integer\n);",
    "CREATE RULE shoelace_ok_ins AS ON INSERT TO shoelace_ok\n    DO INSTEAD\n    UPDATE shoelace\n       SET sl_avail = sl_avail + NEW.ok_quant\n     WHERE sl_name = NEW.ok_name;",
    "SELECT * FROM shoelace_arrive;",
    "SELECT * FROM shoelace;",
    "INSERT INTO shoelace_ok SELECT * FROM shoelace_arrive;",
    "SELECT * FROM shoelace ORDER BY sl_name;",
    "SELECT * FROM shoelace_log",
    "INSERT INTO shoelace_ok\nSELECT shoelace_arrive.arr_name, shoelace_arrive.arr_quant\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok;",
    "UPDATE shoelace\n   SET sl_avail = shoelace.sl_avail + shoelace_arrive.arr_quant\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace\n WHERE shoelace.sl_name = shoelace_arrive.arr_name;",
    "UPDATE shoelace_data\n   SET sl_name = shoelace.sl_name,\n       sl_avail = shoelace.sl_avail + shoelace_arrive.arr_quant,\n       sl_color = shoelace.sl_color,\n       sl_len = shoelace.sl_len,\n       sl_unit = shoelace.sl_unit\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace, shoelace old,\n       shoelace new, shoelace_data shoelace_data\n WHERE shoelace.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = shoelace.sl_name;",
    "UPDATE shoelace_data\n   SET sl_name = s.sl_name,\n       sl_avail = s.sl_avail + shoelace_arrive.arr_quant,\n       sl_color = s.sl_color,\n       sl_len = s.sl_len,\n       sl_unit = s.sl_unit\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace, shoelace old,\n       shoelace new, shoelace_data shoelace_data,\n       shoelace old, shoelace new,\n       shoelace_data s, unit u\n WHERE s.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = s.sl_name;",
    "INSERT INTO shoelace_log\nSELECT s.sl_name,\n       s.sl_avail + shoelace_arrive.arr_quant,\n       current_user,\n       current_timestamp\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace, shoelace old,\n       shoelace new, shoelace_data shoelace_data,\n       shoelace old, shoelace new,\n       shoelace_data s, unit u,\n       shoelace_data old, shoelace_data new\n       shoelace_log shoelace_log\n WHERE s.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = s.sl_name\n   AND (s.sl_avail + shoelace_arrive.arr_quant) <> s.sl_avail;",
    "INSERT INTO shoelace_log\nSELECT s.sl_name,\n       s.sl_avail + shoelace_arrive.arr_quant,\n       current_user,\n       current_timestamp\n  FROM shoelace_arrive shoelace_arrive, shoelace_data shoelace_data,\n       shoelace_data s\n WHERE s.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = s.sl_name\n   AND s.sl_avail + shoelace_arrive.arr_quant <> s.sl_avail;",
    "UPDATE shoelace_data\n   SET sl_avail = shoelace_data.sl_avail + shoelace_arrive.arr_quant\n  FROM shoelace_arrive shoelace_arrive,\n       shoelace_data shoelace_data,\n       shoelace_data s\n WHERE s.sl_name = shoelace_arrive.sl_name\n   AND shoelace_data.sl_name = s.sl_name;",
    "INSERT INTO shoelace VALUES ('sl9', 0, 'pink', 35.0, 'inch', 0.0);",
    "INSERT INTO shoelace VALUES ('sl10', 1000, 'magenta', 40.0, 'inch', 0.0);",
    "CREATE VIEW shoelace_mismatch AS\n    SELECT * FROM shoelace WHERE NOT EXISTS\n        (SELECT shoename FROM shoe WHERE slcolor = sl_color);",
    "SELECT * FROM shoelace_mismatch;",
    "CREATE VIEW shoelace_can_delete AS\n    SELECT * FROM shoelace_mismatch WHERE sl_avail = 0;",
    "DELETE FROM shoelace WHERE EXISTS\n    (SELECT * FROM shoelace_can_delete\n             WHERE sl_name = shoelace.sl_name);",
    "SELECT * FROM shoelace;"
  ],
  "https://www.postgresql.org/docs/15/monitoring.html": [],
  "https://www.postgresql.org/docs/15/infoschema-domain-udt-usage.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-commands.html": [],
  "https://www.postgresql.org/docs/15/infoschema-foreign-server-options.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-register-relation.html": [],
  "https://www.postgresql.org/docs/15/monitoring-ps.html": [],
  "https://www.postgresql.org/docs/15/role-removal.html": [
    "ALTER TABLE bobs_table OWNER TO alice;",
    "REASSIGN OWNED BY doomed_role TO successor_role;",
    "DROP OWNED BY doomed_role;",
    "DROP ROLE doomed_role;"
  ],
  "https://www.postgresql.org/docs/15/ltree.html": [
    "CREATE INDEX path_gist_idx ON test USING GIST (path);",
    "CREATE INDEX path_gist_idx ON test USING GIST (path gist_ltree_ops(siglen=100));",
    "CREATE INDEX path_gist_idx ON test USING GIST (array_path);",
    "CREATE INDEX path_gist_idx ON test USING GIST (array_path gist__ltree_ops(siglen=100));",
    "CREATE TABLE test (path ltree);",
    "INSERT INTO test VALUES ('Top');",
    "INSERT INTO test VALUES ('Top.Science');",
    "INSERT INTO test VALUES ('Top.Science.Astronomy');",
    "INSERT INTO test VALUES ('Top.Science.Astronomy.Astrophysics');",
    "INSERT INTO test VALUES ('Top.Science.Astronomy.Cosmology');",
    "INSERT INTO test VALUES ('Top.Hobbies');",
    "INSERT INTO test VALUES ('Top.Hobbies.Amateurs_Astronomy');",
    "INSERT INTO test VALUES ('Top.Collections');",
    "INSERT INTO test VALUES ('Top.Collections.Pictures');",
    "INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy');",
    "INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Stars');",
    "INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Galaxies');",
    "INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Astronauts');",
    "CREATE INDEX path_gist_idx ON test USING GIST (path);",
    "CREATE INDEX path_idx ON test USING BTREE (path);"
  ],
  "https://www.postgresql.org/docs/15/sql-dropsequence.html": [
    "DROP SEQUENCE serial;"
  ],
  "https://www.postgresql.org/docs/15/auth-password.html": [],
  "https://www.postgresql.org/docs/15/sql-dropforeigndatawrapper.html": [
    "DROP FOREIGN DATA WRAPPER dbi;"
  ],
  "https://www.postgresql.org/docs/15/textsearch-indexes.html": [],
  "https://www.postgresql.org/docs/15/lo-intro.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-exec.html": [],
  "https://www.postgresql.org/docs/15/sql-alterprocedure.html": [
    "ALTER PROCEDURE insert_data(integer, integer) RENAME TO insert_record;",
    "ALTER PROCEDURE insert_data(integer, integer) OWNER TO joe;",
    "ALTER PROCEDURE insert_data(integer, integer) SET SCHEMA accounting;",
    "ALTER PROCEDURE insert_data(integer, integer) DEPENDS ON EXTENSION myext;",
    "ALTER PROCEDURE check_password(text) SET search_path = admin, pg_temp;",
    "ALTER PROCEDURE check_password(text) RESET search_path;"
  ],
  "https://www.postgresql.org/docs/15/libpq-misc.html": [],
  "https://www.postgresql.org/docs/15/sql-lock.html": [
    "BEGIN WORK;",
    "LOCK TABLE films IN SHARE MODE;",
    "SELECT id FROM films\n    WHERE name = 'Star Wars: Episode I - The Phantom Menace';",
    "INSERT INTO films_user_comments VALUES\n    (_id_, 'GREAT! I was waiting for it for so long!');",
    "COMMIT WORK;",
    "BEGIN WORK;",
    "LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;",
    "DELETE FROM films_user_comments WHERE id IN\n    (SELECT id FROM films WHERE rating < 5);",
    "DELETE FROM films WHERE rating < 5;",
    "COMMIT WORK;"
  ],
  "https://www.postgresql.org/docs/15/bki-structure.html": [],
  "https://www.postgresql.org/docs/15/fdwhandler.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-largeobject-metadata.html": [],
  "https://www.postgresql.org/docs/15/tutorial-sql-intro.html": [],
  "https://www.postgresql.org/docs/15/sql-altertsparser.html": [],
  "https://www.postgresql.org/docs/15/error-message-reporting.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-authid.html": [],
  "https://www.postgresql.org/docs/15/app-clusterdb.html": [],
  "https://www.postgresql.org/docs/15/sql-createextension.html": [
    "CREATE EXTENSION hstore SCHEMA addons;",
    "SET search_path = addons;",
    "CREATE EXTENSION hstore;"
  ],
  "https://www.postgresql.org/docs/15/mvcc-caveats.html": [],
  "https://www.postgresql.org/docs/15/libpq-status.html": [
    "SSL *ssl"
  ],
  "https://www.postgresql.org/docs/15/infoschema-schemata.html": [],
  "https://www.postgresql.org/docs/15/functions-sequence.html": [
    "SELECT setval('myseq', 42);",
    "SELECT setval('myseq', 42, true)",
    "SELECT setval('myseq', 42, false)"
  ],
  "https://www.postgresql.org/docs/15/how-parallel-query-works.html": [],
  "https://www.postgresql.org/docs/15/btree-gist.html": [
    "CREATE TABLE test (a int4);",
    "CREATE INDEX testidx ON test USING GIST (a);",
    "SELECT * FROM test WHERE a < 10;",
    "SELECT *, a <-> 42 AS dist FROM test ORDER BY a <-> 42 LIMIT 10;",
    "CREATE TABLE zoo (\n  cage   INTEGER,\n  animal TEXT,\n  EXCLUDE USING GIST (cage WITH =, animal WITH <>)\n);",
    "INSERT INTO zoo VALUES(123, 'zebra');",
    "INSERT 0 1\n INSERT INTO zoo VALUES(123, 'zebra');",
    "INSERT 0 1\n INSERT INTO zoo VALUES(123, 'lion');",
    "INSERT INTO zoo VALUES(124, 'lion')",
    "INSERT 0 1"
  ],
  "https://www.postgresql.org/docs/15/oid2name.html": [],
  "https://www.postgresql.org/docs/15/tutorial-sql.html": [],
  "https://www.postgresql.org/docs/15/typeconv-union-case.html": [],
  "https://www.postgresql.org/docs/15/logical-replication-monitoring.html": [],
  "https://www.postgresql.org/docs/15/event-trigger-example.html": [
    "CREATE FUNCTION noddl() RETURNS event_trigger\n    AS 'noddl' LANGUAGE C;",
    "CREATE EVENT TRIGGER noddl ON ddl_command_start\n    EXECUTE FUNCTION noddl();",
    "BEGIN;",
    "ALTER EVENT TRIGGER noddl DISABLE;",
    "CREATE TABLE foo (id serial);",
    "ALTER EVENT TRIGGER noddl ENABLE;",
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/logicaldecoding-walsender.html": [],
  "https://www.postgresql.org/docs/15/archive-module-init.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-type.html": [
    "EXEC SQL TYPE customer IS\n    struct\n    {\n        varchar name[50]",
    "EXEC SQL TYPE cust_ind IS\n    struct ind\n    {\n        short   name_ind",
    "EXEC SQL TYPE c IS char reference;",
    "EXEC SQL TYPE ind IS union { int integer;",
    "EXEC SQL TYPE intarray IS int[AMOUNT];",
    "EXEC SQL TYPE str IS varchar[BUFFERSIZ];",
    "EXEC SQL TYPE string IS char[11];",
    "EXEC SQL WHENEVER SQLERROR SQLPRINT;",
    "EXEC SQL TYPE tt IS\n    struct\n    {\n        varchar v[256]",
    "EXEC SQL TYPE tt_ind IS\n    struct ind {\n        short   v_ind",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb AS con1;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT current_database(), 256 INTO :t:t_ind LIMIT 1;",
    "EXEC SQL DISCONNECT con1;"
  ],
  "https://www.postgresql.org/docs/15/logfile-maintenance.html": [],
  "https://www.postgresql.org/docs/15/gist-implementation.html": [],
  "https://www.postgresql.org/docs/15/creating-cluster.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-palloc.html": [],
  "https://www.postgresql.org/docs/15/sql-altergroup.html": [
    "ALTER GROUP staff ADD USER karl, john;",
    "ALTER GROUP workers DROP USER beth;"
  ],
  "https://www.postgresql.org/docs/15/queries.html": [],
  "https://www.postgresql.org/docs/15/auth-radius.html": [],
  "https://www.postgresql.org/docs/15/app-dropuser.html": [],
  "https://www.postgresql.org/docs/15/app-pg-isready.html": [],
  "https://www.postgresql.org/docs/15/view-pg-available-extension-versions.html": [],
  "https://www.postgresql.org/docs/15/brin-intro.html": [],
  "https://www.postgresql.org/docs/15/contrib-spi.html": [],
  "https://www.postgresql.org/docs/15/app-pgdump.html": [
    "CREATE DATABASE foo WITH TEMPLATE template0;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-develop.html": [
    "EXEC SQL OPEN cursor;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL SELECT res INTO :result FROM mytable WHERE index = :index"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-user-mapping.html": [],
  "https://www.postgresql.org/docs/15/tutorial-select.html": [
    "SELECT * FROM weather;",
    "SELECT city, temp_lo, temp_hi, prcp, date FROM weather;",
    "SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;",
    "SELECT * FROM weather\n    WHERE city = 'San Francisco' AND prcp > 0.0;",
    "SELECT * FROM weather\n    ORDER BY city;",
    "SELECT * FROM weather\n    ORDER BY city, temp_lo;",
    "SELECT DISTINCT city\n    FROM weather;",
    "SELECT DISTINCT city\n    FROM weather\n    ORDER BY city;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-attributes.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-finish.html": [],
  "https://www.postgresql.org/docs/15/sql-altertype.html": [
    "ALTER TYPE electronic_mail RENAME TO email;",
    "ALTER TYPE email OWNER TO joe;",
    "ALTER TYPE email SET SCHEMA customers;",
    "ALTER TYPE compfoo ADD ATTRIBUTE f3 int;",
    "ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';",
    "ALTER TYPE colors RENAME VALUE 'purple' TO 'mauve';",
    "CREATE FUNCTION mytypesend(mytype) RETURNS bytea ...;",
    "CREATE FUNCTION mytyperecv(internal, oid, integer) RETURNS mytype ...;",
    "ALTER TYPE mytype SET (\n    SEND = mytypesend,\n    RECEIVE = mytyperecv\n);"
  ],
  "https://www.postgresql.org/docs/15/runtime-config-wal.html": [],
  "https://www.postgresql.org/docs/15/infoschema-role-udt-grants.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-gettype.html": [],
  "https://www.postgresql.org/docs/15/sql-dropindex.html": [
    "DROP INDEX title_idx;"
  ],
  "https://www.postgresql.org/docs/15/datetime-julian-dates.html": [
    "SELECT extract(julian from '2021-06-23 7:00:00-04'::timestamptz at time zone 'UTC+12');",
    "SELECT extract(julian from '2021-06-23 8:00:00-04'::timestamptz at time zone 'UTC+12')",
    "SELECT extract(julian from date '2021-06-23')"
  ],
  "https://www.postgresql.org/docs/15/release-15.html": [],
  "https://www.postgresql.org/docs/15/sql-grant.html": [
    "GRANT INSERT ON films TO PUBLIC;",
    "GRANT ALL PRIVILEGES ON kinds TO manuel;",
    "GRANT admins TO joe;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-config.html": [],
  "https://www.postgresql.org/docs/15/gin-builtin-opclasses.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-amop.html": [],
  "https://www.postgresql.org/docs/15/libpq-notice-processing.html": [],
  "https://www.postgresql.org/docs/15/protocol-changes.html": [],
  "https://www.postgresql.org/docs/15/datatype-binary.html": [
    "SELECT '\\xDEADBEEF';",
    "SET bytea_output = 'escape';",
    "SELECT 'abc \\153\\154\\155 \\052\\251\\124'::bytea;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-indexes.html": [],
  "https://www.postgresql.org/docs/15/tutorial-populate.html": [
    "INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');",
    "INSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');",
    "INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)\n    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');",
    "INSERT INTO weather (date, city, temp_hi, temp_lo)\n    VALUES ('1994-11-29', 'Hayward', 54, 37);",
    "COPY weather FROM '/home/user/weather.txt';"
  ],
  "https://www.postgresql.org/docs/15/sql-analyze.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-getargcount.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-copytuple.html": [],
  "https://www.postgresql.org/docs/15/plpython-funcs.html": [
    "CREATE FUNCTION funcname (argument-list)\n  RETURNS return-type\nAS $$\n  # PL/Python function body\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION pymax (a integer, b integer)\n  RETURNS integer\nAS $$\n  if a > b:\n    return a\n  return b\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION pystrip(x text)\n  RETURNS text\nAS $$\n  x = x.strip()  # error\n  return x\n$$ LANGUAGE plpython3u;",
    "CREATE FUNCTION pystrip(x text)\n  RETURNS text\nAS $$\n  global x\n  x = x.strip()  # ok now\n  return x\n$$ LANGUAGE plpython3u;"
  ],
  "https://www.postgresql.org/docs/15/ecpg.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-attribute.html": [],
  "https://www.postgresql.org/docs/15/event-trigger-definition.html": [],
  "https://www.postgresql.org/docs/15/sql-commit-prepared.html": [
    "COMMIT PREPARED 'foobar';"
  ],
  "https://www.postgresql.org/docs/15/sql-altertablespace.html": [
    "ALTER TABLESPACE index_space RENAME TO fast_raid;",
    "ALTER TABLESPACE index_space OWNER TO mary;"
  ],
  "https://www.postgresql.org/docs/15/textsearch-parsers.html": [],
  "https://www.postgresql.org/docs/15/client-interfaces.html": [],
  "https://www.postgresql.org/docs/15/sql-createtstemplate.html": [],
  "https://www.postgresql.org/docs/15/sql-droptsparser.html": [
    "DROP TEXT SEARCH PARSER my_parser;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-seclabel.html": [],
  "https://www.postgresql.org/docs/15/libpq-notify.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-transform.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-var.html": [
    "EXEC SQL VAR a IS int;"
  ],
  "https://www.postgresql.org/docs/15/pgvisibility.html": [],
  "https://www.postgresql.org/docs/15/sql-reassign-owned.html": [],
  "https://www.postgresql.org/docs/15/auth-pam.html": [],
  "https://www.postgresql.org/docs/15/nls-programmer.html": [],
  "https://www.postgresql.org/docs/15/brin-extensibility.html": [],
  "https://www.postgresql.org/docs/15/app-dropdb.html": [],
  "https://www.postgresql.org/docs/15/replication-origins.html": [],
  "https://www.postgresql.org/docs/15/functions-matching.html": [
    "SELECT regexp_match('foobarbequebaz', 'bar.*que');",
    "SELECT regexp_match('foobarbequebaz', '(bar)(beque)')",
    "SELECT (regexp_match('foobarbequebaz', 'bar.*que'))[1];",
    "SELECT regexp_matches('foo', 'not there');",
    "SELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g')",
    "SELECT col1, (SELECT regexp_matches(col2, '(bar)(beque)')) FROM tab;",
    "SELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '\\s+') AS foo;",
    "SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '\\s+')",
    "SELECT foo FROM regexp_split_to_table('the quick brown fox', '\\s*') AS foo",
    "FGH"
  ],
  "https://www.postgresql.org/docs/15/regress.html": [],
  "https://www.postgresql.org/docs/15/wal-reliability.html": [],
  "https://www.postgresql.org/docs/15/gin-limit.html": [],
  "https://www.postgresql.org/docs/15/textsearch-debugging.html": [
    "CREATE TEXT SEARCH CONFIGURATION public.english ( COPY = pg_catalog.english );",
    "CREATE TEXT SEARCH DICTIONARY english_ispell (\n    TEMPLATE = ispell,\n    DictFile = english,\n    AffFile = english,\n    StopWords = english\n);",
    "ALTER TEXT SEARCH CONFIGURATION public.english\n   ALTER MAPPING FOR asciiword WITH english_ispell, english_stem;"
  ],
  "https://www.postgresql.org/docs/15/sql-dropopfamily.html": [
    "DROP OPERATOR FAMILY float_ops USING btree;"
  ],
  "https://www.postgresql.org/docs/15/color.html": [],
  "https://www.postgresql.org/docs/15/datatype-textsearch.html": [
    "SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;",
    "SELECT $$the lexeme '    ' contains spaces$$::tsvector;",
    "SELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;",
    "SELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;",
    "SELECT 'a:1A fat:2B,4C cat:5D'::tsvector;",
    "SELECT 'The Fat Rats'::tsvector;",
    "SELECT to_tsvector('english', 'The Fat Rats');",
    "SELECT 'fat & rat'::tsquery;",
    "SELECT 'fat & (rat | cat)'::tsquery",
    "SELECT 'fat & rat & ! cat'::tsquery",
    "SELECT 'fat:ab & cat'::tsquery;",
    "SELECT 'super:*'::tsquery;",
    "SELECT to_tsquery('Fat:ab & Cats');",
    "SELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );",
    "SELECT to_tsvector( 'postgraduate' ), to_tsquery( 'postgres:*' );"
  ],
  "https://www.postgresql.org/docs/15/event-trigger-matrix.html": [],
  "https://www.postgresql.org/docs/15/pltcl-error-handling.html": [],
  "https://www.postgresql.org/docs/15/logicaldecoding-two-phase-commits.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-freeplan.html": [],
  "https://www.postgresql.org/docs/15/sql-alterpublication.html": [
    "ALTER PUBLICATION noinsert SET (publish = 'update, delete');",
    "ALTER PUBLICATION mypublication ADD TABLE users (user_id, firstname), departments;",
    "ALTER PUBLICATION mypublication SET TABLE users (user_id, firstname, lastname), TABLE departments;",
    "ALTER PUBLICATION sales_publication ADD TABLES IN SCHEMA marketing, sales;",
    "ALTER PUBLICATION production_publication ADD TABLE users, departments, TABLES IN SCHEMA production;"
  ],
  "https://www.postgresql.org/docs/15/dict-int.html": [
    "ALTER TEXT SEARCH DICTIONARY",
    "ALTER TEXT SEARCH CONFIGURATION english\n    ALTER MAPPING FOR int, uint WITH intdict;"
  ],
  "https://www.postgresql.org/docs/15/app-pgcontroldata.html": [],
  "https://www.postgresql.org/docs/15/extend-type-system.html": [
    "CREATE FUNCTION myfunc(a anyelement, b anyelement,\n                       c anycompatible, d anycompatible)\nRETURNS anycompatible AS ..."
  ],
  "https://www.postgresql.org/docs/15/sql-createpolicy.html": [
    "AND\nexpression from RESTRICTIVE SELECT/ALL policy 2\nAND\n...\nAND\n(\n  expression from PERMISSIVE SELECT/ALL policy 1\n  OR\n  expression from PERMISSIVE SELECT/ALL policy 2\n  OR\n  ...\n)\nAND\nexpression from RESTRICTIVE UPDATE/ALL policy 1\nAND\nexpression from RESTRICTIVE UPDATE/ALL policy 2\nAND\n...\nAND\n(\n  expression from PERMISSIVE UPDATE/ALL policy 1\n  OR\n  expression from PERMISSIVE UPDATE/ALL policy 2\n  OR\n  ...\n)"
  ],
  "https://www.postgresql.org/docs/15/extend-extensions.html": [
    "SET LOCAL search_path TO @extschema@, pg_temp;",
    "CREATE TABLE my_config (key text, value text);",
    "CREATE SEQUENCE my_config_seq;",
    "SELECT pg_catalog.pg_extension_config_dump('my_config', '');",
    "SELECT pg_catalog.pg_extension_config_dump('my_config_seq', '');",
    "CREATE TABLE my_config (key text, value text, standard_entry boolean);",
    "SELECT pg_catalog.pg_extension_config_dump('my_config', 'WHERE NOT standard_entry');",
    "SELECT * FROM pg_extension_update_paths('extension_name');",
    "CREATE TYPE pair AS ( k text, v text )",
    "CREATE FUNCTION pair(text, text)\nRETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::@extschema@.pair;';",
    "CREATE OPERATOR ~> (LEFTARG = text, RIGHTARG = text, FUNCTION = pair);",
    "CREATE FUNCTION lower(pair)\nRETURNS pair LANGUAGE SQL\nAS 'SELECT ROW(lower($1.k), lower($1.v))::@extschema@.pair;'\nSET search_path = pg_temp;",
    "CREATE FUNCTION pair_concat(pair, pair)\nRETURNS pair LANGUAGE SQL\nAS 'SELECT ROW($1.k OPERATOR(pg_catalog.||) $2.k,\n               $1.v OPERATOR(pg_catalog.||) $2.v)::@extschema@.pair;';",
    "EXTENSION = pair\nDATA = pair",
    "PGXS := $(shell $(PG_CONFIG)\ninclude $(PGXS)"
  ],
  "https://www.postgresql.org/docs/15/contrib-dblink-build-sql-insert.html": [],
  "https://www.postgresql.org/docs/15/infoschema-user-defined-types.html": [],
  "https://www.postgresql.org/docs/15/sql-importforeignschema.html": [
    "IMPORT FOREIGN SCHEMA foreign_films\n    FROM SERVER film_server INTO films",
    "IMPORT FOREIGN SCHEMA foreign_films LIMIT TO (actors, directors)\n    FROM SERVER film_server INTO films"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-index.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-parameter-acl.html": [],
  "https://www.postgresql.org/docs/15/tcn.html": [
    "create table tcndata\ntest-#   (\ntest(test(test(test(test(CREATE TABLE\n create trigger tcndata_tcn_trigger\ntest-#   after insert or update or delete on tcndata\ntest-#   for each row execute function triggered_change_notification();\nCREATE TRIGGER\n listen tcn;\nLISTEN\n insert into tcndata values (1, date '2012-12-22', 'one'),\ntest-#                            (1, date '2012-12-23', 'another'),\ntest-#                            (2, date '2012-12-23', 'two');\nINSERT 0 3\nAsynchronous notification \"tcn\" with payload \"\"tcndata\",I,\"a\"='1',\"b\"='2012-12-22'\" received from server process with PID 22770.\nAsynchronous notification \"tcn\" with payload \"\"tcndata\",I,\"a\"='1',\"b\"='2012-12-23'\" received from server process with PID 22770.\nAsynchronous notification \"tcn\" with payload \"\"tcndata\",I,\"a\"='2',\"b\"='2012-12-23'\" received from server process with PID 22770.\n update tcndata set c = 'uno' where a = 1;\nUPDATE 2\nAsynchronous notification \"tcn\" with payload \"\"tcndata\",U,\"a\"='1',\"b\"='2012-12-22'\" received from server process with PID 22770.\nAsynchronous notification \"tcn\" with payload \"\"tcndata\",U,\"a\"='1',\"b\"='2012-12-23'\" received from server process with PID 22770.\n delete from tcndata where a = 1 and b = date '2012-12-22';\nDELETE 1\nAsynchronous notification \"tcn\" with payload \"\"tcndata\",D,\"a\"='1',\"b\"='2012-12-22'\" received from server process with PID 22770."
  ],
  "https://www.postgresql.org/docs/15/functions-event-triggers.html": [
    "CREATE FUNCTION test_event_trigger_for_drops()\n        RETURNS event_trigger LANGUAGE plpgsql AS $$\nDECLARE\n    obj record;\nBEGIN\n    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n    LOOP\n        RAISE NOTICE '% dropped object: % %.% %',\n                     tg_tag,\n                     obj.object_type,\n                     obj.schema_name,\n                     obj.object_name,\n                     obj.object_identity;\n    END LOOP;\nEND;\n$$;",
    "CREATE EVENT TRIGGER test_event_trigger_for_drops\n   ON sql_drop\n   EXECUTE FUNCTION test_event_trigger_for_drops();",
    "CREATE FUNCTION test_event_trigger_table_rewrite_oid()\n RETURNS event_trigger\n LANGUAGE plpgsql AS\n$$\nBEGIN\n  RAISE NOTICE 'rewriting table % for reason %',\n                pg_event_trigger_table_rewrite_oid()::regclass,\n                pg_event_trigger_table_rewrite_reason();\nEND;\n$$;",
    "CREATE EVENT TRIGGER test_table_rewrite_oid\n                  ON table_rewrite\n   EXECUTE FUNCTION test_event_trigger_table_rewrite_oid();"
  ],
  "https://www.postgresql.org/docs/15/app-psql.html": [
    "SELECT * FROM foo",
    "EOF",
    "SELECT format('create index on my_table(%I)', attname)\n-> FROM pg_attribute\n-> WHERE attrelid = 'my_table'::regclass AND attnum > 0\n-> ORDER BY attnum\n-> \\gexec\nCREATE INDEX\nCREATE INDEX\nCREATE INDEX\nCREATE INDEX",
    "SELECT 'hello' AS var1, 10 AS var2\n-> \\gset\n \\echo :var1 :var2\nhello 10",
    "SELECT 'hello' AS var1, 10 AS var2\n-> \\gset result_\n \\echo :result_var1 :result_var2\nhello 10",
    "SELECT\n    EXISTS(SELECT 1 FROM customer WHERE customer_id = 123) as is_customer,\n    EXISTS(SELECT 1 FROM employee WHERE employee_id = 456) as is_employee\n\\gset\n\\if :is_customer\n    SELECT * FROM customer WHERE customer_id = 123;",
    "SELECT * FROM employee WHERE employee_id = 456",
    "select 1;",
    "select 2;",
    "select 3;",
    "select 1\\;",
    "select 2\\;",
    "select 3;",
    "SELECT * FROM :foo",
    "SELECT * FROM :\"foo\"",
    "INSERT INTO my_table VALUES (:'content')",
    "CREATE TABLE my_table (\ntestdb(>  first integer not null default 0,\ntestdb(>  second text)\ntestdb-> ;\nCREATE TABLE",
    "SELECT first, second, first > 2 AS gt2 FROM my_table;",
    "SELECT t1.first as \"A\", t2.first+100 AS \"B\", t1.first*(t2.first+100) as \"AxB\",\ntestdb(> row_number() over(order by t2.first) AS ord\ntestdb(> FROM my_table t1 CROSS JOIN my_table t2 ORDER BY 1 DESC\ntestdb(> \\crosstabview \"A\" \"B\" \"AxB\" ord\n A | 101 | 102 | 103 | 104\n\n4 | 404 | 408 | 412 | 416\n 3 | 303 | 306 | 309 | 312\n 2 | 202 | 204 | 206 | 208\n 1 | 101 | 102 | 103 | 104\n(4 rows)"
  ],
  "https://www.postgresql.org/docs/15/runtime-config-resource.html": [],
  "https://www.postgresql.org/docs/15/app-ecpg.html": [],
  "https://www.postgresql.org/docs/15/xaggr.html": [
    "CREATE AGGREGATE sum (complex)\n(\n    sfunc = complex_add,\n    stype = complex,\n    initcond = '(0,0)'\n);",
    "SELECT sum(a) FROM test_complex;",
    "CREATE AGGREGATE avg (float8)\n(\n    sfunc = float8_accum,\n    stype = float8[],\n    finalfunc = float8_avg,\n    initcond = '{0,0,0}'\n);",
    "CREATE AGGREGATE sum (complex)\n(\n    sfunc = complex_add,\n    stype = complex,\n    initcond = '(0,0)',\n    msfunc = complex_add,\n    minvfunc = complex_sub,\n    mstype = complex,\n    minitcond = '(0,0)'\n);",
    "CREATE AGGREGATE unsafe_sum (float8)\n(\n    stype = float8,\n    sfunc = float8pl,\n    mstype = float8,\n    msfunc = float8pl,\n    minvfunc = float8mi\n);",
    "SELECT\n  unsafe_sum(x) OVER (ORDER BY n ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)\nFROM (VALUES (1, 1.0e20::float8),\n             (2, 1.0::float8)) AS v (n,x);",
    "CREATE AGGREGATE array_accum (anycompatible)\n(\n    sfunc = array_append,\n    stype = anycompatiblearray,\n    initcond = '{}'\n);",
    "SELECT attrelid::regclass, array_accum(attname)\n    FROM pg_attribute\n    WHERE attnum > 0 AND attrelid = 'pg_tablespace'::regclass\n    GROUP BY attrelid;",
    "SELECT attrelid::regclass, array_accum(atttypid::regtype)\n    FROM pg_attribute\n    WHERE attnum > 0 AND attrelid = 'pg_tablespace'::regclass\n    GROUP BY attrelid",
    "CREATE FUNCTION array_agg_transfn(internal, anynonarray)\n  RETURNS internal ...;",
    "CREATE FUNCTION array_agg_finalfn(internal, anynonarray)\n  RETURNS anyarray ...;",
    "CREATE AGGREGATE array_agg (anynonarray)\n(\n    sfunc = array_agg_transfn,\n    stype = internal,\n    finalfunc = array_agg_finalfn,\n    finalfunc_extra\n);",
    "SELECT myaggregate(a ORDER BY a, b, c) FROM ...",
    "SELECT myaggregate(a, b, c ORDER BY a) FROM ...",
    "CREATE FUNCTION ordered_set_transition(internal, anyelement)\n  RETURNS internal ...;",
    "CREATE FUNCTION percentile_disc_final(internal, float8, anyelement)\n  RETURNS anyelement ...;",
    "CREATE AGGREGATE percentile_disc (float8 ORDER BY anyelement)\n(\n    sfunc = ordered_set_transition,\n    stype = internal,\n    finalfunc = percentile_disc_final,\n    finalfunc_extra\n);",
    "SELECT percentile_disc(0.5) WITHIN GROUP (ORDER BY income) FROM households;"
  ],
  "https://www.postgresql.org/docs/15/sql-abort.html": [
    "ABORT;"
  ],
  "https://www.postgresql.org/docs/15/sql-set.html": [
    "SELECT setseed(value);",
    "SET search_path TO my_schema, public;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-usage-privileges.html": [],
  "https://www.postgresql.org/docs/15/tutorial-conclusion.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-open.html": [],
  "https://www.postgresql.org/docs/15/infoschema-sql-features.html": [],
  "https://www.postgresql.org/docs/15/sql-createaggregate.html": [
    "SELECT agg(col) FROM tab;",
    "SELECT col FROM tab ORDER BY col USING sortop LIMIT 1;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-cursors.html": [],
  "https://www.postgresql.org/docs/15/view-pg-seclabels.html": [],
  "https://www.postgresql.org/docs/15/gssapi-enc.html": [],
  "https://www.postgresql.org/docs/15/gin-examples.html": [],
  "https://www.postgresql.org/docs/15/typeconv-overview.html": [],
  "https://www.postgresql.org/docs/15/warm-standby-failover.html": [],
  "https://www.postgresql.org/docs/15/rules-views.html": [
    "CREATE VIEW myview AS SELECT * FROM mytab;",
    "CREATE TABLE myview (same column list as mytab);",
    "CREATE RULE \"_RETURN\" AS ON SELECT TO myview DO INSTEAD\n    SELECT * FROM mytab;",
    "CREATE TABLE shoe_data (\n    shoename   text,\nsh_avail   integer,\nslcolor    text,\nslminlen   real,\nslmaxlen   real,\nslunit     text\n);",
    "CREATE TABLE shoelace_data (\n    sl_name    text,\nsl_avail   integer,\nsl_color   text,\nsl_len     real,\nsl_unit    text\n);",
    "CREATE TABLE unit (\n    un_name    text,\nun_fact    real\n);",
    "CREATE VIEW shoe AS\n    SELECT sh.shoename,\n           sh.sh_avail,\n           sh.slcolor,\n           sh.slminlen,\n           sh.slminlen * un.un_fact AS slminlen_cm,\n           sh.slmaxlen,\n           sh.slmaxlen * un.un_fact AS slmaxlen_cm,\n           sh.slunit\n      FROM shoe_data sh, unit un\n     WHERE sh.slunit = un.un_name;",
    "CREATE VIEW shoelace AS\n    SELECT s.sl_name,\n           s.sl_avail,\n           s.sl_color,\n           s.sl_len,\n           s.sl_unit,\n           s.sl_len * u.un_fact AS sl_len_cm\n      FROM shoelace_data s, unit u\n     WHERE s.sl_unit = u.un_name;",
    "CREATE VIEW shoe_ready AS\n    SELECT rsh.shoename,\n           rsh.sh_avail,\n           rsl.sl_name,\n           rsl.sl_avail,\n           least(rsh.sh_avail, rsl.sl_avail) AS total_avail\n      FROM shoe rsh, shoelace rsl\n     WHERE rsl.sl_color = rsh.slcolor\n       AND rsl.sl_len_cm >= rsh.slminlen_cm\n       AND rsl.sl_len_cm <= rsh.slmaxlen_cm;",
    "INSERT INTO unit VALUES ('cm', 1.0);",
    "INSERT INTO unit VALUES ('m', 100.0);",
    "INSERT INTO unit VALUES ('inch', 2.54);",
    "INSERT INTO shoe_data VALUES ('sh1', 2, 'black', 70.0, 90.0, 'cm');",
    "INSERT INTO shoe_data VALUES ('sh2', 0, 'black', 30.0, 40.0, 'inch');",
    "INSERT INTO shoe_data VALUES ('sh3', 4, 'brown', 50.0, 65.0, 'cm');",
    "INSERT INTO shoe_data VALUES ('sh4', 3, 'brown', 40.0, 50.0, 'inch');",
    "INSERT INTO shoelace_data VALUES ('sl1', 5, 'black', 80.0, 'cm');",
    "INSERT INTO shoelace_data VALUES ('sl2', 6, 'black', 100.0, 'cm');",
    "INSERT INTO shoelace_data VALUES ('sl3', 0, 'black', 35.0 , 'inch');",
    "INSERT INTO shoelace_data VALUES ('sl4', 8, 'black', 40.0 , 'inch');",
    "INSERT INTO shoelace_data VALUES ('sl5', 4, 'brown', 1.0 , 'm');",
    "INSERT INTO shoelace_data VALUES ('sl6', 0, 'brown', 0.9 , 'm');",
    "INSERT INTO shoelace_data VALUES ('sl7', 7, 'brown', 60 , 'cm');",
    "INSERT INTO shoelace_data VALUES ('sl8', 1, 'brown', 40 , 'inch');",
    "SELECT * FROM shoelace;",
    "SELECT shoelace.sl_name, shoelace.sl_avail,\n       shoelace.sl_color, shoelace.sl_len,\n       shoelace.sl_unit, shoelace.sl_len_cm\n  FROM shoelace shoelace;",
    "SELECT s.sl_name, s.sl_avail,\n       s.sl_color, s.sl_len, s.sl_unit,\n       s.sl_len * u.un_fact AS sl_len_cm\n  FROM shoelace old, shoelace new,\n       shoelace_data s, unit u\n WHERE s.sl_unit = u.un_name;",
    "SELECT shoelace.sl_name, shoelace.sl_avail,\n       shoelace.sl_color, shoelace.sl_len,\n       shoelace.sl_unit, shoelace.sl_len_cm\n  FROM (SELECT s.sl_name,\n               s.sl_avail,\n               s.sl_color,\n               s.sl_len,\n               s.sl_unit,\n               s.sl_len * u.un_fact AS sl_len_cm\n          FROM shoelace_data s, unit u\n         WHERE s.sl_unit = u.un_name) shoelace;",
    "SELECT * FROM shoe_ready WHERE total_avail >= 2;",
    "SELECT shoe_ready.shoename, shoe_ready.sh_avail,\n       shoe_ready.sl_name, shoe_ready.sl_avail,\n       shoe_ready.total_avail\n  FROM shoe_ready shoe_ready\n WHERE shoe_ready.total_avail >= 2;",
    "SELECT shoe_ready.shoename, shoe_ready.sh_avail,\n       shoe_ready.sl_name, shoe_ready.sl_avail,\n       shoe_ready.total_avail\n  FROM (SELECT rsh.shoename,\n               rsh.sh_avail,\n               rsl.sl_name,\n               rsl.sl_avail,\n               least(rsh.sh_avail, rsl.sl_avail) AS total_avail\n          FROM shoe rsh, shoelace rsl\n         WHERE rsl.sl_color = rsh.slcolor\n           AND rsl.sl_len_cm >= rsh.slminlen_cm\n           AND rsl.sl_len_cm <= rsh.slmaxlen_cm) shoe_ready\n WHERE shoe_ready.total_avail >= 2;",
    "SELECT shoe_ready.shoename, shoe_ready.sh_avail,\n       shoe_ready.sl_name, shoe_ready.sl_avail,\n       shoe_ready.total_avail\n  FROM (SELECT rsh.shoename,\n               rsh.sh_avail,\n               rsl.sl_name,\n               rsl.sl_avail,\n               least(rsh.sh_avail, rsl.sl_avail) AS total_avail\n          FROM (SELECT sh.shoename,\n                       sh.sh_avail,\n                       sh.slcolor,\n                       sh.slminlen,\n                       sh.slminlen * un.un_fact AS slminlen_cm,\n                       sh.slmaxlen,\n                       sh.slmaxlen * un.un_fact AS slmaxlen_cm,\n                       sh.slunit\n                  FROM shoe_data sh, unit un\n                 WHERE sh.slunit = un.un_name) rsh,\n               (SELECT s.sl_name,\n                       s.sl_avail,\n                       s.sl_color,\n                       s.sl_len,\n                       s.sl_unit,\n                       s.sl_len * u.un_fact AS sl_len_cm\n                  FROM shoelace_data s, unit u\n                 WHERE s.sl_unit = u.un_name) rsl\n         WHERE rsl.sl_color = rsh.slcolor\n           AND rsl.sl_len_cm >= rsh.slminlen_cm\n           AND rsl.sl_len_cm <= rsh.slmaxlen_cm) shoe_ready\n WHERE shoe_ready.total_avail > 2;",
    "SELECT t2.b FROM t1, t2 WHERE t1.a = t2.a;",
    "UPDATE t1 SET b = t2.b FROM t2 WHERE t1.a = t2.a;",
    "UPDATE t1 SET a = t1.a, b = t2.b FROM t2 WHERE t1.a = t2.a;",
    "SELECT t1.a, t2.b FROM t1, t2 WHERE t1.a = t2.a;",
    "SELECT t1.a, t2.b, t1.ctid FROM t1, t2 WHERE t1.a = t2.a;"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-scroll-cursor-move.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-publication.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-expressions.html": [
    "IF x < y THEN ...",
    "PREPARE statement_name(integer, integer) AS SELECT $1 < $2;",
    "IF count(*) > 0 FROM my_table THEN ..."
  ],
  "https://www.postgresql.org/docs/15/planner-stats-details.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-prepare.html": [
    "EXEC SQL ALLOCATE DESCRIPTOR outdesc;",
    "EXEC SQL PREPARE foo FROM :stmt;",
    "EXEC SQL EXECUTE foo USING SQL DESCRIPTOR indesc INTO SQL DESCRIPTOR outdesc;"
  ],
  "https://www.postgresql.org/docs/15/sql-drop-access-method.html": [
    "DROP ACCESS METHOD heptree;"
  ],
  "https://www.postgresql.org/docs/15/sql-syntax-lexical.html": [
    "SELECT * FROM MY_TABLE;",
    "UPDATE MY_TABLE SET A = 5;",
    "INSERT INTO MY_TABLE VALUES (3, 'hi there');",
    "UPDATE MY_TABLE SET A = 5;",
    "uPDaTE my_TabLE SeT a = 5;",
    "UPDATE my_table SET a = 5;",
    "UPDATE \"my_table\" SET \"a\" = 5;",
    "SELECT 'foo'\n'bar';",
    "SELECT 'foobar';",
    "SELECT 'foo'      'bar';",
    "BEGIN\n    RETURN ($1 ~ $q$[\\t\\r\\n\\v\\\\]$q$)",
    "END",
    "REAL '1.23'\n1.23::REAL",
    "SELECT 3 OPERATOR(pg_catalog.+) 4;"
  ],
  "https://www.postgresql.org/docs/15/trigger-example.html": [
    "CREATE TABLE ttest (\n    x integer\n);",
    "CREATE FUNCTION trigf() RETURNS trigger\n    AS 'filename'\n    LANGUAGE C;",
    "CREATE TRIGGER tbefore BEFORE INSERT OR UPDATE OR DELETE ON ttest\n    FOR EACH ROW EXECUTE FUNCTION trigf();",
    "CREATE TRIGGER tafter AFTER INSERT OR UPDATE OR DELETE ON ttest\n    FOR EACH ROW EXECUTE FUNCTION trigf();"
  ],
  "https://www.postgresql.org/docs/15/sql-values.html": [
    "VALUES (1, 'one'), (2, 'two'), (3, 'three');",
    "SELECT 1 AS column1, 'one' AS column2\nUNION ALL\nSELECT 2, 'two'\nUNION ALL\nSELECT 3, 'three';",
    "INSERT INTO films (code, title, did, date_prod, kind)\n    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');",
    "INSERT INTO films VALUES\n    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),\n    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);",
    "SELECT f.*\n  FROM films f, (VALUES('MGM', 'Horror'), ('UA', 'Sci-Fi')) AS t (studio, kind)\n  WHERE f.studio = t.studio AND f.kind = t.kind;",
    "UPDATE employees SET salary = salary * v.increase\n  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (depno, target, increase)\n  WHERE employees.depno = v.depno AND employees.sales >= v.target;",
    "SELECT * FROM machines\nWHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));"
  ],
  "https://www.postgresql.org/docs/15/index-locking.html": [],
  "https://www.postgresql.org/docs/15/infoschema-constraint-table-usage.html": [],
  "https://www.postgresql.org/docs/15/sql-alterdomain.html": [
    "ALTER DOMAIN zipcode SET NOT NULL;",
    "ALTER DOMAIN zipcode DROP NOT NULL;",
    "ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(VALUE) = 5);",
    "ALTER DOMAIN zipcode DROP CONSTRAINT zipchk;",
    "ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check;",
    "ALTER DOMAIN zipcode SET SCHEMA customers;"
  ],
  "https://www.postgresql.org/docs/15/btree-implementation.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-execute-immediate.html": [
    "EXEC SQL EXECUTE IMMEDIATE :command;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-foreign-table-options.html": [],
  "https://www.postgresql.org/docs/15/spi.html": [],
  "https://www.postgresql.org/docs/15/sql-comment.html": [
    "COMMENT ON TABLE mytable IS 'This is my table.';",
    "COMMENT ON TABLE mytable IS NULL;",
    "COMMENT ON ACCESS METHOD gin IS 'GIN index access method';",
    "COMMENT ON AGGREGATE my_aggregate (double precision) IS 'Computes sample variance';",
    "COMMENT ON CAST (text AS int4) IS 'Allow casts from text to int4';",
    "COMMENT ON COLLATION \"fr_CA\" IS 'Canadian French';",
    "COMMENT ON COLUMN my_table.my_column IS 'Employee ID number';",
    "COMMENT ON CONVERSION my_conv IS 'Conversion to UTF8';",
    "COMMENT ON CONSTRAINT bar_col_cons ON bar IS 'Constrains column col';",
    "COMMENT ON CONSTRAINT dom_col_constr ON DOMAIN dom IS 'Constrains col of domain';",
    "COMMENT ON DATABASE my_database IS 'Development Database';",
    "COMMENT ON DOMAIN my_domain IS 'Email Address Domain';",
    "COMMENT ON EVENT TRIGGER abort_ddl IS 'Aborts all DDL commands';",
    "COMMENT ON EXTENSION hstore IS 'implements the hstore data type';",
    "COMMENT ON FOREIGN DATA WRAPPER mywrapper IS 'my foreign data wrapper';",
    "COMMENT ON FOREIGN TABLE my_foreign_table IS 'Employee Information in other database';",
    "COMMENT ON FUNCTION my_function (timestamp) IS 'Returns Roman Numeral';",
    "COMMENT ON INDEX my_index IS 'Enforces uniqueness on employee ID';",
    "COMMENT ON LANGUAGE plpython IS 'Python support for stored procedures';",
    "COMMENT ON LARGE OBJECT 346344 IS 'Planning document';",
    "COMMENT ON MATERIALIZED VIEW my_matview IS 'Summary of order history';",
    "COMMENT ON OPERATOR ^ (text, text) IS 'Performs intersection of two texts';",
    "COMMENT ON OPERATOR - (NONE, integer) IS 'Unary minus';",
    "COMMENT ON OPERATOR CLASS int4ops USING btree IS '4 byte integer operators for btrees';",
    "COMMENT ON OPERATOR FAMILY integer_ops USING btree IS 'all integer operators for btrees';",
    "COMMENT ON POLICY my_policy ON mytable IS 'Filter rows by users';",
    "COMMENT ON PROCEDURE my_proc (integer, integer) IS 'Runs a report';",
    "COMMENT ON PUBLICATION alltables IS 'Publishes all operations on all tables';",
    "COMMENT ON ROLE my_role IS 'Administration group for finance tables';",
    "COMMENT ON ROUTINE my_routine (integer, integer) IS 'Runs a routine (which is a function or procedure)';",
    "COMMENT ON RULE my_rule ON my_table IS 'Logs updates of employee records';",
    "COMMENT ON SCHEMA my_schema IS 'Departmental data';",
    "COMMENT ON SEQUENCE my_sequence IS 'Used to generate primary keys';",
    "COMMENT ON SERVER myserver IS 'my foreign server';",
    "COMMENT ON STATISTICS my_statistics IS 'Improves planner row estimations';",
    "COMMENT ON SUBSCRIPTION alltables IS 'Subscription for all operations on all tables';",
    "COMMENT ON TABLE my_schema.my_table IS 'Employee Information';",
    "COMMENT ON TABLESPACE my_tablespace IS 'Tablespace for indexes';",
    "COMMENT ON TEXT SEARCH CONFIGURATION my_config IS 'Special word filtering';",
    "COMMENT ON TEXT SEARCH DICTIONARY swedish IS 'Snowball stemmer for Swedish language';",
    "COMMENT ON TEXT SEARCH PARSER my_parser IS 'Splits text into words';",
    "COMMENT ON TEXT SEARCH TEMPLATE snowball IS 'Snowball stemmer';",
    "COMMENT ON TRANSFORM FOR hstore LANGUAGE plpython3u IS 'Transform between hstore and Python dict';",
    "COMMENT ON TRIGGER my_trigger ON my_table IS 'Used for RI';",
    "COMMENT ON TYPE complex IS 'Complex number data type';",
    "COMMENT ON VIEW my_view IS 'View of departmental costs';"
  ],
  "https://www.postgresql.org/docs/15/sql-update.html": [
    "UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';",
    "UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT\n  WHERE city = 'San Francisco' AND date = '2003-07-03';",
    "UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT\n  WHERE city = 'San Francisco' AND date = '2003-07-03'\n  RETURNING temp_lo, temp_hi, prcp;",
    "UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)\n  WHERE city = 'San Francisco' AND date = '2003-07-03';",
    "UPDATE employees SET sales_count = sales_count + 1 FROM accounts\n  WHERE accounts.name = 'Acme Corporation'\n  AND employees.id = accounts.sales_person;",
    "UPDATE employees SET sales_count = sales_count + 1 WHERE id =\n  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');",
    "UPDATE accounts SET (contact_first_name, contact_last_name) =\n    (SELECT first_name, last_name FROM employees\n     WHERE employees.id = accounts.sales_person);",
    "UPDATE accounts SET contact_first_name = first_name,\n                    contact_last_name = last_name\n  FROM employees WHERE employees.id = accounts.sales_person;",
    "UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =\n    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d\n     WHERE d.group_id = s.group_id);",
    "BEGIN;",
    "SAVEPOINT sp1;",
    "INSERT INTO wines VALUES('Chateau Lafite 2003', '24');",
    "ROLLBACK TO sp1;",
    "UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';",
    "COMMIT;",
    "UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;"
  ],
  "https://www.postgresql.org/docs/15/functions-range.html": [],
  "https://www.postgresql.org/docs/15/protocol-logical-replication.html": [],
  "https://www.postgresql.org/docs/15/seg.html": [],
  "https://www.postgresql.org/docs/15/preface.html": [],
  "https://www.postgresql.org/docs/15/sslinfo.html": [],
  "https://www.postgresql.org/docs/15/tutorial-createdb.html": [],
  "https://www.postgresql.org/docs/15/ddl-partitioning.html": [
    "CREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n);",
    "CREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n) PARTITION BY RANGE (logdate);",
    "CREATE TABLE measurement_y2006m02 PARTITION OF measurement\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01');",
    "CREATE TABLE measurement_y2006m03 PARTITION OF measurement\n    FOR VALUES FROM ('2006-03-01') TO ('2006-04-01');",
    "CREATE TABLE measurement_y2007m11 PARTITION OF measurement\n    FOR VALUES FROM ('2007-11-01') TO ('2007-12-01')",
    "CREATE TABLE measurement_y2007m12 PARTITION OF measurement\n    FOR VALUES FROM ('2007-12-01') TO ('2008-01-01')\n    TABLESPACE fasttablespace;",
    "CREATE TABLE measurement_y2008m01 PARTITION OF measurement\n    FOR VALUES FROM ('2008-01-01') TO ('2008-02-01')\n    WITH (parallel_workers = 4)\n    TABLESPACE fasttablespace;",
    "CREATE TABLE measurement_y2006m02 PARTITION OF measurement\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')\n    PARTITION BY RANGE (peaktemp);",
    "CREATE INDEX ON measurement (logdate);",
    "DROP TABLE measurement_y2006m02;",
    "ALTER TABLE measurement DETACH PARTITION measurement_y2006m02;",
    "ALTER TABLE measurement DETACH PARTITION measurement_y2006m02 CONCURRENTLY;",
    "CREATE TABLE measurement_y2008m02 PARTITION OF measurement\n    FOR VALUES FROM ('2008-02-01') TO ('2008-03-01')\n    TABLESPACE fasttablespace;",
    "CREATE TABLE measurement_y2008m02\n  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS)\n  TABLESPACE fasttablespace;",
    "ALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02\n   CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' );",
    "ALTER TABLE measurement ATTACH PARTITION measurement_y2008m02\n    FOR VALUES FROM ('2008-02-01') TO ('2008-03-01' )",
    "CREATE INDEX measurement_usls_idx ON ONLY measurement (unitsales);",
    "CREATE INDEX measurement_usls_200602_idx\n    ON measurement_y2006m02 (unitsales);",
    "ALTER INDEX measurement_usls_idx\n    ATTACH PARTITION measurement_usls_200602_idx;",
    "ALTER TABLE ONLY measurement ADD UNIQUE (city_id, logdate);",
    "ALTER TABLE measurement_y2006m02 ADD UNIQUE (city_id, logdate);",
    "ALTER INDEX measurement_city_id_logdate_key\n    ATTACH PARTITION measurement_y2006m02_city_id_logdate_key;",
    "CREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n);",
    "CREATE TABLE measurement_y2006m02 () INHERITS (measurement);",
    "CREATE TABLE measurement_y2006m03 () INHERITS (measurement);",
    "CREATE TABLE measurement_y2007m11 () INHERITS (measurement)",
    "CREATE TABLE measurement_y2007m12 () INHERITS (measurement);",
    "CREATE TABLE measurement_y2008m01 () INHERITS (measurement);",
    "CHECK ( x = 1 )\nCHECK ( county IN ( 'Oxfordshire', 'Buckinghamshire', 'Warwickshire' ))\nCHECK ( outletID >= 100 AND outletID < 200 )",
    "CHECK ( outletID BETWEEN 100 AND 200 )\nCHECK ( outletID BETWEEN 200 AND 300 )",
    "CREATE TABLE measurement_y2006m02 (\n    CHECK ( logdate >= DATE '2006-02-01' AND logdate < DATE '2006-03-01' )\n) INHERITS (measurement);",
    "CREATE TABLE measurement_y2006m03 (\n    CHECK ( logdate >= DATE '2006-03-01' AND logdate < DATE '2006-04-01' )\n) INHERITS (measurement);",
    "CREATE TABLE measurement_y2007m11 (\n    CHECK ( logdate >= DATE '2007-11-01' AND logdate < DATE '2007-12-01' )\n) INHERITS (measurement)",
    "CREATE TABLE measurement_y2007m12 (\n    CHECK ( logdate >= DATE '2007-12-01' AND logdate < DATE '2008-01-01' )\n) INHERITS (measurement);",
    "CREATE TABLE measurement_y2008m01 (\n    CHECK ( logdate >= DATE '2008-01-01' AND logdate < DATE '2008-02-01' )\n) INHERITS (measurement);",
    "CREATE INDEX measurement_y2006m02_logdate ON measurement_y2006m02 (logdate);",
    "CREATE INDEX measurement_y2006m03_logdate ON measurement_y2006m03 (logdate);",
    "CREATE INDEX measurement_y2007m11_logdate ON measurement_y2007m11 (logdate);",
    "CREATE INDEX measurement_y2007m12_logdate ON measurement_y2007m12 (logdate);",
    "CREATE INDEX measurement_y2008m01_logdate ON measurement_y2008m01 (logdate);",
    "CREATE OR REPLACE FUNCTION measurement_insert_trigger()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO measurement_y2008m01 VALUES (NEW.*);\n    RETURN NULL;\nEND;\n$$\nLANGUAGE plpgsql;",
    "CREATE TRIGGER insert_measurement_trigger\n    BEFORE INSERT ON measurement\n    FOR EACH ROW EXECUTE FUNCTION measurement_insert_trigger();",
    "CREATE OR REPLACE FUNCTION measurement_insert_trigger()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF ( NEW.logdate >= DATE '2006-02-01' AND\n         NEW.logdate < DATE '2006-03-01' ) THEN\n        INSERT INTO measurement_y2006m02 VALUES (NEW.*);\n    ELSIF ( NEW.logdate >= DATE '2006-03-01' AND\n            NEW.logdate < DATE '2006-04-01' ) THEN\n        INSERT INTO measurement_y2006m03 VALUES (NEW.*);\n    ...\n    ELSIF ( NEW.logdate >= DATE '2008-01-01' AND\n            NEW.logdate < DATE '2008-02-01' ) THEN\n        INSERT INTO measurement_y2008m01 VALUES (NEW.*);\n    ELSE\n        RAISE EXCEPTION 'Date out of range.  Fix the measurement_insert_trigger() function!';\n    END IF;\n    RETURN NULL;\nEND;\n$$\nLANGUAGE plpgsql;",
    "CREATE RULE measurement_insert_y2006m02 AS\nON INSERT TO measurement WHERE\n    ( logdate >= DATE '2006-02-01' AND logdate < DATE '2006-03-01' )\nDO INSTEAD\n    INSERT INTO measurement_y2006m02 VALUES (NEW.*);",
    "CREATE RULE measurement_insert_y2008m01 AS\nON INSERT TO measurement WHERE\n    ( logdate >= DATE '2008-01-01' AND logdate < DATE '2008-02-01' )\nDO INSTEAD\n    INSERT INTO measurement_y2008m01 VALUES (NEW.*)",
    "DROP TABLE measurement_y2006m02;",
    "ALTER TABLE measurement_y2006m02 NO INHERIT measurement;",
    "CREATE TABLE measurement_y2008m02 (\n    CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' )\n) INHERITS (measurement);",
    "CREATE TABLE measurement_y2008m02\n  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS);",
    "ALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02\n   CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' );",
    "ALTER TABLE measurement_y2008m02 INHERIT measurement",
    "ANALYZE measurement;",
    "SET enable_partition_pruning = on;",
    "SELECT count(*) FROM measurement WHERE logdate >= DATE '2008-01-01';",
    "SET enable_partition_pruning = off;",
    "EXPLAIN SELECT count(*) FROM measurement WHERE logdate >= DATE '2008-01-01';",
    "SET enable_partition_pruning = on;",
    "EXPLAIN SELECT count(*) FROM measurement WHERE logdate >= DATE '2008-01-01';"
  ],
  "https://www.postgresql.org/docs/15/functions-conditional.html": [
    "SELECT ... WHERE CASE WHEN x <> 0 THEN y/x > 1.5 ELSE false END;",
    "SELECT COALESCE(description, short_description, '(none)') ...",
    "SELECT NULLIF(value, '(none)') ..."
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-policy.html": [],
  "https://www.postgresql.org/docs/15/tutorial-advanced-intro.html": [],
  "https://www.postgresql.org/docs/15/ssh-tunnels.html": [],
  "https://www.postgresql.org/docs/15/tutorial-fk.html": [
    "CREATE TABLE cities (\n        name     varchar(80) primary key,\n        location point\n);",
    "CREATE TABLE weather (\n        city      varchar(80) references cities(name),\n        temp_lo   int,\n        temp_hi   int,\n        prcp      real,\n        date      date\n);",
    "INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');"
  ],
  "https://www.postgresql.org/docs/15/textsearch-intro.html": [
    "SELECT title || ' ' ||  author || ' ' ||  abstract || ' ' || body AS document\nFROM messages\nWHERE mid = 12;",
    "SELECT m.title || ' ' || m.author || ' ' || m.abstract || ' ' || d.body AS document\nFROM messages m, docs d\nWHERE m.mid = d.did AND m.mid = 12;",
    "SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat & rat'::tsquery;",
    "SELECT 'fat & cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector",
    "SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat & rat');",
    "SELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat & rat');",
    "SELECT to_tsvector('fatal error') @@ to_tsquery('fatal <-> error');",
    "SELECT to_tsvector('error is not fatal') @@ to_tsquery('fatal <-> error')",
    "SELECT phraseto_tsquery('cats ate rats');",
    "SELECT phraseto_tsquery('the cats ate the rats')"
  ],
  "https://www.postgresql.org/docs/15/non-durability.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-ts-template.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-get-connections.html": [
    "SELECT dblink_get_connections();"
  ],
  "https://www.postgresql.org/docs/15/planner-stats-security.html": [],
  "https://www.postgresql.org/docs/15/sql-droppolicy.html": [
    "DROP POLICY p1 ON my_table;"
  ],
  "https://www.postgresql.org/docs/15/sql-droptrigger.html": [
    "DROP TRIGGER if_dist_exists ON films;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-sql-implementation-info.html": [],
  "https://www.postgresql.org/docs/15/sql-dropschema.html": [
    "DROP SCHEMA mystuff CASCADE;"
  ],
  "https://www.postgresql.org/docs/15/runtime-config-client.html": [],
  "https://www.postgresql.org/docs/15/sql-altertrigger.html": [
    "ALTER TRIGGER emp_stamp ON emp RENAME TO emp_track_chgs;",
    "ALTER TRIGGER emp_stamp ON emp DEPENDS ON EXTENSION emplib;"
  ],
  "https://www.postgresql.org/docs/15/datetime-appendix.html": [],
  "https://www.postgresql.org/docs/15/planner-stats.html": [
    "CREATE STATISTICS stts (dependencies) ON city, zip FROM zipcodes;",
    "ANALYZE zipcodes;",
    "SELECT stxname, stxkeys, stxddependencies\n  FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid)\n  WHERE stxname = 'stts';",
    "SELECT * FROM zipcodes WHERE city = 'San Francisco' AND zip = '94105';",
    "SELECT * FROM zipcodes WHERE city = 'San Francisco' AND zip = '90210';",
    "CREATE STATISTICS stts2 (ndistinct) ON city, state, zip FROM zipcodes;",
    "ANALYZE zipcodes;",
    "SELECT stxkeys AS k, stxdndistinct AS nd\n  FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid)\n  WHERE stxname = 'stts2';",
    "CREATE STATISTICS stts3 (mcv) ON city, state FROM zipcodes;",
    "ANALYZE zipcodes;",
    "SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),\n                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts3';"
  ],
  "https://www.postgresql.org/docs/15/rules-materializedviews.html": [
    "CREATE MATERIALIZED VIEW mymatview AS SELECT * FROM mytab;",
    "CREATE TABLE mymatview AS SELECT * FROM mytab;",
    "REFRESH MATERIALIZED VIEW mymatview;",
    "CREATE TABLE invoice (\n    invoice_no    integer        PRIMARY KEY,\n    seller_no     integer,\ninvoice_date  date,\ninvoice_amt   numeric(13,2)\n);",
    "CREATE MATERIALIZED VIEW sales_summary AS\n  SELECT\n      seller_no,\n      invoice_date,\n      sum(invoice_amt)::numeric(13,2) as sales_amt\n    FROM invoice\n    WHERE invoice_date < CURRENT_DATE\n    GROUP BY\n      seller_no,\n      invoice_date;",
    "CREATE UNIQUE INDEX sales_summary_seller\n  ON sales_summary (seller_no, invoice_date);",
    "REFRESH MATERIALIZED VIEW sales_summary;",
    "CREATE EXTENSION file_fdw;",
    "CREATE SERVER local_file FOREIGN DATA WRAPPER file_fdw;",
    "CREATE FOREIGN TABLE words (word text NOT NULL)\n  SERVER local_file\n  OPTIONS (filename '/usr/share/dict/words');",
    "CREATE MATERIALIZED VIEW wrd AS SELECT * FROM words;",
    "CREATE UNIQUE INDEX wrd_word ON wrd (word);",
    "CREATE EXTENSION pg_trgm;",
    "CREATE INDEX wrd_trgm ON wrd USING gist (word gist_trgm_ops);",
    "VACUUM ANALYZE wrd;",
    "SELECT count(*) FROM words WHERE word = 'caterpiler';",
    "SELECT word FROM words ORDER BY word <-> 'caterpiler' LIMIT 10;"
  ],
  "https://www.postgresql.org/docs/15/reference-server.html": [],
  "https://www.postgresql.org/docs/15/datatype-enum.html": [
    "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');",
    "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');",
    "CREATE TABLE person (\n    name text,\n    current_mood mood\n);",
    "INSERT INTO person VALUES ('Moe', 'happy');",
    "SELECT * FROM person WHERE current_mood = 'happy';",
    "INSERT INTO person VALUES ('Larry', 'sad');",
    "INSERT INTO person VALUES ('Curly', 'ok');",
    "SELECT * FROM person WHERE current_mood > 'sad';",
    "SELECT * FROM person WHERE current_mood > 'sad' ORDER BY current_mood",
    "SELECT name\nFROM person\nWHERE current_mood = (SELECT MIN(current_mood) FROM person)",
    "CREATE TYPE happiness AS ENUM ('happy', 'very happy', 'ecstatic');",
    "CREATE TABLE holidays (\n    num_weeks integer,\n    happiness happiness\n);",
    "INSERT INTO holidays(num_weeks,happiness) VALUES (4, 'happy');",
    "INSERT INTO holidays(num_weeks,happiness) VALUES (6, 'very happy');",
    "INSERT INTO holidays(num_weeks,happiness) VALUES (8, 'ecstatic');",
    "INSERT INTO holidays(num_weeks,happiness) VALUES (2, 'sad');",
    "SELECT person.name, holidays.num_weeks FROM person, holidays\n  WHERE person.current_mood = holidays.happiness",
    "SELECT person.name, holidays.num_weeks FROM person, holidays\n  WHERE person.current_mood::text = holidays.happiness::text;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-language.html": [],
  "https://www.postgresql.org/docs/15/sql-createdomain.html": [
    "INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false));",
    "CREATE DOMAIN us_postal_code AS TEXT\nCHECK(\n   VALUE ~ '^\\d{5}$'\nOR VALUE ~ '^\\d{5}-\\d{4}$'\n);",
    "CREATE TABLE us_snail_addy (\n  address_id SERIAL PRIMARY KEY,\n  street1 TEXT NOT NULL,\n  street2 TEXT,\n  street3 TEXT,\n  city TEXT NOT NULL,\n  postal us_postal_code NOT NULL\n);"
  ],
  "https://www.postgresql.org/docs/15/bloom.html": [
    "CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)\n       WITH (length=80, col1=2, col2=2, col3=4);",
    "CREATE TABLE tbloom AS\n   SELECT\n     (random() * 1000000)::int as i1,\n     (random() * 1000000)::int as i2,\n     (random() * 1000000)::int as i3,\n     (random() * 1000000)::int as i4,\n     (random() * 1000000)::int as i5,\n     (random() * 1000000)::int as i6\n   FROM\n  generate_series(1,10000000);",
    "SELECT 10000000",
    "EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;",
    "CREATE INDEX btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);",
    "CREATE INDEX\n SELECT pg_size_pretty(pg_relation_size('btreeidx'));",
    "EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451",
    "CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);",
    "CREATE INDEX\n SELECT pg_size_pretty(pg_relation_size('bloomidx'));",
    "EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451",
    "CREATE INDEX btreeidx1 ON tbloom (i1);",
    "CREATE INDEX\n CREATE INDEX btreeidx2 ON tbloom (i2);",
    "CREATE INDEX\n CREATE INDEX btreeidx3 ON tbloom (i3);",
    "CREATE INDEX\n CREATE INDEX btreeidx4 ON tbloom (i4);",
    "CREATE INDEX\n CREATE INDEX btreeidx5 ON tbloom (i5);",
    "CREATE INDEX\n CREATE INDEX btreeidx6 ON tbloom (i6);",
    "CREATE INDEX\n EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;",
    "CREATE OPERATOR CLASS text_ops\nDEFAULT FOR TYPE text USING bloom AS\n    OPERATOR    1   =(text, text),\n    FUNCTION    1   hashtext(text);"
  ],
  "https://www.postgresql.org/docs/15/typeconv-func.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-whenever.html": [
    "EXEC SQL WHENEVER NOT FOUND CONTINUE;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL WHENEVER NOT FOUND DO CONTINUE;",
    "EXEC SQL WHENEVER SQLWARNING SQLPRINT;",
    "EXEC SQL WHENEVER SQLWARNING DO warn();",
    "EXEC SQL WHENEVER SQLERROR sqlprint;",
    "EXEC SQL WHENEVER SQLERROR CALL print2();",
    "EXEC SQL WHENEVER SQLERROR DO handle_error(\"select\");",
    "EXEC SQL WHENEVER SQLERROR DO sqlnotice(NULL, NONO);",
    "EXEC SQL WHENEVER SQLERROR DO sqlprint();",
    "EXEC SQL WHENEVER SQLERROR GOTO error_label;",
    "EXEC SQL WHENEVER SQLERROR STOP;",
    "EXEC SQL CONNECT TO testdb AS con1",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL ALLOCATE DESCRIPTOR d;",
    "EXEC SQL DECLARE cur CURSOR FOR SELECT current_database(), 'hoge', 256;",
    "EXEC SQL OPEN cur;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH NEXT FROM cur INTO SQL DESCRIPTOR d",
    "EXEC SQL CLOSE cur",
    "EXEC SQL COMMIT;",
    "EXEC SQL DEALLOCATE DESCRIPTOR d;",
    "EXEC SQL DISCONNECT ALL;"
  ],
  "https://www.postgresql.org/docs/15/sql-explain.html": [
    "BEGIN;",
    "EXPLAIN ANALYZE ...;",
    "ROLLBACK;",
    "EXPLAIN SELECT * FROM foo;",
    "EXPLAIN (FORMAT JSON) SELECT * FROM foo;",
    "EXPLAIN SELECT * FROM foo WHERE i = 4;",
    "EXPLAIN (FORMAT YAML) SELECT * FROM foo WHERE i='4';",
    "EXPLAIN (COSTS FALSE) SELECT * FROM foo WHERE i = 4;",
    "EXPLAIN SELECT sum(i) FROM foo WHERE i < 10;",
    "PREPARE query(int, int) AS SELECT sum(bar) FROM test\n    WHERE id > $1 AND id < $2\n    GROUP BY foo",
    "EXPLAIN ANALYZE EXECUTE query(100, 200);"
  ],
  "https://www.postgresql.org/docs/15/postgres-fdw.html": [
    "ALTER USER MAPPING FOR some_non_superuser SERVER loopback_nopw\nOPTIONS (ADD password_required 'false');",
    "CREATE EXTENSION postgres_fdw;",
    "CREATE SERVER foreign_server\n        FOREIGN DATA WRAPPER postgres_fdw\n        OPTIONS (host '192.83.123.89', port '5432', dbname 'foreign_db');",
    "CREATE USER MAPPING FOR local_user\n        SERVER foreign_server\n        OPTIONS (user 'foreign_user', password 'password');",
    "CREATE FOREIGN TABLE foreign_table (\n        id integer NOT NULL,\n        data text\n)\n        SERVER foreign_server\n        OPTIONS (schema_name 'some_schema', table_name 'some_table');"
  ],
  "https://www.postgresql.org/docs/15/sql-refreshmaterializedview.html": [
    "REFRESH MATERIALIZED VIEW order_summary;",
    "REFRESH MATERIALIZED VIEW annual_statistics_basis WITH NO DATA;"
  ],
  "https://www.postgresql.org/docs/15/gin-intro.html": [],
  "https://www.postgresql.org/docs/15/datatype-pg-lsn.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-auth-members.html": [],
  "https://www.postgresql.org/docs/15/intarray.html": [
    "CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);",
    "CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__intbig_ops (siglen = 32));",
    "SELECT message.mid FROM message WHERE message.sections && '{1,2}';",
    "SELECT message.mid FROM message WHERE message.sections @> '{1,2}';",
    "SELECT message.mid FROM message WHERE message.sections @@ '1&2'::query_int;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-inherits.html": [],
  "https://www.postgresql.org/docs/15/lo.html": [
    "CREATE TABLE image (title text, raster lo);",
    "CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image\n    FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);"
  ],
  "https://www.postgresql.org/docs/15/sql-droptable.html": [
    "DROP TABLE films, distributors;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-sql-declare.html": [
    "EXEC SQL DECLARE C CURSOR FOR SELECT * FROM My_Table;",
    "EXEC SQL DECLARE C CURSOR FOR SELECT Item1 FROM T;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT version();",
    "EXEC SQL PREPARE stmt1 AS SELECT version();",
    "EXEC SQL DECLARE cur1 CURSOR FOR stmt1;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-applicable-roles.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-prepare-cursor.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-event-trigger.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-connect-u.html": [],
  "https://www.postgresql.org/docs/15/role-attributes.html": [
    "CREATE ROLE name LOGIN;",
    "CREATE USER name;",
    "ALTER ROLE myname SET enable_indexscan TO off;"
  ],
  "https://www.postgresql.org/docs/15/xfunc-internal.html": [
    "CREATE FUNCTION square_root(double precision) RETURNS double precision\n    AS 'dsqrt'\n    LANGUAGE internal\n    STRICT;"
  ],
  "https://www.postgresql.org/docs/15/plpgsql-cursors.html": [
    "DECLARE\n    curs1 refcursor;",
    "OPEN curs1 FOR SELECT * FROM foo WHERE key = mykey;",
    "OPEN curs1 FOR EXECUTE format('SELECT * FROM %I WHERE col1 = $1',tabname) USING keyvalue;",
    "OPEN curs2;",
    "OPEN curs3(42);",
    "OPEN curs3(key := 42);",
    "DECLARE\n    key integer;",
    "BEGIN\n    key := 42;",
    "OPEN curs4;",
    "FETCH curs1 INTO rowvar;",
    "FETCH curs2 INTO foo, bar, baz;",
    "FETCH LAST FROM curs3 INTO x, y;",
    "FETCH RELATIVE -2 FROM curs4 INTO x;",
    "MOVE curs1;",
    "MOVE LAST FROM curs3;",
    "MOVE RELATIVE -2 FROM curs4;",
    "MOVE FORWARD 2 FROM curs4;",
    "UPDATE foo SET dataval = myval WHERE CURRENT OF curs1;",
    "CLOSE curs1;",
    "CREATE TABLE test (col text);",
    "INSERT INTO test VALUES ('123');",
    "CREATE FUNCTION reffunc(refcursor) RETURNS refcursor AS '\nBEGIN\n    OPEN $1 FOR SELECT col FROM test;\n    RETURN $1;\nEND;\n' LANGUAGE plpgsql;",
    "BEGIN;",
    "SELECT reffunc('funccursor');",
    "FETCH ALL IN funccursor;",
    "COMMIT;",
    "CREATE FUNCTION reffunc2() RETURNS refcursor AS '\nDECLARE\n    ref refcursor;\nBEGIN\n    OPEN ref FOR SELECT col FROM test;\n    RETURN ref;\nEND;\n' LANGUAGE plpgsql;",
    "BEGIN;",
    "SELECT reffunc2();",
    "FETCH ALL IN \"<unnamed cursor 1>\"",
    "COMMIT;",
    "CREATE FUNCTION myfunc(refcursor, refcursor) RETURNS SETOF refcursor AS $$\nBEGIN\n    OPEN $1 FOR SELECT * FROM table_1;\n    RETURN NEXT $1;\n    OPEN $2 FOR SELECT * FROM table_2;\n    RETURN NEXT $2;\nEND;\n$$ LANGUAGE plpgsql;",
    "BEGIN;",
    "SELECT * FROM myfunc('a', 'b');",
    "FETCH ALL FROM a;",
    "FETCH ALL FROM b;",
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-sql-deallocate-descriptor.html": [
    "EXEC SQL DEALLOCATE DESCRIPTOR mydesc;"
  ],
  "https://www.postgresql.org/docs/15/libpq-ssl.html": [],
  "https://www.postgresql.org/docs/15/sql-close.html": [
    "CLOSE liahona;"
  ],
  "https://www.postgresql.org/docs/15/charset.html": [],
  "https://www.postgresql.org/docs/15/server-shutdown.html": [],
  "https://www.postgresql.org/docs/15/plperl.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-operator.html": [],
  "https://www.postgresql.org/docs/15/sql-call.html": [
    "CALL do_db_maintenance();"
  ],
  "https://www.postgresql.org/docs/15/sql-merge.html": [
    "MERGE INTO customer_account ca\nUSING recent_transactions t\nON t.customer_id = ca.customer_id\nWHEN MATCHED THEN\n  UPDATE SET balance = balance + transaction_value\nWHEN NOT MATCHED THEN\n  INSERT (customer_id, balance)\n  VALUES (t.customer_id, t.transaction_value);",
    "MERGE INTO customer_account ca\nUSING (SELECT customer_id, transaction_value FROM recent_transactions) AS t\nON t.customer_id = ca.customer_id\nWHEN MATCHED THEN\n  UPDATE SET balance = balance + transaction_value\nWHEN NOT MATCHED THEN\n  INSERT (customer_id, balance)\n  VALUES (t.customer_id, t.transaction_value);",
    "MERGE INTO wines w\nUSING wine_stock_changes s\nON s.winename = w.winename\nWHEN NOT MATCHED AND s.stock_delta > 0 THEN\n  INSERT VALUES(s.winename, s.stock_delta)\nWHEN MATCHED AND w.stock + s.stock_delta > 0 THEN\n  UPDATE SET stock = w.stock + s.stock_delta\nWHEN MATCHED THEN\n  DELETE;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-views.html": [],
  "https://www.postgresql.org/docs/15/sql-alterlargeobject.html": [],
  "https://www.postgresql.org/docs/15/sql-set-constraints.html": [],
  "https://www.postgresql.org/docs/15/sql-dropaggregate.html": [
    "DROP AGGREGATE myavg(integer);",
    "DROP AGGREGATE myrank(VARIADIC \"any\" ORDER BY VARIADIC \"any\");",
    "DROP AGGREGATE myavg(integer), myavg(bigint);"
  ],
  "https://www.postgresql.org/docs/15/tutorial.html": [],
  "https://www.postgresql.org/docs/15/storage-init.html": [],
  "https://www.postgresql.org/docs/15/continuous-archiving.html": [
    "SELECT pg_backup_start(label => 'label', fast => false);",
    "SELECT * FROM pg_backup_stop(wait_for_archive => true);"
  ],
  "https://www.postgresql.org/docs/15/sql-createrule.html": [
    "CREATE RULE \"_RETURN\" AS\n    ON SELECT TO t1\n    DO INSTEAD\n        SELECT * FROM t2;",
    "CREATE RULE \"_RETURN\" AS\n    ON SELECT TO t2\n    DO INSTEAD\n        SELECT * FROM t1;",
    "SELECT * FROM t1;",
    "CREATE RULE notify_me AS ON UPDATE TO mytable DO ALSO NOTIFY mytable;",
    "UPDATE mytable SET name = 'foo' WHERE id = 42;"
  ],
  "https://www.postgresql.org/docs/15/gin.html": [],
  "https://www.postgresql.org/docs/15/manage-ag-templatedbs.html": [
    "CREATE DATABASE dbname TEMPLATE template0;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-sql-declare-statement.html": [
    "EXEC SQL CONNECT TO postgres AS con1;",
    "EXEC SQL AT con1 DECLARE sql_stmt STATEMENT;",
    "EXEC SQL DECLARE cursor_name CURSOR FOR sql_stmt;",
    "EXEC SQL PREPARE sql_stmt FROM :dyn_string;",
    "EXEC SQL OPEN cursor_name;",
    "EXEC SQL FETCH cursor_name INTO :column1;",
    "EXEC SQL CLOSE cursor_name;"
  ],
  "https://www.postgresql.org/docs/15/indexes-bitmap-scans.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-partitioned-table.html": [],
  "https://www.postgresql.org/docs/15/pgwalinspect.html": [],
  "https://www.postgresql.org/docs/15/logicaldecoding-synchronous.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-register-trigger-data.html": [],
  "https://www.postgresql.org/docs/15/nls.html": [],
  "https://www.postgresql.org/docs/15/install-post.html": [],
  "https://www.postgresql.org/docs/15/sql-createserver.html": [
    "CREATE SERVER myserver FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'foo', dbname 'foodb', port '5432');"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-getargtypeid.html": [],
  "https://www.postgresql.org/docs/15/infoschema-routine-routine-usage.html": [],
  "https://www.postgresql.org/docs/15/app-pg-dumpall.html": [],
  "https://www.postgresql.org/docs/15/view-pg-replication-slots.html": [],
  "https://www.postgresql.org/docs/15/libpq-cancel.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-statistics.html": [],
  "https://www.postgresql.org/docs/15/plperl-trusted.html": [
    "CREATE FUNCTION badfunc() RETURNS integer AS $$\n    my $tmpfile = \"/tmp/badfile\";\n    open my $fh, '>', $tmpfile\n        or elog(ERROR, qq{could not open the file \"$tmpfile\": $!});\n    print $fh \"Testing writing to a file\\n\";\n    close $fh or elog(ERROR, qq{could not close the file \"$tmpfile\": $!});\n    return 1;\n$$ LANGUAGE plperl;"
  ],
  "https://www.postgresql.org/docs/15/executor.html": [],
  "https://www.postgresql.org/docs/15/backup.html": [],
  "https://www.postgresql.org/docs/15/functions-enum.html": [
    "CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');"
  ],
  "https://www.postgresql.org/docs/15/sql-syntax.html": [],
  "https://www.postgresql.org/docs/15/gist.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-ts-config-map.html": [],
  "https://www.postgresql.org/docs/15/rules-triggers.html": [
    "CREATE TABLE computer (\n    hostname        text,\nmanufacturer    text\n);",
    "CREATE TABLE software (\n    software        text,\nhostname        text\n);",
    "DELETE FROM software WHERE hostname = $1;",
    "CREATE RULE computer_del AS ON DELETE TO computer\n    DO DELETE FROM software WHERE hostname = OLD.hostname;",
    "DELETE FROM computer WHERE hostname = 'mypc.local.net';",
    "DELETE FROM software WHERE computer.hostname = 'mypc.local.net'\n                       AND software.hostname = computer.hostname;",
    "DELETE FROM computer WHERE hostname >= 'old'\n                       AND hostname <  'ole'",
    "DELETE FROM software WHERE computer.hostname >= 'old' AND computer.hostname < 'ole'\n                       AND software.hostname = computer.hostname;",
    "DELETE FROM computer WHERE hostname ~ '^old';",
    "DELETE FROM computer WHERE manufacturer = 'bim';",
    "DELETE FROM software WHERE computer.manufacturer = 'bim'\n                       AND software.hostname = computer.hostname;"
  ],
  "https://www.postgresql.org/docs/15/sourcerepo.html": [],
  "https://www.postgresql.org/docs/15/using-explain.html": [
    "SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';"
  ],
  "https://www.postgresql.org/docs/15/pltcl.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-query.html": [
    "CREATE TABLE parent(key integer, ...);",
    "CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);",
    "CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);",
    "SELECT * FROM parent WHERE key = 2400"
  ],
  "https://www.postgresql.org/docs/15/spi-visibility.html": [
    "INSERT INTO a SELECT * FROM a;"
  ],
  "https://www.postgresql.org/docs/15/indexes-unique.html": [],
  "https://www.postgresql.org/docs/15/docguide-docbook.html": [],
  "https://www.postgresql.org/docs/15/tutorial-delete.html": [
    "DELETE FROM weather WHERE city = 'Hayward';",
    "SELECT * FROM weather;"
  ],
  "https://www.postgresql.org/docs/15/sql-createtablespace.html": [
    "CREATE TABLESPACE dbspace LOCATION '/data/dbs';",
    "CREATE TABLESPACE indexspace OWNER genevieve LOCATION '/data/indexes';"
  ],
  "https://www.postgresql.org/docs/15/basic-archive.html": [],
  "https://www.postgresql.org/docs/15/multivariate-statistics-examples.html": [
    "CREATE TABLE t (a INT, b INT);",
    "INSERT INTO t SELECT i % 100, i % 100 FROM generate_series(1, 10000) s(i);",
    "ANALYZE t;",
    "SELECT relpages, reltuples FROM pg_class WHERE relname = 't';",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;",
    "CREATE STATISTICS stts (dependencies) ON a, b FROM t;",
    "ANALYZE t;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a, b;",
    "DROP STATISTICS stts;",
    "CREATE STATISTICS stts (dependencies, ndistinct) ON a, b FROM t;",
    "ANALYZE t;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a, b;",
    "DROP STATISTICS stts;",
    "CREATE STATISTICS stts2 (mcv) ON a, b FROM t;",
    "ANALYZE t;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;",
    "SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),\n                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts2';",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 10;",
    "EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a <= 49 AND b > 49;"
  ],
  "https://www.postgresql.org/docs/15/mvcc.html": [],
  "https://www.postgresql.org/docs/15/view-pg-stats.html": [],
  "https://www.postgresql.org/docs/15/app-pgresetwal.html": [],
  "https://www.postgresql.org/docs/15/sql-rollback-prepared.html": [
    "ROLLBACK PREPARED 'foobar';"
  ],
  "https://www.postgresql.org/docs/15/datetime-invalid-input.html": [
    "SELECT '2018-03-11 02:30'::timestamptz;",
    "SELECT '2018-11-04 01:30'::timestamptz;",
    "SELECT '2018-11-04 01:30 EDT'::timestamptz;"
  ],
  "https://www.postgresql.org/docs/15/app-pgamcheck.html": [],
  "https://www.postgresql.org/docs/15/view-pg-available-extensions.html": [],
  "https://www.postgresql.org/docs/15/tsm-system-rows.html": [
    "CREATE EXTENSION tsm_system_rows;",
    "SELECT * FROM my_table TABLESAMPLE SYSTEM_ROWS(100);"
  ],
  "https://www.postgresql.org/docs/15/sql-begin.html": [
    "BEGIN;"
  ],
  "https://www.postgresql.org/docs/15/textsearch-configuration.html": [
    "CREATE TEXT SEARCH CONFIGURATION public.pg ( COPY = pg_catalog.english );",
    "CREATE TEXT SEARCH DICTIONARY pg_dict (\n    TEMPLATE = synonym,\n    SYNONYMS = pg_dict\n);",
    "CREATE TEXT SEARCH DICTIONARY english_ispell (\n    TEMPLATE = ispell,\n    DictFile = english,\n    AffFile = english,\n    StopWords = english\n);",
    "ALTER TEXT SEARCH CONFIGURATION pg\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart,\n                      word, hword, hword_part\n    WITH pg_dict, english_ispell, english_stem;",
    "ALTER TEXT SEARCH CONFIGURATION pg\n    DROP MAPPING FOR email, url, url_path, sfloat, float;",
    "SELECT * FROM ts_debug('public.pg', '\nPostgreSQL, the highly scalable, SQL compliant, open source object-relational\ndatabase management system, is now undergoing beta testing of the next\nversion of our software.\n');"
  ],
  "https://www.postgresql.org/docs/15/rules.html": [],
  "https://www.postgresql.org/docs/15/manage-ag-tablespaces.html": [
    "CREATE TABLESPACE fastspace LOCATION '/ssd1/postgresql/data';",
    "CREATE TABLE foo(i int) TABLESPACE space1;",
    "SET default_tablespace = space1;",
    "CREATE TABLE foo(i int);"
  ],
  "https://www.postgresql.org/docs/15/ssl-tcp.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-rewrite.html": [],
  "https://www.postgresql.org/docs/15/storage-vm.html": [],
  "https://www.postgresql.org/docs/15/infoschema-routine-column-usage.html": [],
  "https://www.postgresql.org/docs/15/logical-replication-restrictions.html": [],
  "https://www.postgresql.org/docs/15/sql-alterfunction.html": [
    "ALTER FUNCTION sqrt(integer) RENAME TO square_root;",
    "ALTER FUNCTION sqrt(integer) OWNER TO joe;",
    "ALTER FUNCTION sqrt(integer) SET SCHEMA maths;",
    "ALTER FUNCTION sqrt(integer) DEPENDS ON EXTENSION mathlib;",
    "ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;",
    "ALTER FUNCTION check_password(text) RESET search_path;"
  ],
  "https://www.postgresql.org/docs/15/sql-altersubscription.html": [
    "ALTER SUBSCRIPTION mysub SET PUBLICATION insert_only;",
    "ALTER SUBSCRIPTION mysub DISABLE;"
  ],
  "https://www.postgresql.org/docs/15/sql-createopclass.html": [
    "CREATE OPERATOR CLASS gist__int_ops\n    DEFAULT FOR TYPE _int4 USING gist AS\n        OPERATOR        3       &&,\n        OPERATOR        6       = (anyarray, anyarray),\n        OPERATOR        7       @>,\n        OPERATOR        8       <@,\n        OPERATOR        20      @@ (_int4, query_int),\n        FUNCTION        1       g_int_consistent (internal, _int4, smallint, oid, internal),\n        FUNCTION        2       g_int_union (internal, internal),\n        FUNCTION        3       g_int_compress (internal),\n        FUNCTION        4       g_int_decompress (internal),\n        FUNCTION        5       g_int_penalty (internal, internal, internal),\n        FUNCTION        6       g_int_picksplit (internal, internal),\n        FUNCTION        7       g_int_same (_int4, _int4, internal);"
  ],
  "https://www.postgresql.org/docs/15/populate.html": [],
  "https://www.postgresql.org/docs/15/view-pg-matviews.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-pfree.html": [],
  "https://www.postgresql.org/docs/15/infoschema-sequences.html": [],
  "https://www.postgresql.org/docs/15/view-pg-prepared-xacts.html": [],
  "https://www.postgresql.org/docs/15/ecpg-variables.html": [
    "EXEC SQL INSERT INTO sometable VALUES (:v1, 'foo', :v2);",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL int i = 4;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "VARCHAR v2;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL SELECT a, b INTO :v1, :v2 FROM test",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "VARCHAR v2;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE foo CURSOR FOR SELECT a, b FROM test",
    "EXEC SQL FETCH NEXT FROM foo INTO :v1, :v2",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "VARCHAR var[180];",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL SELECT now()::timestamp INTO :ts;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT '1 min'::interval INTO :in;",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;",
    "EXEC SQL WHENEVER SQLERROR STOP",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT 12.345::numeric(4,2), 23.456::decimal(4,2) INTO :num, :dec;",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT oid,datname INTO :dbid, :dbname FROM pg_database;",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT oid, datname, pg_database_size(oid) AS size FROM pg_database;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :dbval",
    "EXEC SQL CLOSE cur1",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT oid, datname, pg_database_size(oid) AS size FROM pg_database;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :dbval, :size",
    "EXEC SQL CLOSE cur1",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL TYPE serial_t IS long;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "CREATE TABLE t3 (\n    ii integer[]\n);",
    "SELECT * FROM t3;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT ii[4] FROM t3;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :ii ",
    "EXEC SQL CLOSE cur1",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT ii[1], ii[2], ii[3], ii[4] FROM t3;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :ii_a[0], :ii_a[1], :ii_a[2], :ii_a[3]",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT ii FROM t3;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :ii_a",
    "CREATE TYPE comp_t AS (intval integer, textval varchar(32));",
    "CREATE TABLE t4 (compval comp_t);",
    "INSERT INTO t4 VALUES ( (256, 'PostgreSQL') );",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).intval, (compval).textval FROM t4;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :intval, :textval",
    "EXEC SQL CLOSE cur1",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).intval, (compval).textval FROM t4;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :compval",
    "EXEC SQL CLOSE cur1",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).* FROM t4",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :compval",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL INSERT INTO test_complex VALUES ('(1,1)', '(3,3)');",
    "EXEC SQL DECLARE cur1 CURSOR FOR SELECT a, b FROM test_complex;",
    "EXEC SQL OPEN cur1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL FETCH FROM cur1 INTO :a, :b",
    "EXEC SQL CLOSE cur1",
    "CREATE FUNCTION create_complex(r double, i double) RETURNS complex\nLANGUAGE SQL\nIMMUTABLE\nAS $$ SELECT $1 * complex '(1,0')' + $2 * complex '(0,1)' $$;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL INSERT INTO test_complex VALUES (create_complex(:a, :b), create_complex(:c, :d));",
    "EXEC SQL INSERT INTO test_complex VALUES ('(1,2)', '(3,4)');",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "VARCHAR val;",
    "EXEC SQL END DECLARE SECTION:",
    "EXEC SQL SELECT b INTO :val :val_ind FROM test1"
  ],
  "https://www.postgresql.org/docs/15/view-pg-sequences.html": [],
  "https://www.postgresql.org/docs/15/btree.html": [],
  "https://www.postgresql.org/docs/15/functions-net.html": [],
  "https://www.postgresql.org/docs/15/datetime-posix-timezone-specs.html": [],
  "https://www.postgresql.org/docs/15/typeconv-select.html": [],
  "https://www.postgresql.org/docs/15/reference.html": [],
  "https://www.postgresql.org/docs/15/datatype-json.html": [
    "SELECT '5'::json;",
    "SELECT '[1, 2, \"foo\", null]'::json;",
    "SELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\": false}'::json;",
    "SELECT '{\"foo\": [true, \"bar\"], \"tags\": {\"a\": 1, \"b\": null}}'::json;",
    "SELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::json;",
    "SELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::jsonb",
    "SELECT '{\"reading\": 1.230e-5}'::json, '{\"reading\": 1.230e-5}'::jsonb;",
    "SELECT '\"foo\"'::jsonb @> '\"foo\"'::jsonb;",
    "SELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;",
    "SELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;",
    "SELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;",
    "SELECT '{\"product\": \"PostgreSQL\", \"version\": 9.4, \"jsonb\": true}'::jsonb @> '{\"version\": 9.4}'::jsonb;",
    "SELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb;",
    "SELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;",
    "SELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"bar\": \"baz\"}'::jsonb;",
    "SELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"foo\": {}}'::jsonb;",
    "SELECT '[\"foo\", \"bar\"]'::jsonb @> '\"bar\"'::jsonb;",
    "SELECT '\"bar\"'::jsonb @> '[\"bar\"]'::jsonb;",
    "SELECT '[\"foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';",
    "SELECT '{\"foo\": \"bar\"}'::jsonb ? 'foo';",
    "SELECT '{\"foo\": \"bar\"}'::jsonb ? 'bar';",
    "SELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb ? 'bar';",
    "SELECT '\"foo\"'::jsonb ? 'foo';",
    "SELECT doc->'site_name' FROM websites\n  WHERE doc @> '{\"tags\":[{\"term\":\"paris\"}, {\"term\":\"food\"}]}';",
    "SELECT doc->'site_name' FROM websites\n  WHERE doc->'tags' @> '[{\"term\":\"paris\"}, {\"term\":\"food\"}]';",
    "CREATE INDEX idxgin ON api USING GIN (jdoc);",
    "CREATE INDEX idxginp ON api USING GIN (jdoc jsonb_path_ops);",
    "SELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"company\": \"Magnafone\"}';",
    "SELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc -> 'tags' ? 'qui';",
    "CREATE INDEX idxgintags ON api USING GIN ((jdoc -> 'tags'));",
    "SELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"tags\": [\"qui\"]}';",
    "SELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @? '$.tags[*] ? (@ == \"qui\")';",
    "SELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @@ '$.tags[*] == \"qui\"';",
    "SELECT ('{\"a\": 1}'::jsonb)['a'];",
    "SELECT ('{\"a\": {\"b\": {\"c\": 1}}}'::jsonb)['a']['b']['c'];",
    "SELECT ('[1, \"2\", null]'::jsonb)[1];",
    "UPDATE table_name SET jsonb_field['key'] = '1';",
    "UPDATE table_name SET jsonb_field['a']['b']['c'] = '1';",
    "SELECT * FROM table_name WHERE jsonb_field['key'] = '\"value\"';",
    "UPDATE table_name SET jsonb_field['a'] = '1';",
    "UPDATE table_name SET jsonb_field[0] = '1';",
    "UPDATE table_name SET jsonb_field[2] = '2';",
    "UPDATE table_name SET jsonb_field['a'][0]['b'] = '1';",
    "UPDATE table_name SET jsonb_field[1]['a'] = '1';"
  ],
  "https://www.postgresql.org/docs/15/geqo-biblio.html": [],
  "https://www.postgresql.org/docs/15/regress-tap.html": [],
  "https://www.postgresql.org/docs/15/sql-droprole.html": [
    "DROP ROLE jonathan;"
  ],
  "https://www.postgresql.org/docs/15/catalogs.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-porting.html": [
    "CREATE OR REPLACE FUNCTION cs_fmt_browser_version(v_name varchar2,\n                                                  v_version varchar2)\nRETURN varchar2 IS\nBEGIN\n    IF v_version IS NULL THEN\n        RETURN v_name;\n    END IF;\n    RETURN v_name || '/' || v_version;\nEND;",
    "CREATE OR REPLACE FUNCTION cs_fmt_browser_version(v_name varchar,\n                                                  v_version varchar)\nRETURNS varchar AS $$\nBEGIN\n    IF v_version IS NULL THEN\n        RETURN v_name;\n    END IF;\n    RETURN v_name || '/' || v_version;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE OR REPLACE PROCEDURE cs_update_referrer_type_proc IS\n    CURSOR referrer_keys IS\n        SELECT * FROM cs_referrer_keys\n        ORDER BY try_order;",
    "BEGIN\n    func_cmd := 'CREATE OR REPLACE FUNCTION cs_find_referrer_type(v_host IN VARCHAR2,\n                 v_domain IN VARCHAR2, v_url IN VARCHAR2) RETURN VARCHAR2 IS BEGIN'",
    "FOR referrer_key IN referrer_keys LOOP\n        func_cmd := func_cmd ||\n          ' IF v_' || referrer_key.kind\n          || ' LIKE ''' || referrer_key.key_string\n          || ''' THEN RETURN ''' || referrer_key.referrer_type\n          || '''",
    "END LOOP;",
    "EXECUTE IMMEDIATE func_cmd;",
    "END;",
    "CREATE OR REPLACE PROCEDURE cs_update_referrer_type_proc() AS $func$\nDECLARE\n    referrer_keys CURSOR IS\n        SELECT * FROM cs_referrer_keys\n        ORDER BY try_order;\n    func_body text;\n    func_cmd text;\nBEGIN\n    func_body := 'BEGIN';\n\n    FOR referrer_key IN referrer_keys LOOP\n        func_body := func_body ||\n          ' IF v_' || referrer_key.kind\n          || ' LIKE ' || quote_literal(referrer_key.key_string)\n          || ' THEN RETURN ' || quote_literal(referrer_key.referrer_type)\n          || '; END IF;' ;\n    END LOOP;\n\n    func_body := func_body || ' RETURN NULL; END;';\n\n    func_cmd :=\n      'CREATE OR REPLACE FUNCTION cs_find_referrer_type(v_host varchar,\n                                                        v_domain varchar,\n                                                        v_url varchar)\n        RETURNS varchar AS '\n      || quote_literal(func_body)\n      || ' LANGUAGE plpgsql;' ;\n\n    EXECUTE func_cmd;\nEND;\n$func$ LANGUAGE plpgsql;",
    "CREATE OR REPLACE PROCEDURE cs_parse_url(\n    v_url IN VARCHAR2,\n    v_host OUT VARCHAR2,\nv_path OUT VARCHAR2,\nv_query OUT VARCHAR2)\nIS\n    a_pos1 INTEGER;",
    "BEGIN\n    v_host := NULL;",
    "IF a_pos1 = 0 THEN\n        RETURN",
    "END IF;",
    "IF a_pos2 = 0 THEN\n        v_host := substr(v_url, a_pos1 + 2)",
    "RETURN;",
    "END IF;",
    "IF a_pos1 = 0 THEN\n        v_path := substr(v_url, a_pos2)",
    "RETURN;",
    "END IF;",
    "END;",
    "CREATE OR REPLACE FUNCTION cs_parse_url(\n    v_url IN VARCHAR,\n    v_host OUT VARCHAR,\nv_path OUT VARCHAR,\nv_query OUT VARCHAR) AS $$\nDECLARE\n    a_pos1 INTEGER;\n    a_pos2 INTEGER;\nBEGIN\n    v_host := NULL;\n    v_path := NULL;\n    v_query := NULL;\n    a_pos1 := instr(v_url, '//');\n\n    IF a_pos1 = 0 THEN\n        RETURN;\n    END IF;\n    a_pos2 := instr(v_url, '/', a_pos1 + 2);\n    IF a_pos2 = 0 THEN\n        v_host := substr(v_url, a_pos1 + 2);\n        v_path := '/';\n        RETURN;\n    END IF;\n\n    v_host := substr(v_url, a_pos1 + 2, a_pos2 - a_pos1 - 2);\n    a_pos1 := instr(v_url, '?', a_pos2 + 1);\n\n    IF a_pos1 = 0 THEN\n        v_path := substr(v_url, a_pos2);\n        RETURN;\n    END IF;\n\n    v_path := substr(v_url, a_pos2, a_pos1 - a_pos2);\n    v_query := substr(v_url, a_pos1 + 1);\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT * FROM cs_parse_url('http://foobar.com/query.cgi?baz');",
    "CREATE OR REPLACE PROCEDURE cs_create_job(v_job_id IN INTEGER) IS\n    a_running_job_count INTEGER;",
    "BEGIN\n    LOCK TABLE cs_jobs IN EXCLUSIVE MODE;",
    "SELECT count(*) INTO a_running_job_count FROM cs_jobs WHERE end_stamp IS NULL;",
    "IF a_running_job_count > 0 THEN\n        COMMIT",
    "END IF;",
    "DELETE FROM cs_active_job;",
    "INSERT INTO cs_active_job(job_id) VALUES (v_job_id);",
    "BEGIN\n        INSERT INTO cs_jobs (job_id, start_stamp) VALUES (v_job_id, now());",
    "EXCEPTION\n        WHEN dup_val_on_index THEN NULL;",
    "END;",
    "COMMIT;",
    "END;",
    "CREATE OR REPLACE PROCEDURE cs_create_job(v_job_id integer) AS $$\nDECLARE\n    a_running_job_count integer;\nBEGIN\n    LOCK TABLE cs_jobs IN EXCLUSIVE MODE;\n\n    SELECT count(*) INTO a_running_job_count FROM cs_jobs WHERE end_stamp IS NULL;\n\n    IF a_running_job_count > 0 THEN\n        COMMIT; -- free lock\n        RAISE EXCEPTION 'Unable to create a new job: a job is currently running'; -- (1)\n    END IF;\n\n    DELETE FROM cs_active_job;\n    INSERT INTO cs_active_job(job_id) VALUES (v_job_id);\n\n    BEGIN\n        INSERT INTO cs_jobs (job_id, start_stamp) VALUES (v_job_id, now());\n    EXCEPTION\n        WHEN unique_violation THEN -- (2)\n            -- don't worry if it already exists\n    END;\n    COMMIT;\nEND;\n$$ LANGUAGE plpgsql;",
    "BEGIN\n    SAVEPOINT s1;",
    "EXCEPTION\n    WHEN ... THEN\n        ROLLBACK TO s1",
    "WHEN ... THEN\n        ROLLBACK TO s1",
    "END",
    "CREATE FUNCTION foo(...) RETURNS integer AS $$\n...\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;",
    "CREATE FUNCTION instr(varchar, varchar) RETURNS integer AS $$\nBEGIN\n    RETURN instr($1, $2, 1);\nEND;\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;",
    "CREATE FUNCTION instr(string varchar, string_to_search_for varchar,\n                      beg_index integer)\nRETURNS integer AS $$\nDECLARE\n    pos integer NOT NULL DEFAULT 0;\n    temp_str varchar;\n    beg integer;\n    length integer;\n    ss_length integer;\nBEGIN\n    IF beg_index > 0 THEN\n        temp_str := substring(string FROM beg_index);\n        pos := position(string_to_search_for IN temp_str);\n\n        IF pos = 0 THEN\n            RETURN 0;\n        ELSE\n            RETURN pos + beg_index - 1;\n        END IF;\n    ELSIF beg_index < 0 THEN\n        ss_length := char_length(string_to_search_for);\n        length := char_length(string);\n        beg := length + 1 + beg_index;\n\n        WHILE beg > 0 LOOP\n            temp_str := substring(string FROM beg FOR ss_length);\n            IF string_to_search_for = temp_str THEN\n                RETURN beg;\n            END IF;\n\n            beg := beg - 1;\n        END LOOP;\n\n        RETURN 0;\n    ELSE\n        RETURN 0;\n    END IF;\nEND;\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;",
    "CREATE FUNCTION instr(string varchar, string_to_search_for varchar,\n                      beg_index integer, occur_index integer)\nRETURNS integer AS $$\nDECLARE\n    pos integer NOT NULL DEFAULT 0;\n    occur_number integer NOT NULL DEFAULT 0;\n    temp_str varchar;\n    beg integer;\n    i integer;\n    length integer;\n    ss_length integer;\nBEGIN\n    IF occur_index <= 0 THEN\n        RAISE 'argument ''%'' is out of range', occur_index\n          USING ERRCODE = '22003';\n    END IF;\n\n    IF beg_index > 0 THEN\n        beg := beg_index - 1;\n        FOR i IN 1..occur_index LOOP\n            temp_str := substring(string FROM beg + 1);\n            pos := position(string_to_search_for IN temp_str);\n            IF pos = 0 THEN\n                RETURN 0;\n            END IF;\n            beg := beg + pos;\n        END LOOP;\n\n        RETURN beg;\n    ELSIF beg_index < 0 THEN\n        ss_length := char_length(string_to_search_for);\n        length := char_length(string);\n        beg := length + 1 + beg_index;\n\n        WHILE beg > 0 LOOP\n            temp_str := substring(string FROM beg FOR ss_length);\n            IF string_to_search_for = temp_str THEN\n                occur_number := occur_number + 1;\n                IF occur_number = occur_index THEN\n                    RETURN beg;\n                END IF;\n            END IF;\n\n            beg := beg - 1;\n        END LOOP;\n\n        RETURN 0;\n    ELSE\n        RETURN 0;\n    END IF;\nEND;\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;"
  ],
  "https://www.postgresql.org/docs/15/runtime.html": [],
  "https://www.postgresql.org/docs/15/external-projects.html": [],
  "https://www.postgresql.org/docs/15/system-catalog-declarations.html": [],
  "https://www.postgresql.org/docs/15/event-trigger-interface.html": [],
  "https://www.postgresql.org/docs/15/supported-platforms.html": [],
  "https://www.postgresql.org/docs/15/plperl-builtins.html": [
    "CREATE TABLE test (\n    i int,\n    v varchar\n);",
    "INSERT INTO test (i, v) VALUES (1, 'first line');",
    "INSERT INTO test (i, v) VALUES (2, 'second line');",
    "INSERT INTO test (i, v) VALUES (3, 'third line');",
    "INSERT INTO test (i, v) VALUES (4, 'immortal');",
    "CREATE OR REPLACE FUNCTION test_munge() RETURNS SETOF test AS $$\n    my $rv = spi_exec_query('select i, v from test;');\n    my $status = $rv->{status};\n    my $nrows = $rv->{processed};\n    foreach my $rn (0 .. $nrows - 1) {\n        my $row = $rv->{rows}[$rn];\n        $row->{i} += 200 if defined($row->{i});\n        $row->{v} =~ tr/A-Za-z/a-zA-Z/ if (defined($row->{v}));\n        return_next($row);\n    }\n    return undef;\n$$ LANGUAGE plperl;",
    "SELECT * FROM test_munge();",
    "CREATE TYPE foo_type AS (the_num INTEGER, the_text TEXT);",
    "CREATE OR REPLACE FUNCTION lotsa_md5 (INTEGER) RETURNS SETOF foo_type AS $$\n    use Digest::MD5 qw(md5_hex);\n    my $file = '/usr/share/dict/words';\n    my $t = localtime;\n    elog(NOTICE, \"opening file $file at $t\" );\n    open my $fh, '<', $file # ooh, it's a file access!\n        or elog(ERROR, \"cannot open $file for reading: $!\");\n    my @words = <$fh>;\n    close $fh;\n    $t = localtime;\n    elog(NOTICE, \"closed file $file at $t\");\n    chomp(@words);\n    my $row;\n    my $sth = spi_query(\"SELECT * FROM generate_series(1,$_[0]) AS b(a)\");\n    while (defined ($row = spi_fetchrow($sth))) {\n        return_next({\n            the_num => $row->{a},\n            the_text => md5_hex($words[rand @words])\n        });\n    }\n    return;\n$$ LANGUAGE plperlu;",
    "SELECT * from lotsa_md5(500);",
    "CREATE OR REPLACE FUNCTION init() RETURNS VOID AS $$\n        $_SHARED{my_plan} = spi_prepare('SELECT (now() + $1)::date AS now',\n                                        'INTERVAL');\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE FUNCTION add_time( INTERVAL ) RETURNS TEXT AS $$\n        return spi_exec_prepared(\n                $_SHARED{my_plan},\n                $_[0]\n        )->{rows}->[0]->{now};\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE FUNCTION done() RETURNS VOID AS $$\n        spi_freeplan( $_SHARED{my_plan});\n        undef $_SHARED{my_plan};\n$$ LANGUAGE plperl;",
    "SELECT init();",
    "SELECT add_time('1 day'), add_time('2 days'), add_time('3 days');",
    "SELECT done();",
    "CREATE TABLE hosts AS SELECT id, ('192.168.1.'||id)::inet AS address\n                      FROM generate_series(1,3) AS id;",
    "CREATE OR REPLACE FUNCTION init_hosts_query() RETURNS VOID AS $$\n        $_SHARED{plan} = spi_prepare('SELECT * FROM hosts\n                                      WHERE address << $1', 'inet');\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE FUNCTION query_hosts(inet) RETURNS SETOF hosts AS $$\n        return spi_exec_prepared(\n                $_SHARED{plan},\n                {limit => 2},\n                $_[0]\n        )->{rows};\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE FUNCTION release_hosts_query() RETURNS VOID AS $$\n        spi_freeplan($_SHARED{plan});\n        undef $_SHARED{plan};\n$$ LANGUAGE plperl;",
    "SELECT init_hosts_query();",
    "SELECT query_hosts('192.168.1.0/30');",
    "SELECT release_hosts_query();",
    "CREATE PROCEDURE transaction_test1()\nLANGUAGE plperl\nAS $$\nforeach my $i (0..9) {\n    spi_exec_query(\"INSERT INTO test1 (a) VALUES ($i)\");\n    if ($i % 2 == 0) {\n        spi_commit();\n    } else {\n        spi_rollback();\n    }\n}\n$$;",
    "CALL transaction_test1();"
  ],
  "https://www.postgresql.org/docs/15/sql-alterconversion.html": [
    "ALTER CONVERSION iso_8859_1_to_utf8 RENAME TO latin1_to_unicode;",
    "ALTER CONVERSION iso_8859_1_to_utf8 OWNER TO joe;"
  ],
  "https://www.postgresql.org/docs/15/sql-createtrigger.html": [
    "CREATE TRIGGER check_update\n    BEFORE UPDATE ON accounts\n    FOR EACH ROW\n    EXECUTE FUNCTION check_account_update();",
    "CREATE OR REPLACE TRIGGER check_update\n    BEFORE UPDATE OF balance ON accounts\n    FOR EACH ROW\n    EXECUTE FUNCTION check_account_update();",
    "CREATE TRIGGER check_update\n    BEFORE UPDATE ON accounts\n    FOR EACH ROW\n    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)\n    EXECUTE FUNCTION check_account_update();",
    "CREATE TRIGGER log_update\n    AFTER UPDATE ON accounts\n    FOR EACH ROW\n    WHEN (OLD.* IS DISTINCT FROM NEW.*)\n    EXECUTE FUNCTION log_account_update();",
    "CREATE TRIGGER view_insert\n    INSTEAD OF INSERT ON my_view\n    FOR EACH ROW\n    EXECUTE FUNCTION view_insert_row();",
    "CREATE TRIGGER transfer_insert\n    AFTER INSERT ON transfer\n    REFERENCING NEW TABLE AS inserted\n    FOR EACH STATEMENT\n    EXECUTE FUNCTION check_transfer_balances_to_zero();",
    "CREATE TRIGGER paired_items_update\n    AFTER UPDATE ON paired_items\n    REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab\n    FOR EACH ROW\n    EXECUTE FUNCTION check_matching_pairs();"
  ],
  "https://www.postgresql.org/docs/15/unaccent.html": [
    "ALTER TEXT SEARCH DICTIONARY unaccent (RULES='my_rules');",
    "select ts_lexize('unaccent','H\u00f4tel');",
    "CREATE TEXT SEARCH CONFIGURATION fr ( COPY = french );",
    "ALTER TEXT SEARCH CONFIGURATION fr\n        ALTER MAPPING FOR hword, hword_part, word\n        WITH unaccent, french_stem;",
    "select to_tsvector('fr','H\u00f4tels de la Mer');",
    "SELECT unaccent('unaccent', 'H\u00f4tel');",
    "SELECT unaccent('H\u00f4tel');"
  ],
  "https://www.postgresql.org/docs/15/external-pl.html": [],
  "https://www.postgresql.org/docs/15/infoschema-role-table-grants.html": [],
  "https://www.postgresql.org/docs/15/plpython-util.html": [
    "CREATE FUNCTION raise_custom_exception() RETURNS void AS $$\nplpy.error(\"custom exception message\",\n           detail=\"some info about exception\",\n           hint=\"hint for users\")\n$$ LANGUAGE plpython3u;",
    "SELECT raise_custom_exception();"
  ],
  "https://www.postgresql.org/docs/15/custom-rmgr.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execute-plan.html": [],
  "https://www.postgresql.org/docs/15/pltcl-overview.html": [],
  "https://www.postgresql.org/docs/15/bki-example.html": [
    "create test_table 420 (oid = oid, cola = int4, colb = text)\nopen test_table\ninsert ( 421 1 'value 1' )\ninsert ( 422 2 _null_ )\nclose test_table"
  ],
  "https://www.postgresql.org/docs/15/warm-standby.html": [
    "SELECT * FROM pg_create_physical_replication_slot('node_a_slot');",
    "SELECT slot_name, slot_type, active FROM pg_replication_slots"
  ],
  "https://www.postgresql.org/docs/15/infoschema-constraint-column-usage.html": [],
  "https://www.postgresql.org/docs/15/infoschema-udt-privileges.html": [],
  "https://www.postgresql.org/docs/15/largeobjects.html": [],
  "https://www.postgresql.org/docs/15/logical-replication-architecture.html": [],
  "https://www.postgresql.org/docs/15/sql-move.html": [
    "BEGIN WORK;",
    "DECLARE liahona CURSOR FOR SELECT * FROM films;",
    "MOVE FORWARD 5 IN liahona;",
    "MOVE 5",
    "FETCH 1 FROM liahona",
    "CLOSE liahona",
    "COMMIT WORK;"
  ],
  "https://www.postgresql.org/docs/15/sql-set-transaction.html": [
    "BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;",
    "SELECT pg_export_snapshot();",
    "BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;",
    "SET TRANSACTION SNAPSHOT '00000003-0000001B-1';"
  ],
  "https://www.postgresql.org/docs/15/app-initdb.html": [],
  "https://www.postgresql.org/docs/15/sql-createusermapping.html": [
    "CREATE USER MAPPING FOR bob SERVER foo OPTIONS (user 'bob', password 'secret');"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-fnumber.html": [],
  "https://www.postgresql.org/docs/15/view-pg-ident-file-mappings.html": [],
  "https://www.postgresql.org/docs/15/sql-dropforeigntable.html": [
    "DROP FOREIGN TABLE films, distributors;"
  ],
  "https://www.postgresql.org/docs/15/hstore.html": [
    "SELECT 'a=>1,a=>2'::hstore;",
    "CREATE TABLE mytable (h hstore);",
    "INSERT INTO mytable VALUES ('a=>b, c=>d');",
    "SELECT h['a'] FROM mytable;",
    "UPDATE mytable SET h['c'] = 'new'",
    "SELECT h FROM mytable;",
    "CREATE INDEX hidx ON testhstore USING GIST (h);",
    "CREATE INDEX hidx ON testhstore USING GIN (h);",
    "CREATE INDEX hidx ON testhstore USING GIST (h gist_hstore_ops(siglen=32));",
    "CREATE INDEX hidx ON testhstore USING BTREE (h);",
    "CREATE INDEX hidx ON testhstore USING HASH (h);",
    "UPDATE tab SET h['c'] = '3';",
    "UPDATE tab SET h = h || hstore('c', '3');",
    "UPDATE tab SET h = h || hstore(array['q', 'w'], array['11', '12']);",
    "UPDATE tab SET h = delete(h, 'k1');",
    "CREATE TABLE test (col1 integer, col2 text, col3 text);",
    "INSERT INTO test VALUES (123, 'foo', 'bar');",
    "SELECT hstore(t) FROM test AS t;",
    "CREATE TABLE test (col1 integer, col2 text, col3 text);",
    "SELECT * FROM populate_record(null::test,\n                              '\"col1\"=>\"456\", \"col2\"=>\"zzz\"');",
    "CREATE TABLE test (col1 integer, col2 text, col3 text);",
    "INSERT INTO test VALUES (123, 'foo', 'bar');",
    "SELECT (r).* FROM (SELECT t #= '\"col3\"=>\"baz\"' AS r FROM test t) s;",
    "SELECT * FROM each('aaa=>bq, b=>NULL, \"\"=>1');",
    "CREATE TABLE stat AS SELECT (each(h)).key, (each(h)).value FROM testhstore;",
    "SELECT key, count(*) FROM\n  (SELECT (each(h)).key FROM testhstore) AS stat\n  GROUP BY key\n  ORDER BY count DESC, key;",
    "UPDATE tablename SET hstorecol = hstorecol || '';",
    "ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';"
  ],
  "https://www.postgresql.org/docs/15/libpq-single-row-mode.html": [],
  "https://www.postgresql.org/docs/15/rangetypes.html": [
    "CREATE TABLE reservation (room int, during tsrange);",
    "INSERT INTO reservation VALUES\n    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');",
    "SELECT int4range(10, 20) @> 3;",
    "SELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);",
    "SELECT upper(int8range(15, 25));",
    "SELECT int4range(10, 20) * int4range(15, 25);",
    "SELECT isempty(numrange(1, 5));",
    "SELECT '[3,7)'::int4range;",
    "SELECT '(3,7)'::int4range;",
    "SELECT '[4,4]'::int4range;",
    "SELECT '[4,4)'::int4range;",
    "SELECT '{}'::int4multirange;",
    "SELECT '{[3,7)}'::int4multirange;",
    "SELECT '{[3,7), [8,9)}'::int4multirange;",
    "SELECT numrange(1.0, 14.0, '(]');",
    "SELECT numrange(1.0, 14.0);",
    "SELECT int8range(1, 14, '(]');",
    "SELECT numrange(NULL, 2.2);",
    "SELECT nummultirange();",
    "SELECT nummultirange(numrange(1.0, 14.0));",
    "SELECT nummultirange(numrange(1.0, 14.0), numrange(20.0, 25.0));",
    "CREATE TYPE floatrange AS RANGE (\n    subtype = float8,\n    subtype_diff = float8mi\n);",
    "SELECT '[1.234, 5.678]'::floatrange;",
    "CREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS\n'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;",
    "CREATE TYPE timerange AS RANGE (\n    subtype = time,\n    subtype_diff = time_subtype_diff\n);",
    "SELECT '[11:10, 23:00]'::timerange;",
    "CREATE INDEX reservation_idx ON reservation USING GIST (during);",
    "CREATE TABLE reservation (\n    during tsrange,\n    EXCLUDE USING GIST (during WITH &&)\n);",
    "INSERT INTO reservation VALUES\n    ('[2010-01-01 11:30, 2010-01-01 15:00)');",
    "INSERT 0 1\n\nINSERT INTO reservation VALUES\n    ('[2010-01-01 14:45, 2010-01-01 15:45)');",
    "CREATE EXTENSION btree_gist;",
    "CREATE TABLE room_reservation (\n    room text,\n    during tsrange,\n    EXCLUDE USING GIST (room WITH =, during WITH &&)\n);",
    "INSERT INTO room_reservation VALUES\n    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');",
    "INSERT 0 1\n\nINSERT INTO room_reservation VALUES\n    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');",
    "INSERT INTO room_reservation VALUES\n    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)')",
    "INSERT 0 1"
  ],
  "https://www.postgresql.org/docs/15/color-which.html": [],
  "https://www.postgresql.org/docs/15/spgist-builtin-opclasses.html": [],
  "https://www.postgresql.org/docs/15/cube.html": [
    "SELECT c FROM test ORDER BY c <-> cube(array[0.5,0.5,0.5]) LIMIT 1;",
    "SELECT c FROM test ORDER BY c ~> 1 LIMIT 5;",
    "SELECT c FROM test ORDER BY c ~> 3 DESC LIMIT 5;",
    "select cube_union('(0,5,2),(2,3,1)', '0');",
    "select cube_inter('(0,-1),(1,1)', '(-2),(2)');",
    "select cube_contains('(0,0),(1,1)', '0.5,0.5');"
  ],
  "https://www.postgresql.org/docs/15/routine-vacuuming.html": [
    "SELECT c.oid::regclass as table_name,\n       greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age\nFROM pg_class c\nLEFT JOIN pg_class t ON c.reltoastrelid = t.oid\nWHERE c.relkind IN ('r', 'm');",
    "SELECT datname, age(datfrozenxid) FROM pg_database;"
  ],
  "https://www.postgresql.org/docs/15/logical-replication-publication.html": [],
  "https://www.postgresql.org/docs/15/sql-rollback-to.html": [
    "ROLLBACK TO SAVEPOINT my_savepoint;",
    "BEGIN;",
    "DECLARE foo CURSOR FOR SELECT 1 UNION SELECT 2;",
    "SAVEPOINT foo;",
    "FETCH 1 FROM foo;",
    "ROLLBACK TO SAVEPOINT foo",
    "FETCH 1 FROM foo;",
    "COMMIT"
  ],
  "https://www.postgresql.org/docs/15/logicaldecoding.html": [],
  "https://www.postgresql.org/docs/15/sql-start-transaction.html": [],
  "https://www.postgresql.org/docs/15/custom-scan.html": [],
  "https://www.postgresql.org/docs/15/pageinspect.html": [],
  "https://www.postgresql.org/docs/15/libpq-async.html": [],
  "https://www.postgresql.org/docs/15/tsm-system-time.html": [
    "CREATE EXTENSION tsm_system_time;",
    "SELECT * FROM my_table TABLESAMPLE SYSTEM_TIME(1000);"
  ],
  "https://www.postgresql.org/docs/15/datatype-bit.html": [
    "CREATE TABLE test (a BIT(3), b BIT VARYING(5));",
    "INSERT INTO test VALUES (B'101', B'00');",
    "INSERT INTO test VALUES (B'10', B'101');",
    "INSERT INTO test VALUES (B'10'::bit(3), B'101')",
    "SELECT * FROM test;"
  ],
  "https://www.postgresql.org/docs/15/logicaldecoding-sql.html": [],
  "https://www.postgresql.org/docs/15/sql-dropopclass.html": [
    "DROP OPERATOR CLASS widget_ops USING btree;"
  ],
  "https://www.postgresql.org/docs/15/custom-scan-path.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-cast.html": [],
  "https://www.postgresql.org/docs/15/view-pg-locks.html": [
    "SELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa\n    ON pl.pid = psa.pid;",
    "SELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx\n    ON pl.virtualtransaction = '-1/' || ppx.transaction;"
  ],
  "https://www.postgresql.org/docs/15/sql-createopfamily.html": [],
  "https://www.postgresql.org/docs/15/ddl.html": [],
  "https://www.postgresql.org/docs/15/lo-funcs.html": [
    "CREATE TABLE image (\n    name            text,\n    raster          oid\n);",
    "SELECT lo_creat(-1);",
    "SELECT lo_create(43213);",
    "SELECT lo_unlink(173454);",
    "INSERT INTO image (name, raster)\n    VALUES ('beautiful image', lo_import('/etc/motd'));",
    "INSERT INTO image (name, raster)\nVALUES ('beautiful image', lo_import('/etc/motd', 68583));",
    "SELECT lo_export(image.raster, '/tmp/motd') FROM image\n    WHERE name = 'beautiful image';"
  ],
  "https://www.postgresql.org/docs/15/infoschema-administrable-role-authorizations.html": [],
  "https://www.postgresql.org/docs/15/sql-select.html": [
    "SELECT DISTINCT ON (location) location, time, report\n    FROM weather_reports\n    ORDER BY location, time DESC;",
    "SELECT name FROM distributors ORDER BY code;",
    "SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;",
    "BEGIN;",
    "SELECT * FROM mytable WHERE key = 1 FOR UPDATE;",
    "SAVEPOINT s;",
    "UPDATE mytable SET ... WHERE key = 1;",
    "ROLLBACK TO s;",
    "SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;",
    "TABLE name",
    "SELECT * FROM name",
    "SELECT f.title, f.did, d.name, f.date_prod, f.kind\n    FROM distributors d JOIN films f USING (did);",
    "SELECT kind, sum(len) AS total FROM films GROUP BY kind;",
    "SELECT kind, sum(len) AS total\n    FROM films\n    GROUP BY kind\n    HAVING sum(len) < interval '5 hours';",
    "SELECT * FROM distributors ORDER BY name;",
    "SELECT * FROM distributors ORDER BY 2;",
    "SELECT distributors.name\n    FROM distributors\n    WHERE distributors.name LIKE 'W%'\nUNION\nSELECT actors.name\n    FROM actors\n    WHERE actors.name LIKE 'W%'",
    "CREATE FUNCTION distributors(int) RETURNS SETOF distributors AS $$\n    SELECT * FROM distributors WHERE did = $1;\n$$ LANGUAGE SQL;",
    "SELECT * FROM distributors(111);",
    "CREATE FUNCTION distributors_2(int) RETURNS SETOF record AS $$\n    SELECT * FROM distributors WHERE did = $1",
    "SELECT * FROM distributors_2(111) AS (f1 int, f2 text);",
    "SELECT * FROM unnest(ARRAY['a','b','c','d','e','f']) WITH ORDINALITY;",
    "WITH t AS (\n    SELECT random() as x FROM generate_series(1, 3)\n  )\nSELECT * FROM t\nUNION ALL\nSELECT * FROM t\n\n         x\n\n0.534150459803641\n  0.520092216785997\n 0.0735620250925422\n  0.534150459803641\n  0.520092216785997\n 0.0735620250925422",
    "WITH RECURSIVE employee_recursive(distance, employee_name, manager_name) AS (\n    SELECT 1, employee_name, manager_name\n    FROM employee\n    WHERE manager_name = 'Mary'\n  UNION ALL\n    SELECT er.distance + 1, e.employee_name, e.manager_name\n    FROM employee_recursive er, employee e\n    WHERE er.employee_name = e.manager_name\n  )\nSELECT distance, employee_name FROM employee_recursive",
    "SELECT m.name AS mname, pname\nFROM manufacturers m, LATERAL get_product_names(m.id) pname;",
    "SELECT m.name AS mname, pname\nFROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true;",
    "SELECT 2+2;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-conversion.html": [],
  "https://www.postgresql.org/docs/15/sql-checkpoint.html": [],
  "https://www.postgresql.org/docs/15/view-pg-policies.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-get-result.html": [],
  "https://www.postgresql.org/docs/15/limits.html": [],
  "https://www.postgresql.org/docs/15/sql-alterlanguage.html": [],
  "https://www.postgresql.org/docs/15/sql-set-session-authorization.html": [
    "SELECT SESSION_USER, CURRENT_USER;",
    "SET SESSION AUTHORIZATION 'paul'",
    "SELECT SESSION_USER, CURRENT_USER;"
  ],
  "https://www.postgresql.org/docs/15/xtypes.html": [
    "CREATE TYPE complex;",
    "CREATE FUNCTION complex_in(cstring)\n    RETURNS complex\n    AS 'filename'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE FUNCTION complex_out(complex)\n    RETURNS cstring\n    AS 'filename'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE FUNCTION complex_recv(internal)\n   RETURNS complex\n   AS 'filename'\n   LANGUAGE C IMMUTABLE STRICT;",
    "CREATE FUNCTION complex_send(complex)\n   RETURNS bytea\n   AS 'filename'\n   LANGUAGE C IMMUTABLE STRICT;",
    "CREATE TYPE complex (\n   internallength = 16,\n   input = complex_in,\n   output = complex_out,\n   receive = complex_recv,\n   send = complex_send,\n   alignment = double\n);"
  ],
  "https://www.postgresql.org/docs/15/app-pgrecvlogical.html": [],
  "https://www.postgresql.org/docs/15/sql-vacuum.html": [
    "VACUUM (VERBOSE, ANALYZE) onek;"
  ],
  "https://www.postgresql.org/docs/15/xfunc-sql.html": [
    "INSERT INTO mytable VALUES ($1);",
    "INSERT INTO $1 VALUES (42);",
    "CREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS numeric AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tf1.accountno;\n    SELECT 1;\n$$ LANGUAGE SQL;",
    "SELECT tf1(17, 100.0);",
    "CREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS numeric AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tf1.accountno;\n    SELECT balance FROM bank WHERE accountno = tf1.accountno;\n$$ LANGUAGE SQL;",
    "CREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS numeric AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tf1.accountno\n    RETURNING balance;\n$$ LANGUAGE SQL;",
    "CREATE FUNCTION add_em(integer, integer) RETURNS float8 AS $$\n    SELECT $1 + $2;\n$$ LANGUAGE SQL;",
    "CREATE FUNCTION new_emp() RETURNS emp AS $$\n    SELECT text 'None' AS name,\n        1000.0 AS salary,\n        25 AS age,\n        point '(2,2)' AS cubicle;\n$$ LANGUAGE SQL;",
    "CREATE FUNCTION new_emp() RETURNS emp AS $$\n    SELECT ROW('None', 1000.0, 25, '(2,2)')::emp;\n$$ LANGUAGE SQL;",
    "CREATE PROCEDURE tp1 (accountno integer, debit numeric, OUT new_balance numeric) AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tp1.accountno\n    RETURNING balance;\n$$ LANGUAGE SQL;",
    "CALL tp1(17, 100.0, NULL);",
    "CREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$\n    SELECT * FROM foo WHERE fooid = $1;\n$$ LANGUAGE SQL;",
    "SELECT * FROM getfoo(1) AS t1;",
    "CREATE TABLE tab (y int, z int);",
    "INSERT INTO tab VALUES (1, 2), (3, 4), (5, 6), (7, 8);",
    "CREATE FUNCTION sum_n_product_with_tab (x int, OUT sum int, OUT product int)\nRETURNS SETOF record\nAS $$\n    SELECT $1 + tab.y, $1 * tab.y FROM tab;\n$$ LANGUAGE SQL;",
    "SELECT * FROM sum_n_product_with_tab(10);",
    "SELECT x, generate_series(1,5) AS g FROM tab;",
    "SELECT x, g FROM tab, LATERAL generate_series(1,5) AS g;",
    "SELECT srf1(srf2(x), srf3(y)), srf4(srf5(z)) FROM tab;",
    "SELECT x, CASE WHEN x > 0 THEN generate_series(1, 5) ELSE 0 END FROM tab;",
    "SELECT x, CASE WHEN y > 0 THEN generate_series(1, z) ELSE 5 END FROM tab;",
    "CREATE FUNCTION case_generate_series(cond bool, start int, fin int, els int)\n  RETURNS SETOF int AS $$\nBEGIN\n  IF cond THEN\n    RETURN QUERY SELECT generate_series(start, fin);\n  ELSE\n    RETURN QUERY SELECT els;\n  END IF;\nEND$$ LANGUAGE plpgsql;",
    "SELECT x, case_generate_series(y > 0, 1, z, 5) FROM tab;",
    "CREATE FUNCTION sum_n_product_with_tab (x int)\nRETURNS TABLE(sum int, product int) AS $$\n    SELECT $1 + tab.y, $1 * tab.y FROM tab;\n$$ LANGUAGE SQL;",
    "SELECT anyleast('abc'::text, 'ABC');",
    "SELECT anyleast('abc'::text, 'ABC' COLLATE \"C\");",
    "CREATE FUNCTION anyleast (VARIADIC anyarray) RETURNS anyelement AS $$\n    SELECT min($1[i] COLLATE \"en_US\") FROM generate_subscripts($1, 1) g(i);\n$$ LANGUAGE SQL;"
  ],
  "https://www.postgresql.org/docs/15/spi-spi-keepplan.html": [],
  "https://www.postgresql.org/docs/15/sql-show.html": [
    "SHOW DateStyle;",
    "SHOW geqo;",
    "SHOW ALL;"
  ],
  "https://www.postgresql.org/docs/15/datatype.html": [],
  "https://www.postgresql.org/docs/15/manage-ag-overview.html": [],
  "https://www.postgresql.org/docs/15/infoschema-foreign-tables.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-getrelname.html": [],
  "https://www.postgresql.org/docs/15/sql-dropstatistics.html": [
    "DROP STATISTICS IF EXISTS\n    accounting.users_uid_creation,\n    public.grants_user_role;"
  ],
  "https://www.postgresql.org/docs/15/dml-delete.html": [
    "DELETE FROM products WHERE price = 10;",
    "DELETE FROM products;"
  ],
  "https://www.postgresql.org/docs/15/logical-replication-col-lists.html": [
    "CREATE TABLE t1(id int, a text, b text, c text, d text, e text, PRIMARY KEY(id));",
    "CREATE TABLE",
    "CREATE PUBLICATION p1 FOR TABLE t1 (id, b, a, d);",
    "CREATE PUBLICATION",
    "CREATE TABLE t1(id int, b text, a text, d text, PRIMARY KEY(id));",
    "CREATE TABLE\n CREATE SUBSCRIPTION s1\ntest_sub-# CONNECTION 'host=localhost dbname=test_pub application_name=s1'\ntest_sub-# PUBLICATION p1;",
    "CREATE SUBSCRIPTION",
    "INSERT INTO t1 VALUES(1, 'a-1', 'b-1', 'c-1', 'd-1', 'e-1');",
    "INSERT 0 1\n INSERT INTO t1 VALUES(2, 'a-2', 'b-2', 'c-2', 'd-2', 'e-2');",
    "INSERT 0 1\n INSERT INTO t1 VALUES(3, 'a-3', 'b-3', 'c-3', 'd-3', 'e-3');",
    "INSERT 0 1\n SELECT * FROM t1 ORDER BY id;",
    "SELECT * FROM t1 ORDER BY id;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-user-mapping-options.html": [],
  "https://www.postgresql.org/docs/15/storage-fsm.html": [],
  "https://www.postgresql.org/docs/15/sql-altersequence.html": [
    "ALTER SEQUENCE serial RESTART WITH 105;"
  ],
  "https://www.postgresql.org/docs/15/views-overview.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-implementation.html": [
    "INSERT INTO foo (foo) VALUES (foo(foo));",
    "INSERT INTO dest (col) SELECT foo + bar FROM src;",
    "DECLARE\n    foo int",
    "BEGIN\n    foo := ...;",
    "INSERT INTO dest (col) SELECT block.foo + bar FROM src;",
    "CREATE FUNCTION stamp_user(id int, comment text) RETURNS void AS $$\n    #variable_conflict use_variable\n    DECLARE\n        curtime timestamp := now();\n    BEGIN\n        UPDATE users SET last_modified = curtime, comment = comment\n          WHERE users.id = id;\n    END;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION stamp_user(id int, comment text) RETURNS void AS $$\n    <<fn>>\n    DECLARE\n        curtime timestamp := now();\n    BEGIN\n        UPDATE users SET last_modified = fn.curtime, comment = stamp_user.comment\n          WHERE users.id = stamp_user.id;\n    END;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION logfunc1(logtxt text) RETURNS void AS $$\n    BEGIN\n        INSERT INTO logtable VALUES (logtxt, 'now');\n    END;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION logfunc2(logtxt text) RETURNS void AS $$\n    DECLARE\n        curtime timestamp;\n    BEGIN\n        curtime := 'now';\n        INSERT INTO logtable VALUES (logtxt, curtime);\n    END;\n$$ LANGUAGE plpgsql;"
  ],
  "https://www.postgresql.org/docs/15/runtime-config-logging.html": [
    "SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||\n       to_hex(pid)\nFROM pg_stat_activity;",
    "CREATE TABLE postgres_log\n(\n  log_time timestamp(3) with time zone,\n  user_name text,\n  database_name text,\n  process_id integer,\n  connection_from text,\n  session_id text,\n  session_line_num bigint,\n  command_tag text,\n  session_start_time timestamp with time zone,\n  virtual_transaction_id text,\n  transaction_id bigint,\n  error_severity text,\n  sql_state_code text,\n  message text,\n  detail text,\n  hint text,\n  internal_query text,\n  internal_query_pos integer,\n  context text,\n  query text,\n  query_pos integer,\n  location text,\n  application_name text,\n  backend_type text,\n  leader_pid integer,\n  query_id bigint,\n  PRIMARY KEY (session_id, session_line_num)\n);",
    "COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;"
  ],
  "https://www.postgresql.org/docs/15/app-pg-ctl.html": [],
  "https://www.postgresql.org/docs/15/ddl-priv.html": [
    "ALTER TABLE table_name OWNER TO new_owner;",
    "GRANT UPDATE ON accounts TO joe;",
    "REVOKE ALL ON accounts FROM PUBLIC;",
    "GRANT SELECT ON mytable TO PUBLIC;",
    "GRANT SELECT, UPDATE, INSERT ON mytable TO admin;",
    "GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;"
  ],
  "https://www.postgresql.org/docs/15/spgist-extensibility.html": [
    "CREATE FUNCTION my_config(internal, internal) RETURNS void ...",
    "CREATE FUNCTION my_choose(internal, internal) RETURNS void ...",
    "CREATE FUNCTION my_picksplit(internal, internal) RETURNS void ...",
    "CREATE FUNCTION my_inner_consistent(internal, internal) RETURNS void ...",
    "CREATE FUNCTION my_leaf_consistent(internal, internal) RETURNS bool ...",
    "CREATE OR REPLACE FUNCTION my_options(internal)\nRETURNS void\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;"
  ],
  "https://www.postgresql.org/docs/15/parser-stage.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execute.html": [],
  "https://www.postgresql.org/docs/15/index-api.html": [],
  "https://www.postgresql.org/docs/15/install-procedure.html": [],
  "https://www.postgresql.org/docs/15/sql-dropsubscription.html": [
    "DROP SUBSCRIPTION mysub;"
  ],
  "https://www.postgresql.org/docs/15/sql-droptstemplate.html": [
    "DROP TEXT SEARCH TEMPLATE thesaurus;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-foreign-data-wrappers.html": [],
  "https://www.postgresql.org/docs/15/trigger-interface.html": [],
  "https://www.postgresql.org/docs/15/sql-dropoperator.html": [
    "DROP OPERATOR ^ (integer, integer);",
    "DROP OPERATOR ~ (none, bit);",
    "DROP OPERATOR ~ (none, bit), ^ (integer, integer);"
  ],
  "https://www.postgresql.org/docs/15/xfunc-optimization.html": [],
  "https://www.postgresql.org/docs/15/sql-createfunction.html": [
    "RETURN expression",
    "BEGIN ATOMIC\n  statement",
    "END",
    "CREATE FUNCTION foo(int) ...\nCREATE FUNCTION foo(int, out text) ...",
    "CREATE FUNCTION foo(int) ...\nCREATE FUNCTION foo(int, int default 42) ...",
    "CREATE FUNCTION add(integer, integer) RETURNS integer\n    AS 'select $1 + $2;'\n    LANGUAGE SQL\n    IMMUTABLE\n    RETURNS NULL ON NULL INPUT;",
    "CREATE FUNCTION add(a integer, b integer) RETURNS integer\n    LANGUAGE SQL\n    IMMUTABLE\n    RETURNS NULL ON NULL INPUT\n    RETURN a + b;",
    "CREATE OR REPLACE FUNCTION increment(i integer) RETURNS integer AS $$\n        BEGIN\n                RETURN i + 1;\n        END;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION dup(in int, out f1 int, out f2 text)\n    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$\n    LANGUAGE SQL;",
    "SELECT * FROM dup(42);",
    "CREATE TYPE dup_result AS (f1 int, f2 text);",
    "CREATE FUNCTION dup(int) RETURNS dup_result\n    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$\n    LANGUAGE SQL;",
    "SELECT * FROM dup(42);",
    "CREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text)\n    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$\n    LANGUAGE SQL;",
    "SELECT * FROM dup(42);",
    "CREATE FUNCTION check_password(uname TEXT, pass TEXT)\nRETURNS BOOLEAN AS $$\nDECLARE passed BOOLEAN;\nBEGIN\n        SELECT  (pwd = $2) INTO passed\n        FROM    pwds\n        WHERE   username = $1;\n\n        RETURN passed;\nEND;\n$$  LANGUAGE plpgsql\n    SECURITY DEFINER\n\nSET search_path = admin, pg_temp;",
    "BEGIN;",
    "CREATE FUNCTION check_password(uname TEXT, pass TEXT) ... SECURITY DEFINER;",
    "REVOKE ALL ON FUNCTION check_password(uname TEXT, pass TEXT) FROM PUBLIC;",
    "GRANT EXECUTE ON FUNCTION check_password(uname TEXT, pass TEXT) TO admins;",
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/sql-createtableas.html": [
    "CREATE TABLE films_recent AS\n  SELECT * FROM films WHERE date_prod >= '2002-01-01';",
    "CREATE TABLE films2 AS\n  TABLE films;",
    "PREPARE recentfilms(date) AS\n  SELECT * FROM films WHERE date_prod > $1",
    "CREATE TEMP TABLE films_recent ON COMMIT DROP AS\n  EXECUTE recentfilms('2002-01-01');"
  ],
  "https://www.postgresql.org/docs/15/dml.html": [],
  "https://www.postgresql.org/docs/15/infoschema-datatypes.html": [],
  "https://www.postgresql.org/docs/15/datatype-net-types.html": [
    "SELECT macaddr8_set7bit('08:00:2b:01:02:03');"
  ],
  "https://www.postgresql.org/docs/15/btree-gin.html": [
    "CREATE TABLE test (a int4);",
    "CREATE INDEX testidx ON test USING GIN (a);",
    "SELECT * FROM test WHERE a < 10;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-column-privileges.html": [],
  "https://www.postgresql.org/docs/15/app-pgchecksums.html": [],
  "https://www.postgresql.org/docs/15/xoper-optimization.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-get-descriptor.html": [
    "EXEC SQL GET DESCRIPTOR d :d_count = COUNT;",
    "EXEC SQL GET DESCRIPTOR d VALUE 1 :d_returned_octet_length = RETURNED_OCTET_LENGTH;",
    "EXEC SQL GET DESCRIPTOR d VALUE 2 :d_data = DATA;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb AS con1 USER testuser;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL ALLOCATE DESCRIPTOR d;",
    "EXEC SQL DECLARE cur CURSOR FOR SELECT current_database();",
    "EXEC SQL OPEN cur;",
    "EXEC SQL FETCH NEXT FROM cur INTO SQL DESCRIPTOR d;",
    "EXEC SQL GET DESCRIPTOR d :d_count = COUNT;",
    "EXEC SQL GET DESCRIPTOR d VALUE 1 :d_returned_octet_length = RETURNED_OCTET_LENGTH;",
    "EXEC SQL GET DESCRIPTOR d VALUE 1 :d_data = DATA;",
    "EXEC SQL CLOSE cur;",
    "EXEC SQL COMMIT;",
    "EXEC SQL DEALLOCATE DESCRIPTOR d;",
    "EXEC SQL DISCONNECT ALL;"
  ],
  "https://www.postgresql.org/docs/15/pltcl-trigger.html": [
    "CREATE FUNCTION trigfunc_modcount() RETURNS trigger AS $$\n    switch $TG_op {\n        INSERT {\n            set NEW($1) 0\n        }\n        UPDATE {\n            set NEW($1) $OLD($1)\n            incr NEW($1)\n        }\n        default {\n            return OK\n        }\n    }\n    return [array get NEW]\n$$ LANGUAGE pltcl;",
    "CREATE TABLE mytab (num integer, description text, modcnt integer);",
    "CREATE TRIGGER trig_mytab_modcount BEFORE INSERT OR UPDATE ON mytab\n    FOR EACH ROW EXECUTE FUNCTION trigfunc_modcount('modcnt');"
  ],
  "https://www.postgresql.org/docs/15/tutorial-window.html": [
    "SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;",
    "SELECT depname, empno, salary,\n       rank() OVER (PARTITION BY depname ORDER BY salary DESC)\nFROM empsalary;",
    "SELECT salary, sum(salary) OVER () FROM empsalary;",
    "SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;",
    "SELECT depname, empno, salary, enroll_date\nFROM\n  (SELECT depname, empno, salary, enroll_date,\n          rank() OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos\n     FROM empsalary\n  ) AS ss\nWHERE pos < 3;",
    "SELECT sum(salary) OVER w, avg(salary) OVER w\n  FROM empsalary\n  WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-am.html": [],
  "https://www.postgresql.org/docs/15/libpq-envars.html": [],
  "https://www.postgresql.org/docs/15/dml-returning.html": [
    "CREATE TABLE users (firstname text, lastname text, id serial primary key);",
    "INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id;",
    "UPDATE products SET price = price * 1.10\n  WHERE price <= 99.99\n  RETURNING name, price AS new_price;",
    "DELETE FROM products\n  WHERE obsoletion_date = 'today'\n  RETURNING *;"
  ],
  "https://www.postgresql.org/docs/15/plperl-global.html": [
    "CREATE OR REPLACE FUNCTION set_var(name text, val text) RETURNS text AS $$\n    if ($_SHARED{$_[0]} = $_[1]) {\n        return 'ok';\n    } else {\n        return \"cannot set shared variable $_[0] to $_[1]\";\n    }\n$$ LANGUAGE plperl;",
    "CREATE OR REPLACE FUNCTION get_var(name text) RETURNS text AS $$\n    return $_SHARED{$_[0]};\n$$ LANGUAGE plperl;",
    "SELECT set_var('sample', 'Hello, PL/Perl!  How''s tricks?');",
    "SELECT get_var('sample');",
    "CREATE OR REPLACE FUNCTION myfuncs() RETURNS void AS $$\n    $_SHARED{myquote} = sub {\n        my $arg = shift;\n        $arg =~ s/(['\\\\])/\\\\$1/g;\n        return \"'$arg'\";\n    };\n$$ LANGUAGE plperl;",
    "SELECT myfuncs();",
    "CREATE OR REPLACE FUNCTION use_quote(TEXT) RETURNS text AS $$\n    my $text_to_quote = shift;\n    my $qfunc = $_SHARED{myquote};\n    return &$qfunc($text_to_quote);\n$$ LANGUAGE plperl;"
  ],
  "https://www.postgresql.org/docs/15/adminpack.html": [],
  "https://www.postgresql.org/docs/15/textsearch-controls.html": [
    "UPDATE tt SET ti =\n    setweight(to_tsvector(coalesce(title,'')), 'A')    ||\n    setweight(to_tsvector(coalesce(keyword,'')), 'B')  ||\n    setweight(to_tsvector(coalesce(abstract,'')), 'C') ||\n    setweight(to_tsvector(coalesce(body,'')), 'D');"
  ],
  "https://www.postgresql.org/docs/15/sql-do.html": [
    "DO $$DECLARE r record",
    "BEGIN\n    FOR r IN SELECT table_schema, table_name FROM information_schema.tables\n             WHERE table_type = 'VIEW' AND table_schema = 'public'\n    LOOP\n        EXECUTE 'GRANT ALL ON ' || quote_ident(r.table_schema) || '.' || quote_ident(r.table_name) || ' TO webuser'",
    "END LOOP"
  ],
  "https://www.postgresql.org/docs/15/view-pg-group.html": [],
  "https://www.postgresql.org/docs/15/admin.html": [],
  "https://www.postgresql.org/docs/15/auth-peer.html": [],
  "https://www.postgresql.org/docs/15/app-createdb.html": [],
  "https://www.postgresql.org/docs/15/pltcl-event-trigger.html": [
    "CREATE OR REPLACE FUNCTION tclsnitch() RETURNS event_trigger AS $$\n  elog NOTICE \"tclsnitch: $TG_event $TG_tag\"\n$$ LANGUAGE pltcl;",
    "CREATE EVENT TRIGGER tcl_a_snitch ON ddl_command_start EXECUTE FUNCTION tclsnitch();"
  ],
  "https://www.postgresql.org/docs/15/sql-dropmaterializedview.html": [
    "DROP MATERIALIZED VIEW order_summary;"
  ],
  "https://www.postgresql.org/docs/15/views.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-foreign-data-wrapper.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-largeobject.html": [],
  "https://www.postgresql.org/docs/15/sql-dropserver.html": [
    "DROP SERVER IF EXISTS foo;"
  ],
  "https://www.postgresql.org/docs/15/datatype-character.html": [
    "CREATE TABLE test1 (a character(4));",
    "INSERT INTO test1 VALUES ('ok');",
    "SELECT a, char_length(a) FROM test1;",
    "CREATE TABLE test2 (b varchar(5))",
    "INSERT INTO test2 VALUES ('ok');",
    "INSERT INTO test2 VALUES ('good      ');",
    "INSERT INTO test2 VALUES ('too long');",
    "INSERT INTO test2 VALUES ('too long'::varchar(5))",
    "SELECT b, char_length(b) FROM test2;"
  ],
  "https://www.postgresql.org/docs/15/unsupported-features-sql-standard.html": [],
  "https://www.postgresql.org/docs/15/gist-intro.html": [],
  "https://www.postgresql.org/docs/15/functions-formatting.html": [],
  "https://www.postgresql.org/docs/15/view-pg-publication-tables.html": [],
  "https://www.postgresql.org/docs/15/spi-interface-support.html": [],
  "https://www.postgresql.org/docs/15/generic-wal.html": [],
  "https://www.postgresql.org/docs/15/view-pg-file-settings.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-init-privs.html": [],
  "https://www.postgresql.org/docs/15/storage-toast.html": [],
  "https://www.postgresql.org/docs/15/sql-fetch.html": [
    "BEGIN WORK;",
    "DECLARE liahona SCROLL CURSOR FOR SELECT * FROM films;",
    "FETCH FORWARD 5 FROM liahona;",
    "FETCH PRIOR FROM liahona",
    "CLOSE liahona",
    "COMMIT WORK;"
  ],
  "https://www.postgresql.org/docs/15/default-roles.html": [],
  "https://www.postgresql.org/docs/15/xfunc-volatility.html": [],
  "https://www.postgresql.org/docs/15/acronyms.html": [],
  "https://www.postgresql.org/docs/15/app-pgresetxlog.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-connect.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-open-with-args.html": [],
  "https://www.postgresql.org/docs/15/gist-builtin-opclasses.html": [
    "CREATE INDEX ON my_table USING GIST (my_inet_column inet_ops);"
  ],
  "https://www.postgresql.org/docs/15/functions-comparison.html": [],
  "https://www.postgresql.org/docs/15/sql-alterrole.html": [
    "ALTER ROLE davide WITH PASSWORD 'hu8jmn3';",
    "ALTER ROLE davide WITH PASSWORD NULL;",
    "ALTER ROLE chris VALID UNTIL 'May 4 12:00:00 2015 +1';",
    "ALTER ROLE fred VALID UNTIL 'infinity';",
    "ALTER ROLE miriam CREATEROLE CREATEDB;",
    "ALTER ROLE worker_bee SET maintenance_work_mem = 100000;",
    "ALTER ROLE fred IN DATABASE devel SET client_min_messages = DEBUG;"
  ],
  "https://www.postgresql.org/docs/15/sql-dropeventtrigger.html": [
    "DROP EVENT TRIGGER snitch;"
  ],
  "https://www.postgresql.org/docs/15/plpython.html": [],
  "https://www.postgresql.org/docs/15/disk-usage.html": [
    "SELECT pg_relation_filepath(oid), relpages FROM pg_class WHERE relname = 'customer';",
    "SELECT relname, relpages\nFROM pg_class,\n     (SELECT reltoastrelid\n      FROM pg_class\n      WHERE relname = 'customer') AS ss\nWHERE oid = ss.reltoastrelid OR\n      oid = (SELECT indexrelid\n             FROM pg_index\n             WHERE indrelid = ss.reltoastrelid)\nORDER BY relname;",
    "SELECT c2.relname, c2.relpages\nFROM pg_class c, pg_class c2, pg_index i\nWHERE c.relname = 'customer' AND\n      c.oid = i.indrelid AND\n      c2.oid = i.indexrelid\nORDER BY c2.relname;",
    "SELECT relname, relpages\nFROM pg_class\nORDER BY relpages DESC;"
  ],
  "https://www.postgresql.org/docs/15/parallel-safety.html": [],
  "https://www.postgresql.org/docs/15/infoschema-routine-table-usage.html": [],
  "https://www.postgresql.org/docs/15/history.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-disconnect.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-close.html": [],
  "https://www.postgresql.org/docs/15/client-authentication-problems.html": [],
  "https://www.postgresql.org/docs/15/preventing-server-spoofing.html": [],
  "https://www.postgresql.org/docs/15/view-pg-roles.html": [],
  "https://www.postgresql.org/docs/15/bki-format.html": [],
  "https://www.postgresql.org/docs/15/server-start.html": [],
  "https://www.postgresql.org/docs/15/git.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-declarations.html": [
    "DECLARE\n  x integer := 1;",
    "CREATE FUNCTION sales_tax(subtotal real) RETURNS real AS $$\nBEGIN\n    RETURN subtotal * 0.06;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION sales_tax(real) RETURNS real AS $$\nDECLARE\n    subtotal ALIAS FOR $1;\nBEGIN\n    RETURN subtotal * 0.06;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION instr(varchar, integer) RETURNS integer AS $$\nDECLARE\n    v_string ALIAS FOR $1;\n    index ALIAS FOR $2;\nBEGIN\n    -- some computations using v_string and index here\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION concat_selected_fields(in_t sometablename) RETURNS text AS $$\nBEGIN\n    RETURN in_t.f1 || in_t.f3 || in_t.f5 || in_t.f7;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION sales_tax(subtotal real, OUT tax real) AS $$\nBEGIN\n    tax := subtotal * 0.06;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT sales_tax(100.00);",
    "CREATE FUNCTION sum_n_product(x int, y int, OUT sum int, OUT prod int) AS $$\nBEGIN\n    sum := x + y;\n    prod := x * y;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT * FROM sum_n_product(2, 4);",
    "CREATE PROCEDURE sum_n_product(x int, y int, OUT sum int, OUT prod int) AS $$\nBEGIN\n    sum := x + y;\n    prod := x * y;\nEND;\n$$ LANGUAGE plpgsql;",
    "CALL sum_n_product(2, 4, NULL, NULL);",
    "CREATE FUNCTION extended_sales(p_itemno int)\nRETURNS TABLE(quantity int, total numeric) AS $$\nBEGIN\n    RETURN QUERY SELECT s.quantity, s.quantity * s.price FROM sales AS s\n                 WHERE s.itemno = p_itemno;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION add_three_values(v1 anyelement, v2 anyelement, v3 anyelement)\nRETURNS anyelement AS $$\nDECLARE\n    result ALIAS FOR $0;\nBEGIN\n    result := v1 + v2 + v3;\n    RETURN result;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION add_three_values(v1 anyelement, v2 anyelement, v3 anyelement,\n                                 OUT sum anyelement)\nAS $$\nBEGIN\n    sum := v1 + v2 + v3;\nEND;\n$$ LANGUAGE plpgsql;",
    "CREATE FUNCTION add_three_values(v1 anycompatible, v2 anycompatible, v3 anycompatible)\nRETURNS anycompatible AS $$\nBEGIN\n    RETURN v1 + v2 + v3;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT add_three_values(1, 2, 4.7);",
    "DECLARE\n  prior ALIAS FOR old;",
    "CREATE FUNCTION merge_fields(t_row table1) RETURNS text AS $$\nDECLARE\n    t2_row table2%ROWTYPE;\nBEGIN\n    SELECT * INTO t2_row FROM table2 WHERE ... ;\n    RETURN t_row.f1 || t2_row.f3 || t_row.f5 || t2_row.f7;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT merge_fields(t.*) FROM table1 t WHERE ... ;",
    "CREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$\nBEGIN\n    RETURN a < b;\nEND;\n$$ LANGUAGE plpgsql;",
    "SELECT less_than(text_field_1, text_field_2) FROM table1;",
    "SELECT less_than(text_field_1, text_field_2 COLLATE \"C\") FROM table1;",
    "CREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$\nDECLARE\n    local_a text := a;\n    local_b text := b;\nBEGIN\n    RETURN local_a < local_b;\nEND;\n$$ LANGUAGE plpgsql;",
    "DECLARE\n    local_a text COLLATE \"en_US\";",
    "CREATE FUNCTION less_than_c(a text, b text) RETURNS boolean AS $$\nBEGIN\n    RETURN a < b COLLATE \"C\";\nEND;\n$$ LANGUAGE plpgsql;"
  ],
  "https://www.postgresql.org/docs/15/sql-createview.html": [
    "CREATE VIEW vista AS SELECT 'Hello World';",
    "CREATE VIEW vista AS SELECT text 'Hello World' AS hello;",
    "CREATE VIEW comedies AS\n    SELECT *\n    FROM films\n    WHERE kind = 'Comedy';",
    "CREATE VIEW universal_comedies AS\n    SELECT *\n    FROM comedies\n    WHERE classification = 'U'\n    WITH LOCAL CHECK OPTION;",
    "CREATE VIEW pg_comedies AS\n    SELECT *\n    FROM comedies\n    WHERE classification = 'PG'\n    WITH CASCADED CHECK OPTION;",
    "CREATE VIEW comedies AS\n    SELECT f.*,\n           country_code_to_name(f.country_code) AS country,\n           (SELECT avg(r.rating)\n            FROM user_ratings r\n            WHERE r.film_id = f.id) AS avg_rating\n    FROM films f\n    WHERE f.kind = 'Comedy';",
    "CREATE RECURSIVE VIEW public.nums_1_100 (n) AS\n    VALUES (1)\nUNION ALL\n    SELECT n+1 FROM nums_1_100 WHERE n < 100;"
  ],
  "https://www.postgresql.org/docs/15/jit.html": [],
  "https://www.postgresql.org/docs/15/datatype-pseudo.html": [],
  "https://www.postgresql.org/docs/15/sql-alterrule.html": [
    "ALTER RULE notify_all ON emp RENAME TO notify_me;"
  ],
  "https://www.postgresql.org/docs/15/sql-droptsdictionary.html": [
    "DROP TEXT SEARCH DICTIONARY english;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-replication-origin-status.html": [],
  "https://www.postgresql.org/docs/15/textsearch.html": [],
  "https://www.postgresql.org/docs/15/biblio.html": [],
  "https://www.postgresql.org/docs/15/indexes-examine.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-subscription.html": [],
  "https://www.postgresql.org/docs/15/tutorial-agg.html": [
    "SELECT max(temp_lo) FROM weather;",
    "SELECT city FROM weather WHERE temp_lo = max(temp_lo);",
    "WRONG",
    "SELECT city FROM weather\n    WHERE temp_lo = (SELECT max(temp_lo) FROM weather);",
    "SELECT city, max(temp_lo)\n    FROM weather\n    GROUP BY city;",
    "SELECT city, max(temp_lo), count(*) FILTER (WHERE temp_lo < 30)\n    FROM weather\n    GROUP BY city\n    HAVING max(temp_lo) < 40;",
    "SELECT city, max(temp_lo), count(*) FILTER (WHERE temp_lo < 30)\n    FROM weather\n    WHERE city LIKE 'S%'\nGROUP BY city\n    HAVING max(temp_lo) < 40;"
  ],
  "https://www.postgresql.org/docs/15/row-estimation-examples.html": [
    "EXPLAIN SELECT * FROM tenk1;",
    "SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';",
    "EXPLAIN SELECT * FROM tenk1 WHERE unique1 < 1000;",
    "SELECT histogram_bounds FROM pg_stats\nWHERE tablename='tenk1' AND attname='unique1';",
    "EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';",
    "SELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats\nWHERE tablename='tenk1' AND attname='stringu1';",
    "EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';",
    "EXPLAIN SELECT * FROM tenk1 WHERE stringu1 < 'IAAAAA';",
    "SELECT histogram_bounds FROM pg_stats\nWHERE tablename='tenk1' AND attname='stringu1';",
    "EXPLAIN SELECT * FROM tenk1 WHERE unique1 < 1000 AND stringu1 = 'xxx';",
    "EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2\nWHERE t1.unique1 < 50 AND t1.unique2 = t2.unique2",
    "SELECT tablename, null_frac,n_distinct, most_common_vals FROM pg_stats\nWHERE tablename IN ('tenk1', 'tenk2') AND attname='unique2';"
  ],
  "https://www.postgresql.org/docs/15/functions-math.html": [],
  "https://www.postgresql.org/docs/15/sql-createtsconfig.html": [],
  "https://www.postgresql.org/docs/15/contrib-prog-client.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-set-autocommit.html": [],
  "https://www.postgresql.org/docs/15/tutorial-accessdb.html": [],
  "https://www.postgresql.org/docs/15/libpq-copy.html": [],
  "https://www.postgresql.org/docs/15/pltcl-dbaccess.html": [
    "CREATE FUNCTION t1_count(integer, integer) RETURNS integer AS $$\n    if {![ info exists GD(plan) ]} {\n        # prepare the saved plan on the first call\n        set GD(plan) [ spi_prepare \\\n                \"SELECT count(*) AS cnt FROM t1 WHERE num >= \\$1 AND num <= \\$2\" \\\n                [ list int4 int4 ] ]\n    }\n    spi_execp -count 1 $GD(plan) [ list $1 $2 ]\n    return $cnt\n$$ LANGUAGE pltcl;",
    "SELECT 'doesn't' AS ret",
    "SELECT 'doesn''t' AS ret"
  ],
  "https://www.postgresql.org/docs/15/gist-examples.html": [],
  "https://www.postgresql.org/docs/15/functions-window.html": [],
  "https://www.postgresql.org/docs/15/jit-reason.html": [],
  "https://www.postgresql.org/docs/15/pgcrypto.html": [
    "CREATE OR REPLACE FUNCTION sha1(bytea) returns text AS $$\n    SELECT encode(digest($1, 'sha1'), 'hex')\n$$ LANGUAGE SQL STRICT IMMUTABLE;",
    "UPDATE ... SET pswhash = crypt('new password', gen_salt('md5'));",
    "SELECT (pswhash = crypt('entered password', pswhash)) AS pswmatch FROM ... ;"
  ],
  "https://www.postgresql.org/docs/15/pltcl-functions.html": [
    "CREATE FUNCTION funcname (argument-types) RETURNS return-type AS $$\n    # PL/Tcl function body\n$$ LANGUAGE pltcl;",
    "CREATE FUNCTION tcl_max(integer, integer) RETURNS integer AS $$\n    if {$1 > $2} {return $1}\n    return $2\n$$ LANGUAGE pltcl STRICT;",
    "CREATE FUNCTION tcl_max(integer, integer) RETURNS integer AS $$\n    if {[argisnull 1]} {\n        if {[argisnull 2]} { return_null }\n        return $2\n    }\n    if {[argisnull 2]} { return $1 }\n    if {$1 > $2} {return $1}\n    return $2\n$$ LANGUAGE pltcl;",
    "CREATE TABLE employee (\n    name text,\n    salary integer,\n    age integer\n);",
    "CREATE FUNCTION overpaid(employee) RETURNS boolean AS $$\n    if {200000.0 < $1(salary)} {\n        return \"t\"\n    }\n    if {$1(age) < 30 && 100000.0 < $1(salary)} {\n        return \"t\"\n    }\n    return \"f\"\n$$ LANGUAGE pltcl;",
    "CREATE FUNCTION square_cube(in int, out squared int, out cubed int) AS $$\n    return [list squared [expr {$1 * $1}] cubed [expr {$1 * $1 * $1}]]\n$$ LANGUAGE pltcl;",
    "CREATE PROCEDURE tcl_triple(INOUT a integer, INOUT b integer) AS $$\n    return [list a [expr {$1 * 3}] b [expr {$2 * 3}]]\n$$ LANGUAGE pltcl;",
    "CALL tcl_triple(5, 10);",
    "CREATE FUNCTION raise_pay(employee, delta int) RETURNS employee AS $$\n    set 1(salary) [expr {$1(salary) + $2}]\n    return [array get 1]\n$$ LANGUAGE pltcl;",
    "CREATE FUNCTION sequence(int, int) RETURNS SETOF int AS $$\n    for {set i $1} {$i < $2} {incr i} {\n        return_next $i\n    }\n$$ LANGUAGE pltcl;",
    "CREATE FUNCTION table_of_squares(int, int) RETURNS TABLE (x int, x2 int) AS $$\n    for {set i $1} {$i < $2} {incr i} {\n        return_next [list x $i x2 [expr {$i * $i}]]\n    }\n$$ LANGUAGE pltcl;"
  ],
  "https://www.postgresql.org/docs/15/sql-createsubscription.html": [
    "CREATE SUBSCRIPTION mysub\n         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'\n        PUBLICATION mypublication, insert_only;",
    "CREATE SUBSCRIPTION mysub\n         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'\n        PUBLICATION insert_only\n               WITH (enabled = false);"
  ],
  "https://www.postgresql.org/docs/15/ddl-alter.html": [
    "ALTER TABLE products ADD COLUMN description text;",
    "ALTER TABLE products ADD COLUMN description text CHECK (description <> '');",
    "ALTER TABLE products DROP COLUMN description;",
    "ALTER TABLE products DROP COLUMN description CASCADE;",
    "ALTER TABLE products ADD CHECK (name <> '');",
    "ALTER TABLE products ADD CONSTRAINT some_name UNIQUE (product_no);",
    "ALTER TABLE products ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;",
    "ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;",
    "ALTER TABLE products DROP CONSTRAINT some_name;",
    "ALTER TABLE products ALTER COLUMN product_no DROP NOT NULL;",
    "ALTER TABLE products ALTER COLUMN price SET DEFAULT 7.77;",
    "ALTER TABLE products ALTER COLUMN price DROP DEFAULT;",
    "ALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);",
    "ALTER TABLE products RENAME COLUMN product_no TO product_number;",
    "ALTER TABLE products RENAME TO items;"
  ],
  "https://www.postgresql.org/docs/15/logical-replication-row-filter.html": [
    "CREATE TABLE t1(a int, b int, c text, PRIMARY KEY(a,c));",
    "CREATE TABLE\n CREATE TABLE t2(d int, e int, f int, PRIMARY KEY(d));",
    "CREATE TABLE\n CREATE TABLE t3(g int, h int, i int, PRIMARY KEY(g));",
    "CREATE TABLE",
    "CREATE PUBLICATION p1 FOR TABLE t1 WHERE (a > 5 AND c = 'NSW');",
    "CREATE PUBLICATION\n CREATE PUBLICATION p2 FOR TABLE t1, t2 WHERE (e = 99);",
    "CREATE PUBLICATION\n CREATE PUBLICATION p3 FOR TABLE t2 WHERE (d = 10), t3 WHERE (g = 10);",
    "CREATE PUBLICATION",
    "CREATE TABLE t1(a int, b int, c text, PRIMARY KEY(a,c));",
    "CREATE TABLE\n CREATE SUBSCRIPTION s1\ntest_sub-# CONNECTION 'host=localhost dbname=test_pub application_name=s1'\ntest_sub-# PUBLICATION p1;",
    "CREATE SUBSCRIPTION",
    "INSERT INTO t1 VALUES (2, 102, 'NSW');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (3, 103, 'QLD');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (4, 104, 'VIC');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (5, 105, 'ACT');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (6, 106, 'NSW');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (7, 107, 'NT');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (8, 108, 'QLD');",
    "INSERT 0 1\n INSERT INTO t1 VALUES (9, 109, 'NSW');",
    "INSERT 0 1\n SELECT * FROM t1;",
    "SELECT * FROM t1;",
    "UPDATE t1 SET b = 999 WHERE a = 6;",
    "UPDATE 1\n SELECT * FROM t1;",
    "SELECT * FROM t1;",
    "UPDATE t1 SET a = 555 WHERE a = 2;",
    "UPDATE 1\n SELECT * FROM t1;",
    "SELECT * FROM t1;",
    "UPDATE t1 SET c = 'VIC' WHERE a = 9;",
    "UPDATE 1\n SELECT * FROM t1;",
    "SELECT * FROM t1;",
    "CREATE TABLE parent(a int PRIMARY KEY) PARTITION BY RANGE(a);",
    "CREATE TABLE\n CREATE TABLE child PARTITION OF parent DEFAULT;",
    "CREATE TABLE",
    "CREATE TABLE parent(a int PRIMARY KEY) PARTITION BY RANGE(a);",
    "CREATE TABLE\n CREATE TABLE child PARTITION OF parent DEFAULT;",
    "CREATE TABLE",
    "CREATE PUBLICATION p4 FOR TABLE parent WHERE (a < 5), child WHERE (a >= 5)\ntest_pub-# WITH (publish_via_partition_root=true);",
    "CREATE PUBLICATION",
    "CREATE SUBSCRIPTION s4\ntest_sub-# CONNECTION 'host=localhost dbname=test_pub application_name=s4'\ntest_sub-# PUBLICATION p4;",
    "CREATE SUBSCRIPTION",
    "INSERT INTO parent VALUES (2), (4), (6);",
    "INSERT 0 3\n INSERT INTO child VALUES (3), (5), (7);",
    "INSERT 0 3\n SELECT * FROM parent ORDER BY a;",
    "SELECT * FROM parent ORDER BY a;",
    "DROP PUBLICATION p4;",
    "DROP PUBLICATION\n CREATE PUBLICATION p4 FOR TABLE parent, child WHERE (a >= 5)\ntest_pub-# WITH (publish_via_partition_root=false);",
    "CREATE PUBLICATION",
    "ALTER SUBSCRIPTION s4 REFRESH PUBLICATION;",
    "ALTER SUBSCRIPTION",
    "TRUNCATE parent;",
    "TRUNCATE TABLE\n INSERT INTO parent VALUES (2), (4), (6)",
    "INSERT 0 3\n INSERT INTO child VALUES (3), (5), (7);",
    "INSERT 0 3\n SELECT * FROM parent ORDER BY a;",
    "SELECT * FROM child ORDER BY a;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-sql-parts.html": [],
  "https://www.postgresql.org/docs/15/tablesample-method.html": [],
  "https://www.postgresql.org/docs/15/regress-coverage.html": [],
  "https://www.postgresql.org/docs/15/queries-select-lists.html": [
    "SELECT a, b, c FROM ...",
    "SELECT tbl1.a, tbl2.a, tbl1.b FROM ...",
    "SELECT tbl1.*, tbl2.a FROM ...",
    "SELECT a AS value, b + c AS sum FROM ...",
    "SELECT a from, b + c AS sum FROM ...",
    "SELECT a AS from, b + c AS sum FROM ...\nSELECT a \"from\", b + c AS sum FROM ..."
  ],
  "https://www.postgresql.org/docs/15/tableam.html": [],
  "https://www.postgresql.org/docs/15/fdw-planning.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-statistic-ext-data.html": [],
  "https://www.postgresql.org/docs/15/protocol-message-formats.html": [],
  "https://www.postgresql.org/docs/15/xfunc-c.html": [
    "CREATE FUNCTION add_one(integer) RETURNS integer\n     AS 'DIRECTORY/funcs', 'add_one'\n     LANGUAGE C STRICT;",
    "CREATE FUNCTION add_one(double precision) RETURNS double precision\n     AS 'DIRECTORY/funcs', 'add_one_float8'\n     LANGUAGE C STRICT;",
    "CREATE FUNCTION makepoint(point, point) RETURNS point\n     AS 'DIRECTORY/funcs', 'makepoint'\n     LANGUAGE C STRICT;",
    "CREATE FUNCTION copytext(text) RETURNS text\n     AS 'DIRECTORY/funcs', 'copytext'\n     LANGUAGE C STRICT;",
    "CREATE FUNCTION concat_text(text, text) RETURNS text\n     AS 'DIRECTORY/funcs', 'concat_text'\n     LANGUAGE C STRICT;",
    "SELECT name, c_overpaid(emp, 1500) AS overpaid\n    FROM emp\n    WHERE name = 'Bill' OR name = 'Sam';",
    "CREATE FUNCTION c_overpaid(emp, integer) RETURNS boolean\n    AS 'DIRECTORY/funcs', 'c_overpaid'\n    LANGUAGE C STRICT;",
    "CREATE TYPE __retcomposite AS (f1 integer, f2 integer, f3 integer);",
    "CREATE OR REPLACE FUNCTION retcomposite(integer, integer)\n    RETURNS SETOF __retcomposite\n    AS 'filename', 'retcomposite'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE OR REPLACE FUNCTION retcomposite(IN integer, IN integer,\n    OUT f1 integer, OUT f2 integer, OUT f3 integer)\n    RETURNS SETOF record\n    AS 'filename', 'retcomposite'\n    LANGUAGE C IMMUTABLE STRICT;",
    "CREATE FUNCTION make_array(anyelement) RETURNS anyarray\n    AS 'DIRECTORY/funcs', 'make_array'\n    LANGUAGE C IMMUTABLE;"
  ],
  "https://www.postgresql.org/docs/15/xml-limits-conformance.html": [
    "SELECT XMLQUERY('$a is $b' PASSING BY REF x AS a, x AS b NULL ON EMPTY);\nSELECT XMLQUERY('$a is $b' PASSING BY VALUE x AS a, x AS b NULL ON EMPTY);"
  ],
  "https://www.postgresql.org/docs/15/earthdistance.html": [],
  "https://www.postgresql.org/docs/15/sql-security-label.html": [
    "SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0';"
  ],
  "https://www.postgresql.org/docs/15/checksums.html": [],
  "https://www.postgresql.org/docs/15/auth-ident.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-saveplan.html": [],
  "https://www.postgresql.org/docs/15/pgrowlocks.html": [
    "SELECT * FROM accounts AS a, pgrowlocks('accounts') AS p\n  WHERE p.locked_row = a.ctid;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-role-usage-grants.html": [],
  "https://www.postgresql.org/docs/15/app-postgres.html": [],
  "https://www.postgresql.org/docs/15/view-pg-hba-file-rules.html": [],
  "https://www.postgresql.org/docs/15/indexes-collations.html": [
    "CREATE TABLE test1c (\n    id integer,\n    content varchar COLLATE \"x\"\n);",
    "CREATE INDEX test1c_content_index ON test1c (content);",
    "SELECT * FROM test1c WHERE content > constant;",
    "SELECT * FROM test1c WHERE content > constant COLLATE \"y\";",
    "CREATE INDEX test1c_content_y_index ON test1c (content COLLATE \"y\");"
  ],
  "https://www.postgresql.org/docs/15/dict-xsyn.html": [
    "ALTER TEXT SEARCH DICTIONARY",
    "SELECT ts_lexize('xsyn', 'word');",
    "ALTER TEXT SEARCH DICTIONARY\n SELECT ts_lexize('xsyn', 'word');",
    "ALTER TEXT SEARCH DICTIONARY\n SELECT ts_lexize('xsyn', 'syn1');",
    "ALTER TEXT SEARCH DICTIONARY\n SELECT ts_lexize('xsyn', 'syn1');",
    "ALTER TEXT SEARCH CONFIGURATION english\n    ALTER MAPPING FOR word, asciiword WITH xsyn, english_stem;"
  ],
  "https://www.postgresql.org/docs/15/protocol.html": [],
  "https://www.postgresql.org/docs/15/multibyte.html": [
    "CREATE DATABASE korean WITH ENCODING 'EUC_KR' LC_COLLATE='ko_KR.euckr' LC_CTYPE='ko_KR.euckr' TEMPLATE=template0;",
    "SET CLIENT_ENCODING TO 'value';",
    "SET NAMES 'value';",
    "SHOW client_encoding;",
    "RESET client_encoding;"
  ],
  "https://www.postgresql.org/docs/15/sasl-authentication.html": [],
  "https://www.postgresql.org/docs/15/amcheck.html": [
    "SET client_min_messages = DEBUG1;"
  ],
  "https://www.postgresql.org/docs/15/sql-createstatistics.html": [
    "CREATE TABLE t1 (\n    a   int,\n    b   int\n);",
    "INSERT INTO t1 SELECT i/100, i/500\n                 FROM generate_series(1,1000000) s(i);",
    "ANALYZE t1;",
    "EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);",
    "CREATE STATISTICS s1 (dependencies) ON a, b FROM t1;",
    "ANALYZE t1;",
    "EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);",
    "CREATE TABLE t2 (\n    a   int,\n    b   int\n);",
    "INSERT INTO t2 SELECT mod(i,100), mod(i,100)\n                 FROM generate_series(1,1000000) s(i);",
    "CREATE STATISTICS s2 (mcv) ON a, b FROM t2;",
    "ANALYZE t2;",
    "EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 1);",
    "EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 2);",
    "CREATE TABLE t3 (\n    a   timestamp\n);",
    "INSERT INTO t3 SELECT i FROM generate_series('2020-01-01'::timestamp,\n                                             '2020-12-31'::timestamp,\n                                             '1 minute'::interval) s(i);",
    "ANALYZE t3;",
    "EXPLAIN ANALYZE SELECT * FROM t3\n  WHERE date_trunc('month', a) = '2020-01-01'::timestamp",
    "EXPLAIN ANALYZE SELECT * FROM t3\n  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp\n                                 AND '2020-06-30'::timestamp",
    "EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)\n   FROM t3 GROUP BY 1, 2",
    "CREATE STATISTICS s3 (ndistinct) ON date_trunc('month', a), date_trunc('day', a) FROM t3;",
    "ANALYZE t3;",
    "EXPLAIN ANALYZE SELECT * FROM t3\n  WHERE date_trunc('month', a) = '2020-01-01'::timestamp",
    "EXPLAIN ANALYZE SELECT * FROM t3\n  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp\n                                 AND '2020-06-30'::timestamp",
    "EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)\n   FROM t3 GROUP BY 1, 2"
  ],
  "https://www.postgresql.org/docs/15/parallel-plans.html": [],
  "https://www.postgresql.org/docs/15/event-triggers.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-freetuple.html": [],
  "https://www.postgresql.org/docs/15/plperl-triggers.html": [
    "CREATE TABLE test (\n    i int,\n    v varchar\n);",
    "CREATE OR REPLACE FUNCTION valid_id() RETURNS trigger AS $$\n    if (($_TD->{new}{i} >= 100) || ($_TD->{new}{i} <= 0)) {\n        return \"SKIP\";    # skip INSERT/UPDATE command\n    } elsif ($_TD->{new}{v} ne \"immortal\") {\n        $_TD->{new}{v} .= \"(modified by trigger)\";\n        return \"MODIFY\";  # modify row and execute INSERT/UPDATE command\n    } else {\n        return;           # execute INSERT/UPDATE command\n    }\n$$ LANGUAGE plperl;",
    "CREATE TRIGGER test_valid_id_trig\n    BEFORE INSERT OR UPDATE ON test\n    FOR EACH ROW EXECUTE FUNCTION valid_id();"
  ],
  "https://www.postgresql.org/docs/15/sql-createprocedure.html": [
    "BEGIN ATOMIC\n  statement",
    "END",
    "CREATE PROCEDURE insert_data(a integer, b integer)\nLANGUAGE SQL\nAS $$\nINSERT INTO tbl VALUES (a);\nINSERT INTO tbl VALUES (b);\n$$;",
    "CREATE PROCEDURE insert_data(a integer, b integer)\nLANGUAGE SQL\nBEGIN ATOMIC\n  INSERT INTO tbl VALUES (a);\n  INSERT INTO tbl VALUES (b);\nEND;",
    "CALL insert_data(1, 2);"
  ],
  "https://www.postgresql.org/docs/15/indexes-opclass.html": [
    "CREATE INDEX test_index ON test_table (col varchar_pattern_ops);",
    "SELECT am.amname AS index_method,\n       opc.opcname AS opclass_name,\n       opc.opcintype::regtype AS indexed_type,\n       opc.opcdefault AS is_default\n    FROM pg_am am, pg_opclass opc\n    WHERE opc.opcmethod = am.oid\n    ORDER BY index_method, opclass_name;",
    "SELECT am.amname AS index_method,\n       opc.opcname AS opclass_name,\n       opf.opfname AS opfamily_name,\n       opc.opcintype::regtype AS indexed_type,\n       opc.opcdefault AS is_default\n    FROM pg_am am, pg_opclass opc, pg_opfamily opf\n    WHERE opc.opcmethod = am.oid AND\n          opc.opcfamily = opf.oid\n    ORDER BY index_method, opclass_name;",
    "SELECT am.amname AS index_method,\n       opf.opfname AS opfamily_name,\n       amop.amopopr::regoperator AS opfamily_operator\n    FROM pg_am am, pg_opfamily opf, pg_amop amop\n    WHERE opf.opfmethod = am.oid AND\n          amop.amopfamily = opf.oid\n    ORDER BY index_method, opfamily_name, opfamily_operator;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-db-role-setting.html": [],
  "https://www.postgresql.org/docs/15/infoschema-column-udt-usage.html": [],
  "https://www.postgresql.org/docs/15/ecpg-errors.html": [
    "EXEC SQL WHENEVER condition action;",
    "EXEC SQL WHENEVER SQLWARNING SQLPRINT;",
    "EXEC SQL WHENEVER SQLERROR STOP;",
    "EXEC SQL WHENEVER SQLWARNING SQLPRINT",
    "EXEC SQL SELECT ...",
    "EXEC SQL SELECT ...",
    "EXEC SQL WHENEVER SQLERROR STOP",
    "EXEC SQL WHENEVER SQLERROR CALL print_sqlca();",
    "EXEC SQL FETCH ... "
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-opfamily.html": [],
  "https://www.postgresql.org/docs/15/functions.html": [],
  "https://www.postgresql.org/docs/15/predefined-roles.html": [
    "GRANT pg_signal_backend TO admin_user;"
  ],
  "https://www.postgresql.org/docs/15/libpq-threading.html": [],
  "https://www.postgresql.org/docs/15/contrib.html": [
    "CREATE EXTENSION module_name;"
  ],
  "https://www.postgresql.org/docs/15/sql-createforeigntable.html": [
    "CREATE FOREIGN TABLE films (\n    code        char(5) NOT NULL,\n    title       varchar(40) NOT NULL,\n    did         integer NOT NULL,\n    date_prod   date,\n    kind        varchar(10),\n    len         interval hour to minute\n)\nSERVER film_server;",
    "CREATE FOREIGN TABLE measurement_y2016m07\n    PARTITION OF measurement FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')\n    SERVER server_07;"
  ],
  "https://www.postgresql.org/docs/15/app-createuser.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-function.html": [
    "SELECT *\n    FROM dblink('dbname=mydb options=-csearch_path=',\n                'select proname, prosrc from pg_proc')\n      AS t1(proname name, prosrc text)\n    WHERE proname LIKE 'bytea%';",
    "CREATE VIEW myremote_pg_proc AS\n  SELECT *\n    FROM dblink('dbname=postgres options=-csearch_path=',\n                'select proname, prosrc from pg_proc')\n    AS t1(proname name, prosrc text);",
    "SELECT * FROM myremote_pg_proc WHERE proname LIKE 'bytea%';"
  ],
  "https://www.postgresql.org/docs/15/custom-scan-plan.html": [],
  "https://www.postgresql.org/docs/15/sql-createlanguage.html": [
    "CREATE FUNCTION plsample_call_handler() RETURNS language_handler\n    AS '$libdir/plsample'\n    LANGUAGE C;",
    "CREATE LANGUAGE plsample\n    HANDLER plsample_call_handler;",
    "CREATE EXTENSION plsample;"
  ],
  "https://www.postgresql.org/docs/15/sql-dropuser.html": [],
  "https://www.postgresql.org/docs/15/indexes-types.html": [
    "CREATE INDEX name ON table USING HASH (column);",
    "SELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-rules.html": [],
  "https://www.postgresql.org/docs/15/protocol-replication.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-send-query.html": [
    "SELECT dblink_send_query('dtest1', 'SELECT * FROM foo WHERE f1 < 3');"
  ],
  "https://www.postgresql.org/docs/15/contrib-dblink-get-pkey.html": [
    "CREATE TYPE dblink_pkey_results AS (position int, colname text);"
  ],
  "https://www.postgresql.org/docs/15/view-pg-stats-ext.html": [],
  "https://www.postgresql.org/docs/15/indexes-intro.html": [
    "CREATE TABLE test1 (\n    id integer,\n    content varchar\n);",
    "SELECT content FROM test1 WHERE id = constant;",
    "CREATE INDEX test1_id_index ON test1 (id);"
  ],
  "https://www.postgresql.org/docs/15/libpq-pipeline-mode.html": [
    "BEGIN;",
    "SELECT x FROM mytable WHERE id = 42 FOR UPDATE;",
    "UPDATE mytable SET x = 3 WHERE id = 42;",
    "COMMIT;",
    "UPDATE mytable SET x = x + 1 WHERE id = 42;"
  ],
  "https://www.postgresql.org/docs/15/bug-reporting.html": [],
  "https://www.postgresql.org/docs/15/sql-selectinto.html": [
    "SELECT * INTO films_recent FROM films WHERE date_prod >= '2002-01-01';"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-constraint.html": [],
  "https://www.postgresql.org/docs/15/spi-examples.html": [
    "CREATE FUNCTION execq(text, integer) RETURNS int8\n    AS 'filename'\n    LANGUAGE C STRICT;",
    "SELECT execq('CREATE TABLE a (x integer)', 0);",
    "INSERT INTO a VALUES (execq('INSERT INTO a VALUES (0)', 0))",
    "INSERT 0 1\n SELECT execq('SELECT * FROM a', 0);",
    "SELECT execq('INSERT INTO a SELECT x + 2 FROM a', 1)",
    "SELECT execq('SELECT * FROM a', 10)",
    "DELETE FROM a",
    "DELETE 3\n INSERT INTO a VALUES (execq('SELECT * FROM a', 0) + 1);",
    "INSERT 0 1\n SELECT * FROM a;",
    "INSERT INTO a VALUES (execq('SELECT * FROM a', 0) + 1)",
    "INSERT 0 1\n SELECT * FROM a",
    "INSERT INTO a SELECT execq('SELECT * FROM a', 0) * x FROM a",
    "INSERT 0 2\n SELECT * FROM a"
  ],
  "https://www.postgresql.org/docs/15/sql-create-access-method.html": [
    "CREATE ACCESS METHOD heptree TYPE INDEX HANDLER heptree_handler;"
  ],
  "https://www.postgresql.org/docs/15/fdw-callbacks.html": [],
  "https://www.postgresql.org/docs/15/source-format.html": [],
  "https://www.postgresql.org/docs/15/view-pg-user.html": [],
  "https://www.postgresql.org/docs/15/sql-drop-owned.html": [],
  "https://www.postgresql.org/docs/15/sql-alteroperator.html": [
    "ALTER OPERATOR @@ (text, text) OWNER TO joe;",
    "ALTER OPERATOR && (_int4, _int4) SET (RESTRICT = _int_contsel, JOIN = _int_contjoinsel);"
  ],
  "https://www.postgresql.org/docs/15/functions-bitstring.html": [],
  "https://www.postgresql.org/docs/15/storage.html": [],
  "https://www.postgresql.org/docs/15/intagg.html": [
    "CREATE TABLE left (id INT PRIMARY KEY, ...);",
    "CREATE TABLE right (id INT PRIMARY KEY, ...);",
    "CREATE TABLE one_to_many(left INT REFERENCES left, right INT REFERENCES right);",
    "SELECT right.* from right JOIN one_to_many ON (right.id = one_to_many.right)\n  WHERE one_to_many.left = item;",
    "CREATE TABLE summary AS\n  SELECT left, int_array_aggregate(right) AS right\n  FROM one_to_many\n  GROUP BY left;",
    "SELECT left, int_array_enum(right) FROM summary WHERE left = item;",
    "SELECT left, right FROM one_to_many WHERE left = item;",
    "SELECT right, count(right) FROM\n  ( SELECT left, int_array_enum(right) AS right\n    FROM summary JOIN (SELECT left FROM left_table WHERE left = item) AS lefts\n         ON (summary.left = lefts.left)\n  ) AS list\n  GROUP BY right\n  ORDER BY count DESC;"
  ],
  "https://www.postgresql.org/docs/15/extend-how.html": [],
  "https://www.postgresql.org/docs/15/auto-explain.html": [
    "LOAD 'auto_explain';",
    "LOAD 'auto_explain';",
    "SET auto_explain.log_min_duration = 0;",
    "SET auto_explain.log_analyze = true;",
    "SELECT count(*)\n           FROM pg_class, pg_index\n           WHERE oid = indrelid AND indisunique;"
  ],
  "https://www.postgresql.org/docs/15/protocol-error-fields.html": [],
  "https://www.postgresql.org/docs/15/sql-createdatabase.html": [
    "CREATE DATABASE lusiadas;",
    "CREATE DATABASE sales OWNER salesapp TABLESPACE salesspace;",
    "CREATE DATABASE music\n    LOCALE 'sv_SE.utf8'\n    TEMPLATE template0;",
    "CREATE DATABASE music2\n    LOCALE 'sv_SE.iso885915'\n    ENCODING LATIN9\n    TEMPLATE template0;"
  ],
  "https://www.postgresql.org/docs/15/fdw-helpers.html": [],
  "https://www.postgresql.org/docs/15/libpq-events.html": [],
  "https://www.postgresql.org/docs/15/sql-prepare-transaction.html": [
    "PREPARE TRANSACTION 'foobar';"
  ],
  "https://www.postgresql.org/docs/15/isn.html": [
    "SELECT isbn('978-0-393-04002-9');",
    "SELECT isbn13('0901690546');",
    "SELECT issn('1436-4522');",
    "SELECT upc(ean13('0220356483481'));",
    "SELECT ean13(upc('220356483481'));",
    "CREATE TABLE test (id isbn);",
    "INSERT INTO test VALUES('9780393040029');",
    "INSERT INTO test VALUES('220500896?');",
    "INSERT INTO test VALUES('978055215372?');",
    "SELECT issn('3251231?');",
    "SELECT ismn('979047213542?');",
    "SELECT isn_weak(true);",
    "INSERT INTO test VALUES('978-0-11-000533-4');",
    "INSERT INTO test VALUES('9780141219307');",
    "INSERT INTO test VALUES('2-205-00876-X');",
    "SELECT isn_weak(false);",
    "SELECT id FROM test WHERE NOT is_valid(id);",
    "UPDATE test SET id = make_valid(id) WHERE id = '2-205-00876-X!';",
    "SELECT * FROM test;",
    "SELECT isbn13(id) FROM test;"
  ],
  "https://www.postgresql.org/docs/15/xproc.html": [],
  "https://www.postgresql.org/docs/15/fdw-row-locking.html": [],
  "https://www.postgresql.org/docs/15/config-setting.html": [
    "SET configuration_parameter TO DEFAULT;",
    "UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';"
  ],
  "https://www.postgresql.org/docs/15/libpq-example.html": [],
  "https://www.postgresql.org/docs/15/xfunc.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-description.html": [],
  "https://www.postgresql.org/docs/15/external-interfaces.html": [],
  "https://www.postgresql.org/docs/15/functions-admin.html": [
    "SELECT pg_log_backend_memory_contexts(pg_backend_pid());",
    "SELECT * FROM pg_walfile_name_offset((pg_backup_stop()).lsn);",
    "SELECT pg_size_pretty(sum(pg_relation_size(relid))) AS total_size\n  FROM pg_partition_tree('measurement');",
    "SELECT convert_from(pg_read_binary_file('file_in_utf8.txt'), 'UTF8');"
  ],
  "https://www.postgresql.org/docs/15/storage-hot.html": [],
  "https://www.postgresql.org/docs/15/vacuumlo.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-execp.html": [],
  "https://www.postgresql.org/docs/15/geqo.html": [],
  "https://www.postgresql.org/docs/15/ddl-schemas.html": [
    "CREATE SCHEMA myschema;",
    "CREATE TABLE myschema.mytable (\n ...\n);",
    "DROP SCHEMA myschema;",
    "DROP SCHEMA myschema CASCADE;",
    "CREATE SCHEMA schema_name AUTHORIZATION user_name;",
    "CREATE TABLE products ( ... );",
    "CREATE TABLE public.products ( ... );",
    "SHOW search_path;",
    "SET search_path TO myschema,public;",
    "DROP TABLE mytable;",
    "SET search_path TO myschema;",
    "SELECT 3 OPERATOR(pg_catalog.+) 4;",
    "REVOKE CREATE ON SCHEMA public FROM PUBLIC;"
  ],
  "https://www.postgresql.org/docs/15/gssapi-auth.html": [],
  "https://www.postgresql.org/docs/15/functions-trigger.html": [
    "CREATE TRIGGER z_min_update\nBEFORE UPDATE ON tablename\nFOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger();"
  ],
  "https://www.postgresql.org/docs/15/manage-ag-config.html": [
    "ALTER DATABASE mydb SET geqo TO off;"
  ],
  "https://www.postgresql.org/docs/15/logical-replication-quick-setup.html": [
    "CREATE PUBLICATION mypub FOR TABLE users, departments;",
    "CREATE SUBSCRIPTION mysub CONNECTION 'dbname=foo host=bar user=repuser' PUBLICATION mypub;"
  ],
  "https://www.postgresql.org/docs/15/sql-createsequence.html": [
    "SELECT * FROM name;",
    "CREATE SEQUENCE serial START 101;",
    "SELECT nextval('serial');",
    "SELECT nextval('serial');",
    "INSERT INTO distributors VALUES (nextval('serial'), 'nothing');",
    "BEGIN",
    "COPY distributors FROM 'input_file'",
    "SELECT setval('serial', max(id)) FROM distributors",
    "END"
  ],
  "https://www.postgresql.org/docs/15/sql-droprule.html": [
    "DROP RULE newrule ON mytable;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-trigger.html": [],
  "https://www.postgresql.org/docs/15/datetime-units-history.html": [],
  "https://www.postgresql.org/docs/15/infoschema-domain-constraints.html": [],
  "https://www.postgresql.org/docs/15/functions-logical.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-statistic-ext.html": [],
  "https://www.postgresql.org/docs/15/regress-evaluation.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-is-busy.html": [
    "SELECT dblink_is_busy('dtest1');"
  ],
  "https://www.postgresql.org/docs/15/tutorial-transactions.html": [
    "UPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';",
    "UPDATE branches SET balance = balance - 100.00\n    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');",
    "UPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';",
    "UPDATE branches SET balance = balance + 100.00\n    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');",
    "BEGIN;",
    "UPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';",
    "COMMIT;",
    "BEGIN;",
    "UPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';",
    "SAVEPOINT my_savepoint;",
    "UPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';",
    "ROLLBACK TO my_savepoint;",
    "UPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Wally';",
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-replication-origin.html": [],
  "https://www.postgresql.org/docs/15/jit-extensibility.html": [],
  "https://www.postgresql.org/docs/15/sql-alterstatistics.html": [],
  "https://www.postgresql.org/docs/15/logicaldecoding-example.html": [
    "SELECT * FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding', false, true);",
    "SELECT slot_name, plugin, slot_type, database, active, restart_lsn, confirmed_flush_lsn FROM pg_replication_slots",
    "SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL)",
    "CREATE TABLE data(id serial primary key, data text)",
    "CREATE TABLE\n\nSELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);",
    "SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL)",
    "BEGIN",
    "SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL)",
    "INSERT INTO data(data) VALUES('3')",
    "SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);",
    "SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL)",
    "SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'include-timestamp', 'on')",
    "SELECT pg_drop_replication_slot('regression_slot')",
    "BEGIN 693\ntable public.data: INSERT: id[integer]:4 data[text]:'4'\nCOMMIT 693\nControl+C\n$ pg_recvlogical -d postgres",
    "BEGIN 694\ntable public.data: INSERT: id[integer]:5 data[text]:'5'\nPREPARE TRANSACTION 'test', txid 694\nControl+Z\n$ psql -d postgres -c \"COMMIT PREPARED 'test'",
    "COMMIT PREPARED 'test', txid 694\nControl+C\n$ pg_recvlogical -d postgres",
    "BEGIN;",
    "SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL)",
    "COMMIT PREPARED 'test_prepared1'",
    "select * from pg_logical_slot_get_changes('regression_slot', NULL, NULL);",
    "BEGIN",
    "ROLLBACK PREPARED 'test_prepared2'",
    "select * from pg_logical_slot_get_changes('regression_slot', NULL, NULL);"
  ],
  "https://www.postgresql.org/docs/15/sql-droptype.html": [
    "DROP TYPE box;"
  ],
  "https://www.postgresql.org/docs/15/sql-release-savepoint.html": [
    "BEGIN;",
    "INSERT INTO table1 VALUES (3);",
    "SAVEPOINT my_savepoint;",
    "INSERT INTO table1 VALUES (4);",
    "RELEASE SAVEPOINT my_savepoint;",
    "COMMIT;"
  ],
  "https://www.postgresql.org/docs/15/app-pgbasebackup.html": [],
  "https://www.postgresql.org/docs/15/storage-page-layout.html": [],
  "https://www.postgresql.org/docs/15/sql-dropcast.html": [
    "DROP CAST (text AS int);"
  ],
  "https://www.postgresql.org/docs/15/backup-manifest-toplevel.html": [],
  "https://www.postgresql.org/docs/15/auth-ldap.html": [],
  "https://www.postgresql.org/docs/15/mvcc-serialization-failure-handling.html": [],
  "https://www.postgresql.org/docs/15/infoschema-role-routine-grants.html": [],
  "https://www.postgresql.org/docs/15/datatype-uuid.html": [],
  "https://www.postgresql.org/docs/15/install-requirements.html": [],
  "https://www.postgresql.org/docs/15/explicit-locking.html": [],
  "https://www.postgresql.org/docs/15/ecpg-sql-set-descriptor.html": [
    "EXEC SQL SET DESCRIPTOR indesc COUNT = 1;",
    "EXEC SQL SET DESCRIPTOR indesc VALUE 1 DATA = 2;",
    "EXEC SQL SET DESCRIPTOR indesc VALUE 1 DATA = :val1;",
    "EXEC SQL SET DESCRIPTOR indesc VALUE 2 INDICATOR = :val1, DATA = 'some string';",
    "EXEC SQL SET DESCRIPTOR indesc VALUE 2 INDICATOR = :val2null, DATA = :val2;"
  ],
  "https://www.postgresql.org/docs/15/plperl-event-triggers.html": [
    "CREATE OR REPLACE FUNCTION perlsnitch() RETURNS event_trigger AS $$\n  elog(NOTICE, \"perlsnitch: \" . $_TD->{event} . \" \" . $_TD->{tag} . \" \");\n$$ LANGUAGE plperl;",
    "CREATE EVENT TRIGGER perl_a_snitch\n    ON ddl_command_start\n    EXECUTE FUNCTION perlsnitch();"
  ],
  "https://www.postgresql.org/docs/15/sql-alterforeigntable.html": [
    "ALTER FOREIGN TABLE distributors ALTER COLUMN street SET NOT NULL;",
    "ALTER FOREIGN TABLE myschema.distributors OPTIONS (ADD opt1 'value', SET opt2 'value2', DROP opt3 'value3');"
  ],
  "https://www.postgresql.org/docs/15/external-admin-tools.html": [],
  "https://www.postgresql.org/docs/15/docguide-build.html": [],
  "https://www.postgresql.org/docs/15/different-replication-solutions.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-connection.html": [],
  "https://www.postgresql.org/docs/15/view-pg-settings.html": [],
  "https://www.postgresql.org/docs/15/sql-alteropclass.html": [],
  "https://www.postgresql.org/docs/15/typeconv-query.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-locks.html": [],
  "https://www.postgresql.org/docs/15/plpython-envar.html": [],
  "https://www.postgresql.org/docs/15/sql-alterview.html": [
    "ALTER VIEW foo RENAME TO bar;",
    "CREATE TABLE base_table (id int, ts timestamptz);",
    "CREATE VIEW a_view AS SELECT * FROM base_table;",
    "ALTER VIEW a_view ALTER COLUMN ts SET DEFAULT now();",
    "INSERT INTO base_table(id) VALUES(1);",
    "INSERT INTO a_view(id) VALUES(2);"
  ],
  "https://www.postgresql.org/docs/15/tutorial-install.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-is-cursor-plan.html": [],
  "https://www.postgresql.org/docs/15/index-cost-estimation.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-start-transaction.html": [],
  "https://www.postgresql.org/docs/15/tutorial-start.html": [],
  "https://www.postgresql.org/docs/15/source-conventions.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-shdescription.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-getbinval.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-preset.html": [],
  "https://www.postgresql.org/docs/15/protocol-flow.html": [
    "INSERT INTO mytable VALUES(1);",
    "SELECT 1/0;",
    "INSERT INTO mytable VALUES(2);",
    "BEGIN;",
    "INSERT INTO mytable VALUES(1);",
    "COMMIT;",
    "INSERT INTO mytable VALUES(2);",
    "SELECT 1/0;",
    "BEGIN;",
    "SELECT 1/0;",
    "ROLLBACK;",
    "BEGIN;",
    "INSERT INTO mytable VALUES(1);",
    "COMMIT;",
    "INSERT INTO mytable VALUES(2);",
    "SELCT 1/0;"
  ],
  "https://www.postgresql.org/docs/15/indexes-partial.html": [
    "CREATE TABLE access_log (\n    url varchar,\n    client_ip inet,\n    ...\n);",
    "CREATE INDEX access_log_client_ip_ix ON access_log (client_ip)\nWHERE NOT (client_ip > inet '192.168.100.0' AND\n           client_ip < inet '192.168.100.255');",
    "SELECT *\nFROM access_log\nWHERE url = '/index.html' AND client_ip = inet '212.78.10.32';",
    "SELECT *\nFROM access_log\nWHERE url = '/index.html' AND client_ip = inet '192.168.100.23';",
    "CREATE INDEX orders_unbilled_index ON orders (order_nr)\n    WHERE billed is not true;",
    "SELECT * FROM orders WHERE billed is not true AND order_nr < 10000;",
    "SELECT * FROM orders WHERE billed is not true AND amount > 5000.00;",
    "SELECT * FROM orders WHERE order_nr = 3501;",
    "CREATE TABLE tests (\n    subject text,\n    target text,\n    success boolean,\n    ...\n);",
    "CREATE UNIQUE INDEX tests_success_constraint ON tests (subject, target)\n    WHERE success;",
    "CREATE INDEX mytable_cat_1 ON mytable (data) WHERE category = 1;",
    "CREATE INDEX mytable_cat_2 ON mytable (data) WHERE category = 2;",
    "CREATE INDEX mytable_cat_3 ON mytable (data) WHERE category = 3;",
    "CREATE INDEX mytable_cat_N ON mytable (data) WHERE category = N",
    "CREATE INDEX mytable_cat_data ON mytable (category, data);"
  ],
  "https://www.postgresql.org/docs/15/protocol-message-types.html": [],
  "https://www.postgresql.org/docs/15/backup-file.html": [],
  "https://www.postgresql.org/docs/15/infoschema-collation-character-set-applicab.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-opclass.html": [],
  "https://www.postgresql.org/docs/15/gin-tips.html": [],
  "https://www.postgresql.org/docs/15/infoschema-triggered-update-columns.html": [],
  "https://www.postgresql.org/docs/15/infoschema-role-column-grants.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-structure.html": [
    "CREATE FUNCTION somefunc(integer, text) RETURNS integer\nAS 'function body text'\nLANGUAGE plpgsql;",
    "CREATE FUNCTION somefunc() RETURNS integer AS $$\n<< outerblock >>\nDECLARE\n    quantity integer := 30;\nBEGIN\n    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 30\n    quantity := 50;\n    --\n    -- Create a subblock\n    --\n    DECLARE\n        quantity integer := 80;\n    BEGIN\n        RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 80\n        RAISE NOTICE 'Outer quantity here is %', outerblock.quantity;  -- Prints 50\n    END;\n\n    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 50\n\n    RETURN quantity;\nEND;\n$$ LANGUAGE plpgsql;"
  ],
  "https://www.postgresql.org/docs/15/errcodes-appendix.html": [],
  "https://www.postgresql.org/docs/15/bki.html": [],
  "https://www.postgresql.org/docs/15/libpq-exec.html": [
    "SELECT * FROM mytable WHERE x = $1::bigint;",
    "SELECT 1 AS FOO, 2 AS \"BAR\";"
  ],
  "https://www.postgresql.org/docs/15/nls-translator.html": [],
  "https://www.postgresql.org/docs/15/dml-insert.html": [
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);",
    "INSERT INTO products VALUES (1, 'Cheese', 9.99);",
    "INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);",
    "INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);",
    "INSERT INTO products (product_no, name) VALUES (1, 'Cheese');",
    "INSERT INTO products VALUES (1, 'Cheese');",
    "INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);",
    "INSERT INTO products DEFAULT VALUES;",
    "INSERT INTO products (product_no, name, price) VALUES\n    (1, 'Cheese', 9.99),\n    (2, 'Bread', 1.99),\n    (3, 'Milk', 2.99);",
    "INSERT INTO products (product_no, name, price)\n  SELECT product_no, name, price FROM new_products\n    WHERE release_date = 'today';"
  ],
  "https://www.postgresql.org/docs/15/hash-index.html": [],
  "https://www.postgresql.org/docs/15/backup-manifest-files.html": [],
  "https://www.postgresql.org/docs/15/queries-overview.html": [
    "SELECT * FROM table1;",
    "SELECT a, b + c FROM table1;",
    "SELECT 3 * 4;",
    "SELECT random();"
  ],
  "https://www.postgresql.org/docs/15/app-pgconfig.html": [],
  "https://www.postgresql.org/docs/15/indexes-multicolumn.html": [
    "CREATE TABLE test2 (\n  major int,\n  minor int,\n  name varchar\n);",
    "SELECT name FROM test2 WHERE major = constant AND minor = constant;",
    "CREATE INDEX test2_mm_idx ON test2 (major, minor);"
  ],
  "https://www.postgresql.org/docs/15/runtime-config-short.html": [],
  "https://www.postgresql.org/docs/15/btree-intro.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-get-notify.html": [],
  "https://www.postgresql.org/docs/15/event-log-registration.html": [],
  "https://www.postgresql.org/docs/15/libpq.html": [],
  "https://www.postgresql.org/docs/15/sql-execute.html": [],
  "https://www.postgresql.org/docs/15/sql-createcast.html": [
    "SELECT CAST(42 AS float8);",
    "INSERT INTO foo (f1) VALUES (42);",
    "SELECT 2 + 4.0;",
    "SELECT CAST ( 2 AS numeric ) + 4.0;",
    "CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;"
  ],
  "https://www.postgresql.org/docs/15/sql-rollback.html": [
    "ROLLBACK;"
  ],
  "https://www.postgresql.org/docs/15/textsearch-limitations.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-sequence.html": [],
  "https://www.postgresql.org/docs/15/logicaldecoding-explanation.html": [],
  "https://www.postgresql.org/docs/15/queries-order.html": [
    "SELECT a, b FROM table1 ORDER BY a + b, c;",
    "SELECT a + b AS sum, c FROM table1 ORDER BY sum;",
    "SELECT a, max(b) FROM table1 GROUP BY a ORDER BY 1;",
    "SELECT a + b AS sum, c FROM table1 ORDER BY sum + c;"
  ],
  "https://www.postgresql.org/docs/15/sql-createforeigndatawrapper.html": [
    "CREATE FOREIGN DATA WRAPPER dummy;",
    "CREATE FOREIGN DATA WRAPPER file HANDLER file_fdw_handler;",
    "CREATE FOREIGN DATA WRAPPER mywrapper\n    OPTIONS (debug 'true');"
  ],
  "https://www.postgresql.org/docs/15/protocol-logicalrep-message-formats.html": [],
  "https://www.postgresql.org/docs/15/high-availability.html": [],
  "https://www.postgresql.org/docs/15/jit-configuration.html": [],
  "https://www.postgresql.org/docs/15/encryption-options.html": [],
  "https://www.postgresql.org/docs/15/datatype-numeric.html": [
    "NUMERIC",
    "SELECT x,\n  round(x::numeric) AS num_round,\n  round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;",
    "CREATE TABLE tablename (\n    colname SERIAL\n);",
    "CREATE SEQUENCE tablename_colname_seq AS integer;",
    "CREATE TABLE tablename (\n    colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);",
    "ALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;"
  ],
  "https://www.postgresql.org/docs/15/infoschema-routine-privileges.html": [],
  "https://www.postgresql.org/docs/15/color-when.html": [],
  "https://www.postgresql.org/docs/15/sql-alteraggregate.html": [
    "ALTER AGGREGATE myavg(integer) RENAME TO my_average;",
    "ALTER AGGREGATE myavg(integer) OWNER TO joe;",
    "ALTER AGGREGATE mypercentile(float8 ORDER BY integer) SET SCHEMA myschema;",
    "ALTER AGGREGATE mypercentile(float8, integer) SET SCHEMA myschema;"
  ],
  "https://www.postgresql.org/docs/15/spgist-intro.html": [],
  "https://www.postgresql.org/docs/15/plpython-transactions.html": [
    "CREATE PROCEDURE transaction_test1()\nLANGUAGE plpython3u\nAS $$\nfor i in range(0, 10):\n    plpy.execute(\"INSERT INTO test1 (a) VALUES (%d)\" % i)\n    if i % 2 == 0:\n        plpy.commit()\n    else:\n        plpy.rollback()\n$$;",
    "CALL transaction_test1();"
  ],
  "https://www.postgresql.org/docs/15/catalog-pg-enum.html": [],
  "https://www.postgresql.org/docs/15/sql-end.html": [
    "END;"
  ],
  "https://www.postgresql.org/docs/15/lo-implementation.html": [],
  "https://www.postgresql.org/docs/15/tutorial-inheritance.html": [
    "CREATE TABLE capitals (\n  name       text,\n  population real,\n  elevation  int,\nstate      char(2)\n);",
    "CREATE TABLE non_capitals (\n  name       text,\n  population real,\n  elevation  int\n);",
    "CREATE VIEW cities AS\n  SELECT name, population, elevation FROM capitals\n    UNION\n  SELECT name, population, elevation FROM non_capitals;",
    "CREATE TABLE cities (\n  name       text,\n  population real,\n  elevation  int\n);",
    "CREATE TABLE capitals (\n  state      char(2) UNIQUE NOT NULL\n) INHERITS (cities);",
    "SELECT name, elevation\n  FROM cities\n  WHERE elevation > 500;",
    "SELECT name, elevation\n    FROM ONLY cities\n    WHERE elevation > 500;"
  ],
  "https://www.postgresql.org/docs/15/ecpg-commands.html": [
    "EXEC SQL CREATE TABLE foo (number integer, ascii char(16));",
    "EXEC SQL CREATE UNIQUE INDEX num1 ON foo(number);",
    "EXEC SQL COMMIT;",
    "EXEC SQL INSERT INTO foo (number, ascii) VALUES (9999, 'doodad');",
    "EXEC SQL COMMIT;",
    "EXEC SQL DELETE FROM foo WHERE number = 9999;",
    "EXEC SQL COMMIT;",
    "EXEC SQL UPDATE foo\n    SET ascii = 'foobar'\n    WHERE number = 9999",
    "EXEC SQL COMMIT;",
    "EXEC SQL SELECT foo INTO :FooBar FROM table1 WHERE ascii = 'doodad';",
    "EXEC SQL SHOW search_path INTO :var;",
    "EXEC SQL DECLARE foo_bar CURSOR FOR\n    SELECT number, ascii FROM foo\n    ORDER BY ascii",
    "EXEC SQL OPEN foo_bar;",
    "EXEC SQL FETCH foo_bar INTO :FooBar, DooDad;",
    "EXEC SQL CLOSE foo_bar",
    "EXEC SQL COMMIT;",
    "EXEC SQL PREPARE stmt1 FROM \"SELECT oid, datname FROM pg_database WHERE oid = ?\";",
    "EXEC SQL EXECUTE stmt1 INTO :dboid, :dbname USING 1;",
    "EXEC SQL PREPARE stmt1 FROM \"SELECT oid,datname FROM pg_database WHERE oid > ?\";",
    "EXEC SQL DECLARE foo_bar CURSOR FOR stmt1;",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL OPEN foo_bar USING 100;",
    "EXEC SQL FETCH NEXT FROM foo_bar INTO :dboid, :dbname",
    "EXEC SQL CLOSE foo_bar",
    "EXEC SQL DEALLOCATE PREPARE name;"
  ],
  "https://www.postgresql.org/docs/15/event-trigger-table-rewrite-example.html": [
    "CREATE OR REPLACE FUNCTION no_rewrite()\n RETURNS event_trigger\n LANGUAGE plpgsql AS\n$$\n---\n--- Implement local Table Rewriting policy:\n---   public.foo is not allowed rewriting, ever\n---   other tables are only allowed rewriting between 1am and 6am\n---   unless they have more than 100 blocks\n---\nDECLARE\n  table_oid oid := pg_event_trigger_table_rewrite_oid();\n  current_hour integer := extract('hour' from current_time);\n  pages integer;\n  max_pages integer := 100;\nBEGIN\n  IF pg_event_trigger_table_rewrite_oid() = 'public.foo'::regclass\n  THEN\n        RAISE EXCEPTION 'you''re not allowed to rewrite the table %',\n                        table_oid::regclass;\n  END IF;\n\n  SELECT INTO pages relpages FROM pg_class WHERE oid = table_oid;\n  IF pages > max_pages\n  THEN\n        RAISE EXCEPTION 'rewrites only allowed for table with less than % pages',\n                        max_pages;\n  END IF;\n\n  IF current_hour NOT BETWEEN 1 AND 6\n  THEN\n        RAISE EXCEPTION 'rewrites only allowed between 1am and 6am';\n  END IF;\nEND;\n$$;",
    "CREATE EVENT TRIGGER no_rewrite_allowed\n                  ON table_rewrite\n   EXECUTE FUNCTION no_rewrite();"
  ],
  "https://www.postgresql.org/docs/15/sql-alteruser.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-open.html": [],
  "https://www.postgresql.org/docs/15/auth-trust.html": [],
  "https://www.postgresql.org/docs/15/functions-binarystring.html": [],
  "https://www.postgresql.org/docs/15/typeconv-oper.html": [],
  "https://www.postgresql.org/docs/15/infoschema-view-column-usage.html": [],
  "https://www.postgresql.org/docs/15/tutorial-join.html": [
    "SELECT * FROM weather JOIN cities ON city = name;",
    "SELECT city, temp_lo, temp_hi, prcp, date, location\n    FROM weather JOIN cities ON city = name;",
    "SELECT weather.city, weather.temp_lo, weather.temp_hi,\n       weather.prcp, weather.date, cities.location\n    FROM weather JOIN cities ON weather.city = cities.name;",
    "SELECT *\n    FROM weather, cities\n    WHERE city = name;",
    "SELECT *\n    FROM weather LEFT OUTER JOIN cities ON weather.city = cities.name;",
    "SELECT w1.city, w1.temp_lo AS low, w1.temp_hi AS high,\n       w2.city, w2.temp_lo AS low, w2.temp_hi AS high\n    FROM weather w1 JOIN weather w2\n        ON w1.temp_lo < w2.temp_lo AND w1.temp_hi > w2.temp_hi;",
    "SELECT *\n    FROM weather w JOIN cities c ON w.city = c.name;"
  ],
  "https://www.postgresql.org/docs/15/external-extensions.html": [],
  "https://www.postgresql.org/docs/15/parallel-query.html": [],
  "https://www.postgresql.org/docs/15/view-pg-stats-ext-exprs.html": [],
  "https://www.postgresql.org/docs/15/locking-indexes.html": [],
  "https://www.postgresql.org/docs/15/plpgsql-development-tips.html": [
    "CREATE OR REPLACE FUNCTION testfunc(integer) RETURNS integer AS $$\n          ....\n$$ LANGUAGE plpgsql;",
    "CREATE OR REPLACE FUNCTION testfunc(integer) RETURNS integer AS $PROC$\n          ....\n$PROC$ LANGUAGE plpgsql;",
    "CREATE FUNCTION foo() RETURNS integer AS '\n          ....\n' LANGUAGE plpgsql;",
    "SELECT * FROM users WHERE f_name=''foobar'';",
    "SELECT * FROM users WHERE f_name='foobar';",
    "SET plpgsql.extra_warnings TO 'shadowed_variables';",
    "CREATE FUNCTION foo(f1 int) RETURNS int AS $$\nDECLARE\nf1 int;\nBEGIN\nRETURN f1;\nEND;\n$$ LANGUAGE plpgsql;",
    "LINE 3: f1 int",
    "CREATE FUNCTION",
    "SET plpgsql.extra_warnings TO 'strict_multi_assignment';",
    "CREATE OR REPLACE FUNCTION public.foo()\n RETURNS void\n LANGUAGE plpgsql\nAS $$\nDECLARE\n  x int;\n  y int;\nBEGIN\n  SELECT 1 INTO x, y;\n  SELECT 1, 2 INTO x, y;\n  SELECT 1, 2, 3 INTO x, y;\nEND;\n$$;",
    "SELECT foo();"
  ],
  "https://www.postgresql.org/docs/15/spgist.html": [],
  "https://www.postgresql.org/docs/15/pgxlogdump.html": [],
  "https://www.postgresql.org/docs/15/release-15-1.html": [],
  "https://www.postgresql.org/docs/15/sql-set-role.html": [
    "SELECT SESSION_USER, CURRENT_USER;",
    "SET ROLE 'paul'",
    "SELECT SESSION_USER, CURRENT_USER;"
  ],
  "https://www.postgresql.org/docs/15/app-postmaster.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-freetupletable.html": [],
  "https://www.postgresql.org/docs/15/libpq-control.html": [],
  "https://www.postgresql.org/docs/15/catalog-pg-shseclabel.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-error-handling.html": [],
  "https://www.postgresql.org/docs/15/notation.html": [],
  "https://www.postgresql.org/docs/15/wal.html": [],
  "https://www.postgresql.org/docs/15/lo-examplesect.html": [],
  "https://www.postgresql.org/docs/15/runtime-config-autovacuum.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-cursor-parse-open.html": [],
  "https://www.postgresql.org/docs/15/contrib-dblink-build-sql-delete.html": [],
  "https://www.postgresql.org/docs/15/plperl-under-the-hood.html": [
    "DO 'elog(WARNING, join \", \", sort keys %INC)' LANGUAGE plperl"
  ],
  "https://www.postgresql.org/docs/15/sql-unlisten.html": [
    "LISTEN virtual;",
    "NOTIFY virtual;",
    "UNLISTEN virtual;",
    "NOTIFY virtual;"
  ],
  "https://www.postgresql.org/docs/15/pgstatstatements.html": [],
  "https://www.postgresql.org/docs/15/sql-keywords-appendix.html": [],
  "https://www.postgresql.org/docs/15/spi-spi-rollback.html": [],
  "https://www.postgresql.org/docs/15/functions-xml.html": [],
  "https://www.postgresql.org/docs/15/logical-replication-security.html": [],
  "https://www.postgresql.org/docs/15/ecpg-descriptors.html": [
    "EXEC SQL ALLOCATE DESCRIPTOR identifier;",
    "EXEC SQL DEALLOCATE DESCRIPTOR identifier;",
    "EXEC SQL FETCH NEXT FROM mycursor INTO SQL DESCRIPTOR mydesc;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL PREPARE stmt1 FROM :sql_stmt;",
    "EXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR mydesc;",
    "EXEC SQL GET DESCRIPTOR name :hostvar = field;",
    "EXEC SQL GET DESCRIPTOR name VALUE num :hostvar = field;",
    "EXEC SQL SET DESCRIPTOR name VALUE num field = :hostvar;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL FETCH 5 FROM mycursor INTO SQL DESCRIPTOR mydesc;",
    "EXEC SQL GET DESCRIPTOR mydesc VALUE 1 :id = DATA;",
    "EXEC SQL include sqlda.h;",
    "EXEC SQL FETCH 3 FROM mycursor INTO DESCRIPTOR mysqlda;",
    "EXEC SQL DESCRIBE prepared_statement INTO mysqlda;",
    "EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;",
    "EXEC SQL BEGIN DECLARE SECTION;",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL PREPARE stmt1 FROM :query;",
    "EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;",
    "EXEC SQL include sqlda.h;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO testdb AS con1 USER testuser;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL PREPARE stmt1 FROM :query;",
    "EXEC SQL DECLARE cur1 CURSOR FOR stmt1;",
    "EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;",
    "EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;",
    "EXEC SQL CLOSE cur1;",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;",
    "EXEC SQL include sqlda.h",
    "EXEC SQL WHENEVER NOT FOUND DO BREAK;",
    "EXEC SQL WHENEVER SQLERROR STOP;",
    "EXEC SQL BEGIN DECLARE SECTION",
    "EXEC SQL END DECLARE SECTION;",
    "EXEC SQL CONNECT TO uptimedb AS con1 USER uptime;",
    "EXEC SQL SELECT pg_catalog.set_config('search_path', '', false);",
    "EXEC SQL COMMIT;",
    "EXEC SQL PREPARE stmt1 FROM :query;",
    "EXEC SQL DECLARE cur1 CURSOR FOR stmt1;",
    "EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;",
    "EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;",
    "EXEC SQL CLOSE cur1",
    "EXEC SQL COMMIT;",
    "EXEC SQL DISCONNECT ALL;"
  ],
  "https://www.postgresql.org/docs/15/view-pg-tables.html": [],
  "https://www.postgresql.org/docs/15/datatype-geometric.html": [],
  "https://www.postgresql.org/docs/15/sql-deallocate.html": [],
  "https://www.postgresql.org/docs/15/infoschema-routine-sequence-usage.html": [],
  "https://www.postgresql.org/docs/15/jit-decision.html": [],
  "https://www.postgresql.org/docs/15/pltcl-global.html": [],
  "https://www.postgresql.org/docs/15/infoschema-view-routine-usage.html": [],
  "https://www.postgresql.org/docs/15/sql-dropconversion.html": [
    "DROP CONVERSION myname;"
  ],
  "https://www.postgresql.org/docs/15/ddl-constraints.html": [
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric CHECK (price > 0)\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric CONSTRAINT positive_price CHECK (price > 0)\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric CHECK (price > 0),\n    discounted_price numeric CHECK (discounted_price > 0),\n    CHECK (price > discounted_price)\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    CHECK (price > 0),\n    discounted_price numeric,\n    CHECK (discounted_price > 0),\n    CHECK (price > discounted_price)\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric CHECK (price > 0),\n    discounted_price numeric,\n    CHECK (discounted_price > 0 AND price > discounted_price)\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    CHECK (price > 0),\n    discounted_price numeric,\n    CHECK (discounted_price > 0),\n    CONSTRAINT valid_discount CHECK (price > discounted_price)\n);",
    "CREATE TABLE products (\n    product_no integer NOT NULL,\n    name text NOT NULL,\n    price numeric\n);",
    "CREATE TABLE products (\n    product_no integer NOT NULL,\n    name text NOT NULL,\n    price numeric NOT NULL CHECK (price > 0)\n);",
    "CREATE TABLE products (\n    product_no integer NULL,\n    name text NULL,\n    price numeric NULL\n);",
    "CREATE TABLE products (\n    product_no integer UNIQUE,\n    name text,\n    price numeric\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    UNIQUE (product_no)\n);",
    "CREATE TABLE example (\n    a integer,\n    b integer,\n    c integer,\n    UNIQUE (a, c)\n);",
    "CREATE TABLE products (\n    product_no integer CONSTRAINT must_be_different UNIQUE,\n    name text,\n    price numeric\n);",
    "CREATE TABLE products (\n    product_no integer UNIQUE NULLS NOT DISTINCT,\n    name text,\n    price numeric\n);",
    "CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    UNIQUE NULLS NOT DISTINCT (product_no)\n);",
    "CREATE TABLE products (\n    product_no integer UNIQUE NOT NULL,\n    name text,\n    price numeric\n);",
    "CREATE TABLE products (\n    product_no integer PRIMARY KEY,\n    name text,\n    price numeric\n);",
    "CREATE TABLE example (\n    a integer,\n    b integer,\n    c integer,\n    PRIMARY KEY (a, c)\n);",
    "CREATE TABLE products (\n    product_no integer PRIMARY KEY,\n    name text,\n    price numeric\n);",
    "CREATE TABLE orders (\n    order_id integer PRIMARY KEY,\n    product_no integer REFERENCES products (product_no),\n    quantity integer\n);",
    "CREATE TABLE orders (\n    order_id integer PRIMARY KEY,\n    product_no integer REFERENCES products,\n    quantity integer\n);",
    "CREATE TABLE t1 (\n  a integer PRIMARY KEY,\n  b integer,\n  c integer,\n  FOREIGN KEY (b, c) REFERENCES other_table (c1, c2)\n);",
    "CREATE TABLE tree (\n    node_id integer PRIMARY KEY,\n    parent_id integer REFERENCES tree,\n    name text,\n    ...\n);",
    "CREATE TABLE products (\n    product_no integer PRIMARY KEY,\n    name text,\n    price numeric\n);",
    "CREATE TABLE orders (\n    order_id integer PRIMARY KEY,\n    shipping_address text,\n    ...\n);",
    "CREATE TABLE order_items (\n    product_no integer REFERENCES products,\n    order_id integer REFERENCES orders,\n    quantity integer,\n    PRIMARY KEY (product_no, order_id)\n);",
    "CREATE TABLE products (\n    product_no integer PRIMARY KEY,\n    name text,\n    price numeric\n);",
    "CREATE TABLE orders (\n    order_id integer PRIMARY KEY,\n    shipping_address text,\n    ...\n);",
    "CREATE TABLE order_items (\n    product_no integer REFERENCES products ON DELETE RESTRICT,\n    order_id integer REFERENCES orders ON DELETE CASCADE,\n    quantity integer,\n    PRIMARY KEY (product_no, order_id)\n);",
    "CREATE TABLE tenants (\n    tenant_id integer PRIMARY KEY\n);",
    "CREATE TABLE users (\n    tenant_id integer REFERENCES tenants ON DELETE CASCADE,\n    user_id integer NOT NULL,\n    PRIMARY KEY (tenant_id, user_id)\n);",
    "CREATE TABLE posts (\n    tenant_id integer REFERENCES tenants ON DELETE CASCADE,\n    post_id integer NOT NULL,\n    author_id integer,\n    PRIMARY KEY (tenant_id, post_id),\n    FOREIGN KEY (tenant_id, author_id) REFERENCES users ON DELETE SET NULL (author_id)\n);",
    "CREATE TABLE circles (\n    c circle,\n    EXCLUDE USING gist (c WITH &&)\n);"
  ],
  "https://www.postgresql.org/docs/15/xplang-install.html": [
    "CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS\n    '$libdir/plperl' LANGUAGE C;",
    "CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS\n    '$libdir/plperl' LANGUAGE C STRICT;",
    "CREATE FUNCTION plperl_validator(oid) RETURNS void AS\n    '$libdir/plperl' LANGUAGE C STRICT;",
    "CREATE TRUSTED LANGUAGE plperl\n    HANDLER plperl_call_handler\n    INLINE plperl_inline_handler\n    VALIDATOR plperl_validator;"
  ],
  "https://www.postgresql.org/docs/15/spi-interface.html": [],
  "https://www.postgresql.org/docs/15/datatype-money.html": [
    "SELECT '12.34'::float8::numeric::money;",
    "SELECT '52093.89'::money::numeric::float8;"
  ],
  "https://www.postgresql.org/docs/15/sql-altertstemplate.html": [],
  "https://www.postgresql.org/docs/15/database-roles.html": []
}